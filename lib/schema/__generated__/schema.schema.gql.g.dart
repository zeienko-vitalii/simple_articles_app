// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'schema.schema.gql.dart';

// **************************************************************************
// BuiltValueGenerator
// **************************************************************************

const G_FilterKind _$gFilterKindsearch = const G_FilterKind._('search');
const G_FilterKind _$gFilterKindAND = const G_FilterKind._('AND');
const G_FilterKind _$gFilterKindOR = const G_FilterKind._('OR');
const G_FilterKind _$gFilterKindNOT = const G_FilterKind._('NOT');
const G_FilterKind _$gFilterKindeq = const G_FilterKind._('eq');
const G_FilterKind _$gFilterKindeq_not = const G_FilterKind._('eq_not');
const G_FilterKind _$gFilterKindGin = const G_FilterKind._('Gin');
const G_FilterKind _$gFilterKindnot_in = const G_FilterKind._('not_in');
const G_FilterKind _$gFilterKindlt = const G_FilterKind._('lt');
const G_FilterKind _$gFilterKindlte = const G_FilterKind._('lte');
const G_FilterKind _$gFilterKindgt = const G_FilterKind._('gt');
const G_FilterKind _$gFilterKindgte = const G_FilterKind._('gte');
const G_FilterKind _$gFilterKindcontains = const G_FilterKind._('contains');
const G_FilterKind _$gFilterKindnot_contains =
    const G_FilterKind._('not_contains');
const G_FilterKind _$gFilterKindstarts_with =
    const G_FilterKind._('starts_with');
const G_FilterKind _$gFilterKindnot_starts_with =
    const G_FilterKind._('not_starts_with');
const G_FilterKind _$gFilterKindends_with = const G_FilterKind._('ends_with');
const G_FilterKind _$gFilterKindnot_ends_with =
    const G_FilterKind._('not_ends_with');
const G_FilterKind _$gFilterKindcontains_all =
    const G_FilterKind._('contains_all');
const G_FilterKind _$gFilterKindcontains_some =
    const G_FilterKind._('contains_some');
const G_FilterKind _$gFilterKindcontains_none =
    const G_FilterKind._('contains_none');
const G_FilterKind _$gFilterKindrelational_single =
    const G_FilterKind._('relational_single');
const G_FilterKind _$gFilterKindrelational_every =
    const G_FilterKind._('relational_every');
const G_FilterKind _$gFilterKindrelational_some =
    const G_FilterKind._('relational_some');
const G_FilterKind _$gFilterKindrelational_none =
    const G_FilterKind._('relational_none');
const G_FilterKind _$gFilterKindjson_path_exists =
    const G_FilterKind._('json_path_exists');
const G_FilterKind _$gFilterKindjson_value_recursive =
    const G_FilterKind._('json_value_recursive');
const G_FilterKind _$gFilterKindunion_empty =
    const G_FilterKind._('union_empty');
const G_FilterKind _$gFilterKindunion_single =
    const G_FilterKind._('union_single');
const G_FilterKind _$gFilterKindunion_some = const G_FilterKind._('union_some');
const G_FilterKind _$gFilterKindunion_every =
    const G_FilterKind._('union_every');
const G_FilterKind _$gFilterKindunion_none = const G_FilterKind._('union_none');

G_FilterKind _$gFilterKindValueOf(String name) {
  switch (name) {
    case 'search':
      return _$gFilterKindsearch;
    case 'AND':
      return _$gFilterKindAND;
    case 'OR':
      return _$gFilterKindOR;
    case 'NOT':
      return _$gFilterKindNOT;
    case 'eq':
      return _$gFilterKindeq;
    case 'eq_not':
      return _$gFilterKindeq_not;
    case 'Gin':
      return _$gFilterKindGin;
    case 'not_in':
      return _$gFilterKindnot_in;
    case 'lt':
      return _$gFilterKindlt;
    case 'lte':
      return _$gFilterKindlte;
    case 'gt':
      return _$gFilterKindgt;
    case 'gte':
      return _$gFilterKindgte;
    case 'contains':
      return _$gFilterKindcontains;
    case 'not_contains':
      return _$gFilterKindnot_contains;
    case 'starts_with':
      return _$gFilterKindstarts_with;
    case 'not_starts_with':
      return _$gFilterKindnot_starts_with;
    case 'ends_with':
      return _$gFilterKindends_with;
    case 'not_ends_with':
      return _$gFilterKindnot_ends_with;
    case 'contains_all':
      return _$gFilterKindcontains_all;
    case 'contains_some':
      return _$gFilterKindcontains_some;
    case 'contains_none':
      return _$gFilterKindcontains_none;
    case 'relational_single':
      return _$gFilterKindrelational_single;
    case 'relational_every':
      return _$gFilterKindrelational_every;
    case 'relational_some':
      return _$gFilterKindrelational_some;
    case 'relational_none':
      return _$gFilterKindrelational_none;
    case 'json_path_exists':
      return _$gFilterKindjson_path_exists;
    case 'json_value_recursive':
      return _$gFilterKindjson_value_recursive;
    case 'union_empty':
      return _$gFilterKindunion_empty;
    case 'union_single':
      return _$gFilterKindunion_single;
    case 'union_some':
      return _$gFilterKindunion_some;
    case 'union_every':
      return _$gFilterKindunion_every;
    case 'union_none':
      return _$gFilterKindunion_none;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_FilterKind> _$gFilterKindValues =
    new BuiltSet<G_FilterKind>(const <G_FilterKind>[
  _$gFilterKindsearch,
  _$gFilterKindAND,
  _$gFilterKindOR,
  _$gFilterKindNOT,
  _$gFilterKindeq,
  _$gFilterKindeq_not,
  _$gFilterKindGin,
  _$gFilterKindnot_in,
  _$gFilterKindlt,
  _$gFilterKindlte,
  _$gFilterKindgt,
  _$gFilterKindgte,
  _$gFilterKindcontains,
  _$gFilterKindnot_contains,
  _$gFilterKindstarts_with,
  _$gFilterKindnot_starts_with,
  _$gFilterKindends_with,
  _$gFilterKindnot_ends_with,
  _$gFilterKindcontains_all,
  _$gFilterKindcontains_some,
  _$gFilterKindcontains_none,
  _$gFilterKindrelational_single,
  _$gFilterKindrelational_every,
  _$gFilterKindrelational_some,
  _$gFilterKindrelational_none,
  _$gFilterKindjson_path_exists,
  _$gFilterKindjson_value_recursive,
  _$gFilterKindunion_empty,
  _$gFilterKindunion_single,
  _$gFilterKindunion_some,
  _$gFilterKindunion_every,
  _$gFilterKindunion_none,
]);

const G_MutationInputFieldKind _$gMutationInputFieldKindscalar =
    const G_MutationInputFieldKind._('scalar');
const G_MutationInputFieldKind _$gMutationInputFieldKindrichText =
    const G_MutationInputFieldKind._('richText');
const G_MutationInputFieldKind _$gMutationInputFieldKindrichTextWithEmbeds =
    const G_MutationInputFieldKind._('richTextWithEmbeds');
const G_MutationInputFieldKind _$gMutationInputFieldKindGenum =
    const G_MutationInputFieldKind._('Genum');
const G_MutationInputFieldKind _$gMutationInputFieldKindrelation =
    const G_MutationInputFieldKind._('relation');
const G_MutationInputFieldKind _$gMutationInputFieldKindunion =
    const G_MutationInputFieldKind._('union');
const G_MutationInputFieldKind _$gMutationInputFieldKindvirtual =
    const G_MutationInputFieldKind._('virtual');

G_MutationInputFieldKind _$gMutationInputFieldKindValueOf(String name) {
  switch (name) {
    case 'scalar':
      return _$gMutationInputFieldKindscalar;
    case 'richText':
      return _$gMutationInputFieldKindrichText;
    case 'richTextWithEmbeds':
      return _$gMutationInputFieldKindrichTextWithEmbeds;
    case 'Genum':
      return _$gMutationInputFieldKindGenum;
    case 'relation':
      return _$gMutationInputFieldKindrelation;
    case 'union':
      return _$gMutationInputFieldKindunion;
    case 'virtual':
      return _$gMutationInputFieldKindvirtual;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_MutationInputFieldKind> _$gMutationInputFieldKindValues =
    new BuiltSet<G_MutationInputFieldKind>(const <G_MutationInputFieldKind>[
  _$gMutationInputFieldKindscalar,
  _$gMutationInputFieldKindrichText,
  _$gMutationInputFieldKindrichTextWithEmbeds,
  _$gMutationInputFieldKindGenum,
  _$gMutationInputFieldKindrelation,
  _$gMutationInputFieldKindunion,
  _$gMutationInputFieldKindvirtual,
]);

const G_MutationKind _$gMutationKindcreate = const G_MutationKind._('create');
const G_MutationKind _$gMutationKindpublish = const G_MutationKind._('publish');
const G_MutationKind _$gMutationKindunpublish =
    const G_MutationKind._('unpublish');
const G_MutationKind _$gMutationKindGupdate = const G_MutationKind._('Gupdate');
const G_MutationKind _$gMutationKindupsert = const G_MutationKind._('upsert');
const G_MutationKind _$gMutationKinddelete = const G_MutationKind._('delete');
const G_MutationKind _$gMutationKindupdateMany =
    const G_MutationKind._('updateMany');
const G_MutationKind _$gMutationKindpublishMany =
    const G_MutationKind._('publishMany');
const G_MutationKind _$gMutationKindunpublishMany =
    const G_MutationKind._('unpublishMany');
const G_MutationKind _$gMutationKinddeleteMany =
    const G_MutationKind._('deleteMany');
const G_MutationKind _$gMutationKindschedulePublish =
    const G_MutationKind._('schedulePublish');
const G_MutationKind _$gMutationKindscheduleUnpublish =
    const G_MutationKind._('scheduleUnpublish');

G_MutationKind _$gMutationKindValueOf(String name) {
  switch (name) {
    case 'create':
      return _$gMutationKindcreate;
    case 'publish':
      return _$gMutationKindpublish;
    case 'unpublish':
      return _$gMutationKindunpublish;
    case 'Gupdate':
      return _$gMutationKindGupdate;
    case 'upsert':
      return _$gMutationKindupsert;
    case 'delete':
      return _$gMutationKinddelete;
    case 'updateMany':
      return _$gMutationKindupdateMany;
    case 'publishMany':
      return _$gMutationKindpublishMany;
    case 'unpublishMany':
      return _$gMutationKindunpublishMany;
    case 'deleteMany':
      return _$gMutationKinddeleteMany;
    case 'schedulePublish':
      return _$gMutationKindschedulePublish;
    case 'scheduleUnpublish':
      return _$gMutationKindscheduleUnpublish;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_MutationKind> _$gMutationKindValues =
    new BuiltSet<G_MutationKind>(const <G_MutationKind>[
  _$gMutationKindcreate,
  _$gMutationKindpublish,
  _$gMutationKindunpublish,
  _$gMutationKindGupdate,
  _$gMutationKindupsert,
  _$gMutationKinddelete,
  _$gMutationKindupdateMany,
  _$gMutationKindpublishMany,
  _$gMutationKindunpublishMany,
  _$gMutationKinddeleteMany,
  _$gMutationKindschedulePublish,
  _$gMutationKindscheduleUnpublish,
]);

const G_OrderDirection _$gOrderDirectionasc = const G_OrderDirection._('asc');
const G_OrderDirection _$gOrderDirectiondesc = const G_OrderDirection._('desc');

G_OrderDirection _$gOrderDirectionValueOf(String name) {
  switch (name) {
    case 'asc':
      return _$gOrderDirectionasc;
    case 'desc':
      return _$gOrderDirectiondesc;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_OrderDirection> _$gOrderDirectionValues =
    new BuiltSet<G_OrderDirection>(const <G_OrderDirection>[
  _$gOrderDirectionasc,
  _$gOrderDirectiondesc,
]);

const G_RelationInputCardinality _$gRelationInputCardinalityone =
    const G_RelationInputCardinality._('one');
const G_RelationInputCardinality _$gRelationInputCardinalitymany =
    const G_RelationInputCardinality._('many');

G_RelationInputCardinality _$gRelationInputCardinalityValueOf(String name) {
  switch (name) {
    case 'one':
      return _$gRelationInputCardinalityone;
    case 'many':
      return _$gRelationInputCardinalitymany;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationInputCardinality> _$gRelationInputCardinalityValues =
    new BuiltSet<G_RelationInputCardinality>(const <G_RelationInputCardinality>[
  _$gRelationInputCardinalityone,
  _$gRelationInputCardinalitymany,
]);

const G_RelationInputKind _$gRelationInputKindcreate =
    const G_RelationInputKind._('create');
const G_RelationInputKind _$gRelationInputKindGupdate =
    const G_RelationInputKind._('Gupdate');

G_RelationInputKind _$gRelationInputKindValueOf(String name) {
  switch (name) {
    case 'create':
      return _$gRelationInputKindcreate;
    case 'Gupdate':
      return _$gRelationInputKindGupdate;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationInputKind> _$gRelationInputKindValues =
    new BuiltSet<G_RelationInputKind>(const <G_RelationInputKind>[
  _$gRelationInputKindcreate,
  _$gRelationInputKindGupdate,
]);

const G_RelationKind _$gRelationKindregular = const G_RelationKind._('regular');
const G_RelationKind _$gRelationKindunion = const G_RelationKind._('union');

G_RelationKind _$gRelationKindValueOf(String name) {
  switch (name) {
    case 'regular':
      return _$gRelationKindregular;
    case 'union':
      return _$gRelationKindunion;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationKind> _$gRelationKindValues =
    new BuiltSet<G_RelationKind>(const <G_RelationKind>[
  _$gRelationKindregular,
  _$gRelationKindunion,
]);

const Guntitled _$guntitledbase = const Guntitled._('base');
const Guntitled _$guntitledlocalization = const Guntitled._('localization');
const Guntitled _$guntitledcombined = const Guntitled._('combined');

Guntitled _$guntitledValueOf(String name) {
  switch (name) {
    case 'base':
      return _$guntitledbase;
    case 'localization':
      return _$guntitledlocalization;
    case 'combined':
      return _$guntitledcombined;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Guntitled> _$guntitledValues =
    new BuiltSet<Guntitled>(const <Guntitled>[
  _$guntitledbase,
  _$guntitledlocalization,
  _$guntitledcombined,
]);

const GArticleOrderByInput _$gArticleOrderByInputpublishedAt_ASC =
    const GArticleOrderByInput._('publishedAt_ASC');
const GArticleOrderByInput _$gArticleOrderByInputpublishedAt_DESC =
    const GArticleOrderByInput._('publishedAt_DESC');
const GArticleOrderByInput _$gArticleOrderByInputupdatedAt_ASC =
    const GArticleOrderByInput._('updatedAt_ASC');
const GArticleOrderByInput _$gArticleOrderByInputupdatedAt_DESC =
    const GArticleOrderByInput._('updatedAt_DESC');
const GArticleOrderByInput _$gArticleOrderByInputcreatedAt_ASC =
    const GArticleOrderByInput._('createdAt_ASC');
const GArticleOrderByInput _$gArticleOrderByInputcreatedAt_DESC =
    const GArticleOrderByInput._('createdAt_DESC');
const GArticleOrderByInput _$gArticleOrderByInputid_ASC =
    const GArticleOrderByInput._('id_ASC');
const GArticleOrderByInput _$gArticleOrderByInputid_DESC =
    const GArticleOrderByInput._('id_DESC');
const GArticleOrderByInput _$gArticleOrderByInputtitle_ASC =
    const GArticleOrderByInput._('title_ASC');
const GArticleOrderByInput _$gArticleOrderByInputtitle_DESC =
    const GArticleOrderByInput._('title_DESC');
const GArticleOrderByInput _$gArticleOrderByInputsubtitle_ASC =
    const GArticleOrderByInput._('subtitle_ASC');
const GArticleOrderByInput _$gArticleOrderByInputsubtitle_DESC =
    const GArticleOrderByInput._('subtitle_DESC');
const GArticleOrderByInput _$gArticleOrderByInputpublished_ASC =
    const GArticleOrderByInput._('published_ASC');
const GArticleOrderByInput _$gArticleOrderByInputpublished_DESC =
    const GArticleOrderByInput._('published_DESC');
const GArticleOrderByInput _$gArticleOrderByInputmarkdown_ASC =
    const GArticleOrderByInput._('markdown_ASC');
const GArticleOrderByInput _$gArticleOrderByInputmarkdown_DESC =
    const GArticleOrderByInput._('markdown_DESC');

GArticleOrderByInput _$gArticleOrderByInputValueOf(String name) {
  switch (name) {
    case 'publishedAt_ASC':
      return _$gArticleOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gArticleOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gArticleOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gArticleOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gArticleOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gArticleOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gArticleOrderByInputid_ASC;
    case 'id_DESC':
      return _$gArticleOrderByInputid_DESC;
    case 'title_ASC':
      return _$gArticleOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gArticleOrderByInputtitle_DESC;
    case 'subtitle_ASC':
      return _$gArticleOrderByInputsubtitle_ASC;
    case 'subtitle_DESC':
      return _$gArticleOrderByInputsubtitle_DESC;
    case 'published_ASC':
      return _$gArticleOrderByInputpublished_ASC;
    case 'published_DESC':
      return _$gArticleOrderByInputpublished_DESC;
    case 'markdown_ASC':
      return _$gArticleOrderByInputmarkdown_ASC;
    case 'markdown_DESC':
      return _$gArticleOrderByInputmarkdown_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GArticleOrderByInput> _$gArticleOrderByInputValues =
    new BuiltSet<GArticleOrderByInput>(const <GArticleOrderByInput>[
  _$gArticleOrderByInputpublishedAt_ASC,
  _$gArticleOrderByInputpublishedAt_DESC,
  _$gArticleOrderByInputupdatedAt_ASC,
  _$gArticleOrderByInputupdatedAt_DESC,
  _$gArticleOrderByInputcreatedAt_ASC,
  _$gArticleOrderByInputcreatedAt_DESC,
  _$gArticleOrderByInputid_ASC,
  _$gArticleOrderByInputid_DESC,
  _$gArticleOrderByInputtitle_ASC,
  _$gArticleOrderByInputtitle_DESC,
  _$gArticleOrderByInputsubtitle_ASC,
  _$gArticleOrderByInputsubtitle_DESC,
  _$gArticleOrderByInputpublished_ASC,
  _$gArticleOrderByInputpublished_DESC,
  _$gArticleOrderByInputmarkdown_ASC,
  _$gArticleOrderByInputmarkdown_DESC,
]);

const GAssetOrderByInput _$gAssetOrderByInputmimeType_ASC =
    const GAssetOrderByInput._('mimeType_ASC');
const GAssetOrderByInput _$gAssetOrderByInputmimeType_DESC =
    const GAssetOrderByInput._('mimeType_DESC');
const GAssetOrderByInput _$gAssetOrderByInputsize_ASC =
    const GAssetOrderByInput._('size_ASC');
const GAssetOrderByInput _$gAssetOrderByInputsize_DESC =
    const GAssetOrderByInput._('size_DESC');
const GAssetOrderByInput _$gAssetOrderByInputwidth_ASC =
    const GAssetOrderByInput._('width_ASC');
const GAssetOrderByInput _$gAssetOrderByInputwidth_DESC =
    const GAssetOrderByInput._('width_DESC');
const GAssetOrderByInput _$gAssetOrderByInputheight_ASC =
    const GAssetOrderByInput._('height_ASC');
const GAssetOrderByInput _$gAssetOrderByInputheight_DESC =
    const GAssetOrderByInput._('height_DESC');
const GAssetOrderByInput _$gAssetOrderByInputfileName_ASC =
    const GAssetOrderByInput._('fileName_ASC');
const GAssetOrderByInput _$gAssetOrderByInputfileName_DESC =
    const GAssetOrderByInput._('fileName_DESC');
const GAssetOrderByInput _$gAssetOrderByInputhandle_ASC =
    const GAssetOrderByInput._('handle_ASC');
const GAssetOrderByInput _$gAssetOrderByInputhandle_DESC =
    const GAssetOrderByInput._('handle_DESC');
const GAssetOrderByInput _$gAssetOrderByInputpublishedAt_ASC =
    const GAssetOrderByInput._('publishedAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputpublishedAt_DESC =
    const GAssetOrderByInput._('publishedAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputupdatedAt_ASC =
    const GAssetOrderByInput._('updatedAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputupdatedAt_DESC =
    const GAssetOrderByInput._('updatedAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputcreatedAt_ASC =
    const GAssetOrderByInput._('createdAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputcreatedAt_DESC =
    const GAssetOrderByInput._('createdAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputid_ASC =
    const GAssetOrderByInput._('id_ASC');
const GAssetOrderByInput _$gAssetOrderByInputid_DESC =
    const GAssetOrderByInput._('id_DESC');

GAssetOrderByInput _$gAssetOrderByInputValueOf(String name) {
  switch (name) {
    case 'mimeType_ASC':
      return _$gAssetOrderByInputmimeType_ASC;
    case 'mimeType_DESC':
      return _$gAssetOrderByInputmimeType_DESC;
    case 'size_ASC':
      return _$gAssetOrderByInputsize_ASC;
    case 'size_DESC':
      return _$gAssetOrderByInputsize_DESC;
    case 'width_ASC':
      return _$gAssetOrderByInputwidth_ASC;
    case 'width_DESC':
      return _$gAssetOrderByInputwidth_DESC;
    case 'height_ASC':
      return _$gAssetOrderByInputheight_ASC;
    case 'height_DESC':
      return _$gAssetOrderByInputheight_DESC;
    case 'fileName_ASC':
      return _$gAssetOrderByInputfileName_ASC;
    case 'fileName_DESC':
      return _$gAssetOrderByInputfileName_DESC;
    case 'handle_ASC':
      return _$gAssetOrderByInputhandle_ASC;
    case 'handle_DESC':
      return _$gAssetOrderByInputhandle_DESC;
    case 'publishedAt_ASC':
      return _$gAssetOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gAssetOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gAssetOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gAssetOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gAssetOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gAssetOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gAssetOrderByInputid_ASC;
    case 'id_DESC':
      return _$gAssetOrderByInputid_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GAssetOrderByInput> _$gAssetOrderByInputValues =
    new BuiltSet<GAssetOrderByInput>(const <GAssetOrderByInput>[
  _$gAssetOrderByInputmimeType_ASC,
  _$gAssetOrderByInputmimeType_DESC,
  _$gAssetOrderByInputsize_ASC,
  _$gAssetOrderByInputsize_DESC,
  _$gAssetOrderByInputwidth_ASC,
  _$gAssetOrderByInputwidth_DESC,
  _$gAssetOrderByInputheight_ASC,
  _$gAssetOrderByInputheight_DESC,
  _$gAssetOrderByInputfileName_ASC,
  _$gAssetOrderByInputfileName_DESC,
  _$gAssetOrderByInputhandle_ASC,
  _$gAssetOrderByInputhandle_DESC,
  _$gAssetOrderByInputpublishedAt_ASC,
  _$gAssetOrderByInputpublishedAt_DESC,
  _$gAssetOrderByInputupdatedAt_ASC,
  _$gAssetOrderByInputupdatedAt_DESC,
  _$gAssetOrderByInputcreatedAt_ASC,
  _$gAssetOrderByInputcreatedAt_DESC,
  _$gAssetOrderByInputid_ASC,
  _$gAssetOrderByInputid_DESC,
]);

const GAssetUploadStatus _$gAssetUploadStatusASSET_CREATE_PENDING =
    const GAssetUploadStatus._('ASSET_CREATE_PENDING');
const GAssetUploadStatus _$gAssetUploadStatusASSET_UPLOAD_COMPLETE =
    const GAssetUploadStatus._('ASSET_UPLOAD_COMPLETE');
const GAssetUploadStatus _$gAssetUploadStatusASSET_UPDATE_PENDING =
    const GAssetUploadStatus._('ASSET_UPDATE_PENDING');
const GAssetUploadStatus _$gAssetUploadStatusASSET_ERROR_UPLOAD =
    const GAssetUploadStatus._('ASSET_ERROR_UPLOAD');

GAssetUploadStatus _$gAssetUploadStatusValueOf(String name) {
  switch (name) {
    case 'ASSET_CREATE_PENDING':
      return _$gAssetUploadStatusASSET_CREATE_PENDING;
    case 'ASSET_UPLOAD_COMPLETE':
      return _$gAssetUploadStatusASSET_UPLOAD_COMPLETE;
    case 'ASSET_UPDATE_PENDING':
      return _$gAssetUploadStatusASSET_UPDATE_PENDING;
    case 'ASSET_ERROR_UPLOAD':
      return _$gAssetUploadStatusASSET_ERROR_UPLOAD;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GAssetUploadStatus> _$gAssetUploadStatusValues =
    new BuiltSet<GAssetUploadStatus>(const <GAssetUploadStatus>[
  _$gAssetUploadStatusASSET_CREATE_PENDING,
  _$gAssetUploadStatusASSET_UPLOAD_COMPLETE,
  _$gAssetUploadStatusASSET_UPDATE_PENDING,
  _$gAssetUploadStatusASSET_ERROR_UPLOAD,
]);

const GCategoryOrderByInput _$gCategoryOrderByInputpublishedAt_ASC =
    const GCategoryOrderByInput._('publishedAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputpublishedAt_DESC =
    const GCategoryOrderByInput._('publishedAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputupdatedAt_ASC =
    const GCategoryOrderByInput._('updatedAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputupdatedAt_DESC =
    const GCategoryOrderByInput._('updatedAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputcreatedAt_ASC =
    const GCategoryOrderByInput._('createdAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputcreatedAt_DESC =
    const GCategoryOrderByInput._('createdAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputid_ASC =
    const GCategoryOrderByInput._('id_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputid_DESC =
    const GCategoryOrderByInput._('id_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputtitle_ASC =
    const GCategoryOrderByInput._('title_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputtitle_DESC =
    const GCategoryOrderByInput._('title_DESC');

GCategoryOrderByInput _$gCategoryOrderByInputValueOf(String name) {
  switch (name) {
    case 'publishedAt_ASC':
      return _$gCategoryOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gCategoryOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gCategoryOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gCategoryOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gCategoryOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gCategoryOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gCategoryOrderByInputid_ASC;
    case 'id_DESC':
      return _$gCategoryOrderByInputid_DESC;
    case 'title_ASC':
      return _$gCategoryOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gCategoryOrderByInputtitle_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GCategoryOrderByInput> _$gCategoryOrderByInputValues =
    new BuiltSet<GCategoryOrderByInput>(const <GCategoryOrderByInput>[
  _$gCategoryOrderByInputpublishedAt_ASC,
  _$gCategoryOrderByInputpublishedAt_DESC,
  _$gCategoryOrderByInputupdatedAt_ASC,
  _$gCategoryOrderByInputupdatedAt_DESC,
  _$gCategoryOrderByInputcreatedAt_ASC,
  _$gCategoryOrderByInputcreatedAt_DESC,
  _$gCategoryOrderByInputid_ASC,
  _$gCategoryOrderByInputid_DESC,
  _$gCategoryOrderByInputtitle_ASC,
  _$gCategoryOrderByInputtitle_DESC,
]);

const GDocumentFileTypes _$gDocumentFileTypesjpg =
    const GDocumentFileTypes._('jpg');
const GDocumentFileTypes _$gDocumentFileTypespng =
    const GDocumentFileTypes._('png');
const GDocumentFileTypes _$gDocumentFileTypessvg =
    const GDocumentFileTypes._('svg');
const GDocumentFileTypes _$gDocumentFileTypeswebp =
    const GDocumentFileTypes._('webp');
const GDocumentFileTypes _$gDocumentFileTypesbmp =
    const GDocumentFileTypes._('bmp');
const GDocumentFileTypes _$gDocumentFileTypesgif =
    const GDocumentFileTypes._('gif');
const GDocumentFileTypes _$gDocumentFileTypestiff =
    const GDocumentFileTypes._('tiff');
const GDocumentFileTypes _$gDocumentFileTypesavif =
    const GDocumentFileTypes._('avif');
const GDocumentFileTypes _$gDocumentFileTypesheic =
    const GDocumentFileTypes._('heic');
const GDocumentFileTypes _$gDocumentFileTypesautoImage =
    const GDocumentFileTypes._('autoImage');

GDocumentFileTypes _$gDocumentFileTypesValueOf(String name) {
  switch (name) {
    case 'jpg':
      return _$gDocumentFileTypesjpg;
    case 'png':
      return _$gDocumentFileTypespng;
    case 'svg':
      return _$gDocumentFileTypessvg;
    case 'webp':
      return _$gDocumentFileTypeswebp;
    case 'bmp':
      return _$gDocumentFileTypesbmp;
    case 'gif':
      return _$gDocumentFileTypesgif;
    case 'tiff':
      return _$gDocumentFileTypestiff;
    case 'avif':
      return _$gDocumentFileTypesavif;
    case 'heic':
      return _$gDocumentFileTypesheic;
    case 'autoImage':
      return _$gDocumentFileTypesautoImage;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GDocumentFileTypes> _$gDocumentFileTypesValues =
    new BuiltSet<GDocumentFileTypes>(const <GDocumentFileTypes>[
  _$gDocumentFileTypesjpg,
  _$gDocumentFileTypespng,
  _$gDocumentFileTypessvg,
  _$gDocumentFileTypeswebp,
  _$gDocumentFileTypesbmp,
  _$gDocumentFileTypesgif,
  _$gDocumentFileTypestiff,
  _$gDocumentFileTypesavif,
  _$gDocumentFileTypesheic,
  _$gDocumentFileTypesautoImage,
]);

const GEntityTypeName _$gEntityTypeNameUser = const GEntityTypeName._('User');
const GEntityTypeName _$gEntityTypeNameAsset = const GEntityTypeName._('Asset');
const GEntityTypeName _$gEntityTypeNameScheduledOperation =
    const GEntityTypeName._('ScheduledOperation');
const GEntityTypeName _$gEntityTypeNameScheduledRelease =
    const GEntityTypeName._('ScheduledRelease');
const GEntityTypeName _$gEntityTypeNameArticle =
    const GEntityTypeName._('Article');
const GEntityTypeName _$gEntityTypeNameCategory =
    const GEntityTypeName._('Category');

GEntityTypeName _$gEntityTypeNameValueOf(String name) {
  switch (name) {
    case 'User':
      return _$gEntityTypeNameUser;
    case 'Asset':
      return _$gEntityTypeNameAsset;
    case 'ScheduledOperation':
      return _$gEntityTypeNameScheduledOperation;
    case 'ScheduledRelease':
      return _$gEntityTypeNameScheduledRelease;
    case 'Article':
      return _$gEntityTypeNameArticle;
    case 'Category':
      return _$gEntityTypeNameCategory;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GEntityTypeName> _$gEntityTypeNameValues =
    new BuiltSet<GEntityTypeName>(const <GEntityTypeName>[
  _$gEntityTypeNameUser,
  _$gEntityTypeNameAsset,
  _$gEntityTypeNameScheduledOperation,
  _$gEntityTypeNameScheduledRelease,
  _$gEntityTypeNameArticle,
  _$gEntityTypeNameCategory,
]);

const GImageFit _$gImageFitclip = const GImageFit._('clip');
const GImageFit _$gImageFitcrop = const GImageFit._('crop');
const GImageFit _$gImageFitscale = const GImageFit._('scale');
const GImageFit _$gImageFitmax = const GImageFit._('max');

GImageFit _$gImageFitValueOf(String name) {
  switch (name) {
    case 'clip':
      return _$gImageFitclip;
    case 'crop':
      return _$gImageFitcrop;
    case 'scale':
      return _$gImageFitscale;
    case 'max':
      return _$gImageFitmax;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GImageFit> _$gImageFitValues =
    new BuiltSet<GImageFit>(const <GImageFit>[
  _$gImageFitclip,
  _$gImageFitcrop,
  _$gImageFitscale,
  _$gImageFitmax,
]);

const GLocale _$gLocaleen = const GLocale._('en');

GLocale _$gLocaleValueOf(String name) {
  switch (name) {
    case 'en':
      return _$gLocaleen;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GLocale> _$gLocaleValues = new BuiltSet<GLocale>(const <GLocale>[
  _$gLocaleen,
]);

const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputerrorMessage_ASC =
    const GScheduledOperationOrderByInput._('errorMessage_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputerrorMessage_DESC =
    const GScheduledOperationOrderByInput._('errorMessage_DESC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputdescription_ASC =
    const GScheduledOperationOrderByInput._('description_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputdescription_DESC =
    const GScheduledOperationOrderByInput._('description_DESC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputpublishedAt_ASC =
    const GScheduledOperationOrderByInput._('publishedAt_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputpublishedAt_DESC =
    const GScheduledOperationOrderByInput._('publishedAt_DESC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputupdatedAt_ASC =
    const GScheduledOperationOrderByInput._('updatedAt_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputupdatedAt_DESC =
    const GScheduledOperationOrderByInput._('updatedAt_DESC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputcreatedAt_ASC =
    const GScheduledOperationOrderByInput._('createdAt_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputcreatedAt_DESC =
    const GScheduledOperationOrderByInput._('createdAt_DESC');
const GScheduledOperationOrderByInput _$gScheduledOperationOrderByInputid_ASC =
    const GScheduledOperationOrderByInput._('id_ASC');
const GScheduledOperationOrderByInput _$gScheduledOperationOrderByInputid_DESC =
    const GScheduledOperationOrderByInput._('id_DESC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputstatus_ASC =
    const GScheduledOperationOrderByInput._('status_ASC');
const GScheduledOperationOrderByInput
    _$gScheduledOperationOrderByInputstatus_DESC =
    const GScheduledOperationOrderByInput._('status_DESC');

GScheduledOperationOrderByInput _$gScheduledOperationOrderByInputValueOf(
    String name) {
  switch (name) {
    case 'errorMessage_ASC':
      return _$gScheduledOperationOrderByInputerrorMessage_ASC;
    case 'errorMessage_DESC':
      return _$gScheduledOperationOrderByInputerrorMessage_DESC;
    case 'description_ASC':
      return _$gScheduledOperationOrderByInputdescription_ASC;
    case 'description_DESC':
      return _$gScheduledOperationOrderByInputdescription_DESC;
    case 'publishedAt_ASC':
      return _$gScheduledOperationOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gScheduledOperationOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gScheduledOperationOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gScheduledOperationOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gScheduledOperationOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gScheduledOperationOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gScheduledOperationOrderByInputid_ASC;
    case 'id_DESC':
      return _$gScheduledOperationOrderByInputid_DESC;
    case 'status_ASC':
      return _$gScheduledOperationOrderByInputstatus_ASC;
    case 'status_DESC':
      return _$gScheduledOperationOrderByInputstatus_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GScheduledOperationOrderByInput>
    _$gScheduledOperationOrderByInputValues = new BuiltSet<
        GScheduledOperationOrderByInput>(const <GScheduledOperationOrderByInput>[
  _$gScheduledOperationOrderByInputerrorMessage_ASC,
  _$gScheduledOperationOrderByInputerrorMessage_DESC,
  _$gScheduledOperationOrderByInputdescription_ASC,
  _$gScheduledOperationOrderByInputdescription_DESC,
  _$gScheduledOperationOrderByInputpublishedAt_ASC,
  _$gScheduledOperationOrderByInputpublishedAt_DESC,
  _$gScheduledOperationOrderByInputupdatedAt_ASC,
  _$gScheduledOperationOrderByInputupdatedAt_DESC,
  _$gScheduledOperationOrderByInputcreatedAt_ASC,
  _$gScheduledOperationOrderByInputcreatedAt_DESC,
  _$gScheduledOperationOrderByInputid_ASC,
  _$gScheduledOperationOrderByInputid_DESC,
  _$gScheduledOperationOrderByInputstatus_ASC,
  _$gScheduledOperationOrderByInputstatus_DESC,
]);

const GScheduledOperationStatus _$gScheduledOperationStatusPENDING =
    const GScheduledOperationStatus._('PENDING');
const GScheduledOperationStatus _$gScheduledOperationStatusIN_PROGRESS =
    const GScheduledOperationStatus._('IN_PROGRESS');
const GScheduledOperationStatus _$gScheduledOperationStatusCOMPLETED =
    const GScheduledOperationStatus._('COMPLETED');
const GScheduledOperationStatus _$gScheduledOperationStatusFAILED =
    const GScheduledOperationStatus._('FAILED');
const GScheduledOperationStatus _$gScheduledOperationStatusCANCELED =
    const GScheduledOperationStatus._('CANCELED');

GScheduledOperationStatus _$gScheduledOperationStatusValueOf(String name) {
  switch (name) {
    case 'PENDING':
      return _$gScheduledOperationStatusPENDING;
    case 'IN_PROGRESS':
      return _$gScheduledOperationStatusIN_PROGRESS;
    case 'COMPLETED':
      return _$gScheduledOperationStatusCOMPLETED;
    case 'FAILED':
      return _$gScheduledOperationStatusFAILED;
    case 'CANCELED':
      return _$gScheduledOperationStatusCANCELED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GScheduledOperationStatus> _$gScheduledOperationStatusValues =
    new BuiltSet<GScheduledOperationStatus>(const <GScheduledOperationStatus>[
  _$gScheduledOperationStatusPENDING,
  _$gScheduledOperationStatusIN_PROGRESS,
  _$gScheduledOperationStatusCOMPLETED,
  _$gScheduledOperationStatusFAILED,
  _$gScheduledOperationStatusCANCELED,
]);

const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputreleaseAt_ASC =
    const GScheduledReleaseOrderByInput._('releaseAt_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputreleaseAt_DESC =
    const GScheduledReleaseOrderByInput._('releaseAt_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputisImplicit_ASC =
    const GScheduledReleaseOrderByInput._('isImplicit_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputisImplicit_DESC =
    const GScheduledReleaseOrderByInput._('isImplicit_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputisActive_ASC =
    const GScheduledReleaseOrderByInput._('isActive_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputisActive_DESC =
    const GScheduledReleaseOrderByInput._('isActive_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputerrorMessage_ASC =
    const GScheduledReleaseOrderByInput._('errorMessage_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputerrorMessage_DESC =
    const GScheduledReleaseOrderByInput._('errorMessage_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputdescription_ASC =
    const GScheduledReleaseOrderByInput._('description_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputdescription_DESC =
    const GScheduledReleaseOrderByInput._('description_DESC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputtitle_ASC =
    const GScheduledReleaseOrderByInput._('title_ASC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputtitle_DESC =
    const GScheduledReleaseOrderByInput._('title_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputpublishedAt_ASC =
    const GScheduledReleaseOrderByInput._('publishedAt_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputpublishedAt_DESC =
    const GScheduledReleaseOrderByInput._('publishedAt_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputupdatedAt_ASC =
    const GScheduledReleaseOrderByInput._('updatedAt_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputupdatedAt_DESC =
    const GScheduledReleaseOrderByInput._('updatedAt_DESC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputcreatedAt_ASC =
    const GScheduledReleaseOrderByInput._('createdAt_ASC');
const GScheduledReleaseOrderByInput
    _$gScheduledReleaseOrderByInputcreatedAt_DESC =
    const GScheduledReleaseOrderByInput._('createdAt_DESC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputid_ASC =
    const GScheduledReleaseOrderByInput._('id_ASC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputid_DESC =
    const GScheduledReleaseOrderByInput._('id_DESC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputstatus_ASC =
    const GScheduledReleaseOrderByInput._('status_ASC');
const GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputstatus_DESC =
    const GScheduledReleaseOrderByInput._('status_DESC');

GScheduledReleaseOrderByInput _$gScheduledReleaseOrderByInputValueOf(
    String name) {
  switch (name) {
    case 'releaseAt_ASC':
      return _$gScheduledReleaseOrderByInputreleaseAt_ASC;
    case 'releaseAt_DESC':
      return _$gScheduledReleaseOrderByInputreleaseAt_DESC;
    case 'isImplicit_ASC':
      return _$gScheduledReleaseOrderByInputisImplicit_ASC;
    case 'isImplicit_DESC':
      return _$gScheduledReleaseOrderByInputisImplicit_DESC;
    case 'isActive_ASC':
      return _$gScheduledReleaseOrderByInputisActive_ASC;
    case 'isActive_DESC':
      return _$gScheduledReleaseOrderByInputisActive_DESC;
    case 'errorMessage_ASC':
      return _$gScheduledReleaseOrderByInputerrorMessage_ASC;
    case 'errorMessage_DESC':
      return _$gScheduledReleaseOrderByInputerrorMessage_DESC;
    case 'description_ASC':
      return _$gScheduledReleaseOrderByInputdescription_ASC;
    case 'description_DESC':
      return _$gScheduledReleaseOrderByInputdescription_DESC;
    case 'title_ASC':
      return _$gScheduledReleaseOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gScheduledReleaseOrderByInputtitle_DESC;
    case 'publishedAt_ASC':
      return _$gScheduledReleaseOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gScheduledReleaseOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gScheduledReleaseOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gScheduledReleaseOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gScheduledReleaseOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gScheduledReleaseOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gScheduledReleaseOrderByInputid_ASC;
    case 'id_DESC':
      return _$gScheduledReleaseOrderByInputid_DESC;
    case 'status_ASC':
      return _$gScheduledReleaseOrderByInputstatus_ASC;
    case 'status_DESC':
      return _$gScheduledReleaseOrderByInputstatus_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GScheduledReleaseOrderByInput>
    _$gScheduledReleaseOrderByInputValues = new BuiltSet<
        GScheduledReleaseOrderByInput>(const <GScheduledReleaseOrderByInput>[
  _$gScheduledReleaseOrderByInputreleaseAt_ASC,
  _$gScheduledReleaseOrderByInputreleaseAt_DESC,
  _$gScheduledReleaseOrderByInputisImplicit_ASC,
  _$gScheduledReleaseOrderByInputisImplicit_DESC,
  _$gScheduledReleaseOrderByInputisActive_ASC,
  _$gScheduledReleaseOrderByInputisActive_DESC,
  _$gScheduledReleaseOrderByInputerrorMessage_ASC,
  _$gScheduledReleaseOrderByInputerrorMessage_DESC,
  _$gScheduledReleaseOrderByInputdescription_ASC,
  _$gScheduledReleaseOrderByInputdescription_DESC,
  _$gScheduledReleaseOrderByInputtitle_ASC,
  _$gScheduledReleaseOrderByInputtitle_DESC,
  _$gScheduledReleaseOrderByInputpublishedAt_ASC,
  _$gScheduledReleaseOrderByInputpublishedAt_DESC,
  _$gScheduledReleaseOrderByInputupdatedAt_ASC,
  _$gScheduledReleaseOrderByInputupdatedAt_DESC,
  _$gScheduledReleaseOrderByInputcreatedAt_ASC,
  _$gScheduledReleaseOrderByInputcreatedAt_DESC,
  _$gScheduledReleaseOrderByInputid_ASC,
  _$gScheduledReleaseOrderByInputid_DESC,
  _$gScheduledReleaseOrderByInputstatus_ASC,
  _$gScheduledReleaseOrderByInputstatus_DESC,
]);

const GScheduledReleaseStatus _$gScheduledReleaseStatusPENDING =
    const GScheduledReleaseStatus._('PENDING');
const GScheduledReleaseStatus _$gScheduledReleaseStatusIN_PROGRESS =
    const GScheduledReleaseStatus._('IN_PROGRESS');
const GScheduledReleaseStatus _$gScheduledReleaseStatusCOMPLETED =
    const GScheduledReleaseStatus._('COMPLETED');
const GScheduledReleaseStatus _$gScheduledReleaseStatusFAILED =
    const GScheduledReleaseStatus._('FAILED');

GScheduledReleaseStatus _$gScheduledReleaseStatusValueOf(String name) {
  switch (name) {
    case 'PENDING':
      return _$gScheduledReleaseStatusPENDING;
    case 'IN_PROGRESS':
      return _$gScheduledReleaseStatusIN_PROGRESS;
    case 'COMPLETED':
      return _$gScheduledReleaseStatusCOMPLETED;
    case 'FAILED':
      return _$gScheduledReleaseStatusFAILED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GScheduledReleaseStatus> _$gScheduledReleaseStatusValues =
    new BuiltSet<GScheduledReleaseStatus>(const <GScheduledReleaseStatus>[
  _$gScheduledReleaseStatusPENDING,
  _$gScheduledReleaseStatusIN_PROGRESS,
  _$gScheduledReleaseStatusCOMPLETED,
  _$gScheduledReleaseStatusFAILED,
]);

const GStage _$gStageDRAFT = const GStage._('DRAFT');
const GStage _$gStagePUBLISHED = const GStage._('PUBLISHED');

GStage _$gStageValueOf(String name) {
  switch (name) {
    case 'DRAFT':
      return _$gStageDRAFT;
    case 'PUBLISHED':
      return _$gStagePUBLISHED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GStage> _$gStageValues = new BuiltSet<GStage>(const <GStage>[
  _$gStageDRAFT,
  _$gStagePUBLISHED,
]);

const GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationBASE =
    const GSystemDateTimeFieldVariation._('BASE');
const GSystemDateTimeFieldVariation
    _$gSystemDateTimeFieldVariationLOCALIZATION =
    const GSystemDateTimeFieldVariation._('LOCALIZATION');
const GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationCOMBINED =
    const GSystemDateTimeFieldVariation._('COMBINED');

GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationValueOf(
    String name) {
  switch (name) {
    case 'BASE':
      return _$gSystemDateTimeFieldVariationBASE;
    case 'LOCALIZATION':
      return _$gSystemDateTimeFieldVariationLOCALIZATION;
    case 'COMBINED':
      return _$gSystemDateTimeFieldVariationCOMBINED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GSystemDateTimeFieldVariation>
    _$gSystemDateTimeFieldVariationValues = new BuiltSet<
        GSystemDateTimeFieldVariation>(const <GSystemDateTimeFieldVariation>[
  _$gSystemDateTimeFieldVariationBASE,
  _$gSystemDateTimeFieldVariationLOCALIZATION,
  _$gSystemDateTimeFieldVariationCOMBINED,
]);

const GUserKind _$gUserKindMEMBER = const GUserKind._('MEMBER');
const GUserKind _$gUserKindPAT = const GUserKind._('PAT');
const GUserKind _$gUserKindPUBLIC = const GUserKind._('PUBLIC');
const GUserKind _$gUserKindWEBHOOK = const GUserKind._('WEBHOOK');
const GUserKind _$gUserKindAPP_TOKEN = const GUserKind._('APP_TOKEN');

GUserKind _$gUserKindValueOf(String name) {
  switch (name) {
    case 'MEMBER':
      return _$gUserKindMEMBER;
    case 'PAT':
      return _$gUserKindPAT;
    case 'PUBLIC':
      return _$gUserKindPUBLIC;
    case 'WEBHOOK':
      return _$gUserKindWEBHOOK;
    case 'APP_TOKEN':
      return _$gUserKindAPP_TOKEN;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GUserKind> _$gUserKindValues =
    new BuiltSet<GUserKind>(const <GUserKind>[
  _$gUserKindMEMBER,
  _$gUserKindPAT,
  _$gUserKindPUBLIC,
  _$gUserKindWEBHOOK,
  _$gUserKindAPP_TOKEN,
]);

const GUserOrderByInput _$gUserOrderByInputisActive_ASC =
    const GUserOrderByInput._('isActive_ASC');
const GUserOrderByInput _$gUserOrderByInputisActive_DESC =
    const GUserOrderByInput._('isActive_DESC');
const GUserOrderByInput _$gUserOrderByInputpicture_ASC =
    const GUserOrderByInput._('picture_ASC');
const GUserOrderByInput _$gUserOrderByInputpicture_DESC =
    const GUserOrderByInput._('picture_DESC');
const GUserOrderByInput _$gUserOrderByInputname_ASC =
    const GUserOrderByInput._('name_ASC');
const GUserOrderByInput _$gUserOrderByInputname_DESC =
    const GUserOrderByInput._('name_DESC');
const GUserOrderByInput _$gUserOrderByInputpublishedAt_ASC =
    const GUserOrderByInput._('publishedAt_ASC');
const GUserOrderByInput _$gUserOrderByInputpublishedAt_DESC =
    const GUserOrderByInput._('publishedAt_DESC');
const GUserOrderByInput _$gUserOrderByInputupdatedAt_ASC =
    const GUserOrderByInput._('updatedAt_ASC');
const GUserOrderByInput _$gUserOrderByInputupdatedAt_DESC =
    const GUserOrderByInput._('updatedAt_DESC');
const GUserOrderByInput _$gUserOrderByInputcreatedAt_ASC =
    const GUserOrderByInput._('createdAt_ASC');
const GUserOrderByInput _$gUserOrderByInputcreatedAt_DESC =
    const GUserOrderByInput._('createdAt_DESC');
const GUserOrderByInput _$gUserOrderByInputid_ASC =
    const GUserOrderByInput._('id_ASC');
const GUserOrderByInput _$gUserOrderByInputid_DESC =
    const GUserOrderByInput._('id_DESC');
const GUserOrderByInput _$gUserOrderByInputkind_ASC =
    const GUserOrderByInput._('kind_ASC');
const GUserOrderByInput _$gUserOrderByInputkind_DESC =
    const GUserOrderByInput._('kind_DESC');

GUserOrderByInput _$gUserOrderByInputValueOf(String name) {
  switch (name) {
    case 'isActive_ASC':
      return _$gUserOrderByInputisActive_ASC;
    case 'isActive_DESC':
      return _$gUserOrderByInputisActive_DESC;
    case 'picture_ASC':
      return _$gUserOrderByInputpicture_ASC;
    case 'picture_DESC':
      return _$gUserOrderByInputpicture_DESC;
    case 'name_ASC':
      return _$gUserOrderByInputname_ASC;
    case 'name_DESC':
      return _$gUserOrderByInputname_DESC;
    case 'publishedAt_ASC':
      return _$gUserOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gUserOrderByInputpublishedAt_DESC;
    case 'updatedAt_ASC':
      return _$gUserOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gUserOrderByInputupdatedAt_DESC;
    case 'createdAt_ASC':
      return _$gUserOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gUserOrderByInputcreatedAt_DESC;
    case 'id_ASC':
      return _$gUserOrderByInputid_ASC;
    case 'id_DESC':
      return _$gUserOrderByInputid_DESC;
    case 'kind_ASC':
      return _$gUserOrderByInputkind_ASC;
    case 'kind_DESC':
      return _$gUserOrderByInputkind_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GUserOrderByInput> _$gUserOrderByInputValues =
    new BuiltSet<GUserOrderByInput>(const <GUserOrderByInput>[
  _$gUserOrderByInputisActive_ASC,
  _$gUserOrderByInputisActive_DESC,
  _$gUserOrderByInputpicture_ASC,
  _$gUserOrderByInputpicture_DESC,
  _$gUserOrderByInputname_ASC,
  _$gUserOrderByInputname_DESC,
  _$gUserOrderByInputpublishedAt_ASC,
  _$gUserOrderByInputpublishedAt_DESC,
  _$gUserOrderByInputupdatedAt_ASC,
  _$gUserOrderByInputupdatedAt_DESC,
  _$gUserOrderByInputcreatedAt_ASC,
  _$gUserOrderByInputcreatedAt_DESC,
  _$gUserOrderByInputid_ASC,
  _$gUserOrderByInputid_DESC,
  _$gUserOrderByInputkind_ASC,
  _$gUserOrderByInputkind_DESC,
]);

Serializer<G_FilterKind> _$gFilterKindSerializer =
    new _$G_FilterKindSerializer();
Serializer<G_MutationInputFieldKind> _$gMutationInputFieldKindSerializer =
    new _$G_MutationInputFieldKindSerializer();
Serializer<G_MutationKind> _$gMutationKindSerializer =
    new _$G_MutationKindSerializer();
Serializer<G_OrderDirection> _$gOrderDirectionSerializer =
    new _$G_OrderDirectionSerializer();
Serializer<G_RelationInputCardinality> _$gRelationInputCardinalitySerializer =
    new _$G_RelationInputCardinalitySerializer();
Serializer<G_RelationInputKind> _$gRelationInputKindSerializer =
    new _$G_RelationInputKindSerializer();
Serializer<G_RelationKind> _$gRelationKindSerializer =
    new _$G_RelationKindSerializer();
Serializer<Guntitled> _$guntitledSerializer = new _$GuntitledSerializer();
Serializer<GArticleConnectInput> _$gArticleConnectInputSerializer =
    new _$GArticleConnectInputSerializer();
Serializer<GArticleCreateInput> _$gArticleCreateInputSerializer =
    new _$GArticleCreateInputSerializer();
Serializer<GArticleCreateManyInlineInput>
    _$gArticleCreateManyInlineInputSerializer =
    new _$GArticleCreateManyInlineInputSerializer();
Serializer<GArticleCreateOneInlineInput>
    _$gArticleCreateOneInlineInputSerializer =
    new _$GArticleCreateOneInlineInputSerializer();
Serializer<GArticleManyWhereInput> _$gArticleManyWhereInputSerializer =
    new _$GArticleManyWhereInputSerializer();
Serializer<GArticleOrderByInput> _$gArticleOrderByInputSerializer =
    new _$GArticleOrderByInputSerializer();
Serializer<GArticleUpdateInput> _$gArticleUpdateInputSerializer =
    new _$GArticleUpdateInputSerializer();
Serializer<GArticleUpdateManyInlineInput>
    _$gArticleUpdateManyInlineInputSerializer =
    new _$GArticleUpdateManyInlineInputSerializer();
Serializer<GArticleUpdateManyInput> _$gArticleUpdateManyInputSerializer =
    new _$GArticleUpdateManyInputSerializer();
Serializer<GArticleUpdateManyWithNestedWhereInput>
    _$gArticleUpdateManyWithNestedWhereInputSerializer =
    new _$GArticleUpdateManyWithNestedWhereInputSerializer();
Serializer<GArticleUpdateOneInlineInput>
    _$gArticleUpdateOneInlineInputSerializer =
    new _$GArticleUpdateOneInlineInputSerializer();
Serializer<GArticleUpdateWithNestedWhereUniqueInput>
    _$gArticleUpdateWithNestedWhereUniqueInputSerializer =
    new _$GArticleUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GArticleUpsertInput> _$gArticleUpsertInputSerializer =
    new _$GArticleUpsertInputSerializer();
Serializer<GArticleUpsertWithNestedWhereUniqueInput>
    _$gArticleUpsertWithNestedWhereUniqueInputSerializer =
    new _$GArticleUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GArticleWhereComparatorInput>
    _$gArticleWhereComparatorInputSerializer =
    new _$GArticleWhereComparatorInputSerializer();
Serializer<GArticleWhereInput> _$gArticleWhereInputSerializer =
    new _$GArticleWhereInputSerializer();
Serializer<GArticleWhereStageInput> _$gArticleWhereStageInputSerializer =
    new _$GArticleWhereStageInputSerializer();
Serializer<GArticleWhereUniqueInput> _$gArticleWhereUniqueInputSerializer =
    new _$GArticleWhereUniqueInputSerializer();
Serializer<GAssetConnectInput> _$gAssetConnectInputSerializer =
    new _$GAssetConnectInputSerializer();
Serializer<GAssetCreateInput> _$gAssetCreateInputSerializer =
    new _$GAssetCreateInputSerializer();
Serializer<GAssetCreateLocalizationDataInput>
    _$gAssetCreateLocalizationDataInputSerializer =
    new _$GAssetCreateLocalizationDataInputSerializer();
Serializer<GAssetCreateLocalizationInput>
    _$gAssetCreateLocalizationInputSerializer =
    new _$GAssetCreateLocalizationInputSerializer();
Serializer<GAssetCreateLocalizationsInput>
    _$gAssetCreateLocalizationsInputSerializer =
    new _$GAssetCreateLocalizationsInputSerializer();
Serializer<GAssetCreateManyInlineInput>
    _$gAssetCreateManyInlineInputSerializer =
    new _$GAssetCreateManyInlineInputSerializer();
Serializer<GAssetCreateOneInlineInput> _$gAssetCreateOneInlineInputSerializer =
    new _$GAssetCreateOneInlineInputSerializer();
Serializer<GAssetManyWhereInput> _$gAssetManyWhereInputSerializer =
    new _$GAssetManyWhereInputSerializer();
Serializer<GAssetOrderByInput> _$gAssetOrderByInputSerializer =
    new _$GAssetOrderByInputSerializer();
Serializer<GAssetSingleRelationWhereInput>
    _$gAssetSingleRelationWhereInputSerializer =
    new _$GAssetSingleRelationWhereInputSerializer();
Serializer<GAssetTransformationInput> _$gAssetTransformationInputSerializer =
    new _$GAssetTransformationInputSerializer();
Serializer<GAssetUpdateInput> _$gAssetUpdateInputSerializer =
    new _$GAssetUpdateInputSerializer();
Serializer<GAssetUpdateLocalizationDataInput>
    _$gAssetUpdateLocalizationDataInputSerializer =
    new _$GAssetUpdateLocalizationDataInputSerializer();
Serializer<GAssetUpdateLocalizationInput>
    _$gAssetUpdateLocalizationInputSerializer =
    new _$GAssetUpdateLocalizationInputSerializer();
Serializer<GAssetUpdateLocalizationsInput>
    _$gAssetUpdateLocalizationsInputSerializer =
    new _$GAssetUpdateLocalizationsInputSerializer();
Serializer<GAssetUpdateManyInlineInput>
    _$gAssetUpdateManyInlineInputSerializer =
    new _$GAssetUpdateManyInlineInputSerializer();
Serializer<GAssetUpdateManyInput> _$gAssetUpdateManyInputSerializer =
    new _$GAssetUpdateManyInputSerializer();
Serializer<GAssetUpdateManyLocalizationDataInput>
    _$gAssetUpdateManyLocalizationDataInputSerializer =
    new _$GAssetUpdateManyLocalizationDataInputSerializer();
Serializer<GAssetUpdateManyLocalizationInput>
    _$gAssetUpdateManyLocalizationInputSerializer =
    new _$GAssetUpdateManyLocalizationInputSerializer();
Serializer<GAssetUpdateManyLocalizationsInput>
    _$gAssetUpdateManyLocalizationsInputSerializer =
    new _$GAssetUpdateManyLocalizationsInputSerializer();
Serializer<GAssetUpdateManyWithNestedWhereInput>
    _$gAssetUpdateManyWithNestedWhereInputSerializer =
    new _$GAssetUpdateManyWithNestedWhereInputSerializer();
Serializer<GAssetUpdateOneInlineInput> _$gAssetUpdateOneInlineInputSerializer =
    new _$GAssetUpdateOneInlineInputSerializer();
Serializer<GAssetUpdateWithNestedWhereUniqueInput>
    _$gAssetUpdateWithNestedWhereUniqueInputSerializer =
    new _$GAssetUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GAssetUploadStatus> _$gAssetUploadStatusSerializer =
    new _$GAssetUploadStatusSerializer();
Serializer<GAssetUploadWhereInput> _$gAssetUploadWhereInputSerializer =
    new _$GAssetUploadWhereInputSerializer();
Serializer<GAssetUploadWhereStageInput>
    _$gAssetUploadWhereStageInputSerializer =
    new _$GAssetUploadWhereStageInputSerializer();
Serializer<GAssetUpsertInput> _$gAssetUpsertInputSerializer =
    new _$GAssetUpsertInputSerializer();
Serializer<GAssetUpsertLocalizationInput>
    _$gAssetUpsertLocalizationInputSerializer =
    new _$GAssetUpsertLocalizationInputSerializer();
Serializer<GAssetUpsertWithNestedWhereUniqueInput>
    _$gAssetUpsertWithNestedWhereUniqueInputSerializer =
    new _$GAssetUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GAssetWhereComparatorInput> _$gAssetWhereComparatorInputSerializer =
    new _$GAssetWhereComparatorInputSerializer();
Serializer<GAssetWhereInput> _$gAssetWhereInputSerializer =
    new _$GAssetWhereInputSerializer();
Serializer<GAssetWhereStageInput> _$gAssetWhereStageInputSerializer =
    new _$GAssetWhereStageInputSerializer();
Serializer<GAssetWhereUniqueInput> _$gAssetWhereUniqueInputSerializer =
    new _$GAssetWhereUniqueInputSerializer();
Serializer<GCategoryArticlesConnectInput>
    _$gCategoryArticlesConnectInputSerializer =
    new _$GCategoryArticlesConnectInputSerializer();
Serializer<GCategoryArticlesCreateInput>
    _$gCategoryArticlesCreateInputSerializer =
    new _$GCategoryArticlesCreateInputSerializer();
Serializer<GCategoryArticlesCreateManyInlineInput>
    _$gCategoryArticlesCreateManyInlineInputSerializer =
    new _$GCategoryArticlesCreateManyInlineInputSerializer();
Serializer<GCategoryArticlesCreateOneInlineInput>
    _$gCategoryArticlesCreateOneInlineInputSerializer =
    new _$GCategoryArticlesCreateOneInlineInputSerializer();
Serializer<GCategoryArticlesUpdateInput>
    _$gCategoryArticlesUpdateInputSerializer =
    new _$GCategoryArticlesUpdateInputSerializer();
Serializer<GCategoryArticlesUpdateManyInlineInput>
    _$gCategoryArticlesUpdateManyInlineInputSerializer =
    new _$GCategoryArticlesUpdateManyInlineInputSerializer();
Serializer<GCategoryArticlesUpdateManyWithNestedWhereInput>
    _$gCategoryArticlesUpdateManyWithNestedWhereInputSerializer =
    new _$GCategoryArticlesUpdateManyWithNestedWhereInputSerializer();
Serializer<GCategoryArticlesUpdateOneInlineInput>
    _$gCategoryArticlesUpdateOneInlineInputSerializer =
    new _$GCategoryArticlesUpdateOneInlineInputSerializer();
Serializer<GCategoryArticlesUpdateWithNestedWhereUniqueInput>
    _$gCategoryArticlesUpdateWithNestedWhereUniqueInputSerializer =
    new _$GCategoryArticlesUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryArticlesUpsertWithNestedWhereUniqueInput>
    _$gCategoryArticlesUpsertWithNestedWhereUniqueInputSerializer =
    new _$GCategoryArticlesUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryArticlesWhereInput>
    _$gCategoryArticlesWhereInputSerializer =
    new _$GCategoryArticlesWhereInputSerializer();
Serializer<GCategoryArticlesWhereUniqueInput>
    _$gCategoryArticlesWhereUniqueInputSerializer =
    new _$GCategoryArticlesWhereUniqueInputSerializer();
Serializer<GCategoryConnectInput> _$gCategoryConnectInputSerializer =
    new _$GCategoryConnectInputSerializer();
Serializer<GCategoryCreateInput> _$gCategoryCreateInputSerializer =
    new _$GCategoryCreateInputSerializer();
Serializer<GCategoryCreateManyInlineInput>
    _$gCategoryCreateManyInlineInputSerializer =
    new _$GCategoryCreateManyInlineInputSerializer();
Serializer<GCategoryCreateOneInlineInput>
    _$gCategoryCreateOneInlineInputSerializer =
    new _$GCategoryCreateOneInlineInputSerializer();
Serializer<GCategoryManyWhereInput> _$gCategoryManyWhereInputSerializer =
    new _$GCategoryManyWhereInputSerializer();
Serializer<GCategoryOrderByInput> _$gCategoryOrderByInputSerializer =
    new _$GCategoryOrderByInputSerializer();
Serializer<GCategoryUpdateInput> _$gCategoryUpdateInputSerializer =
    new _$GCategoryUpdateInputSerializer();
Serializer<GCategoryUpdateManyInlineInput>
    _$gCategoryUpdateManyInlineInputSerializer =
    new _$GCategoryUpdateManyInlineInputSerializer();
Serializer<GCategoryUpdateManyInput> _$gCategoryUpdateManyInputSerializer =
    new _$GCategoryUpdateManyInputSerializer();
Serializer<GCategoryUpdateManyWithNestedWhereInput>
    _$gCategoryUpdateManyWithNestedWhereInputSerializer =
    new _$GCategoryUpdateManyWithNestedWhereInputSerializer();
Serializer<GCategoryUpdateOneInlineInput>
    _$gCategoryUpdateOneInlineInputSerializer =
    new _$GCategoryUpdateOneInlineInputSerializer();
Serializer<GCategoryUpdateWithNestedWhereUniqueInput>
    _$gCategoryUpdateWithNestedWhereUniqueInputSerializer =
    new _$GCategoryUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryUpsertInput> _$gCategoryUpsertInputSerializer =
    new _$GCategoryUpsertInputSerializer();
Serializer<GCategoryUpsertWithNestedWhereUniqueInput>
    _$gCategoryUpsertWithNestedWhereUniqueInputSerializer =
    new _$GCategoryUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryWhereComparatorInput>
    _$gCategoryWhereComparatorInputSerializer =
    new _$GCategoryWhereComparatorInputSerializer();
Serializer<GCategoryWhereInput> _$gCategoryWhereInputSerializer =
    new _$GCategoryWhereInputSerializer();
Serializer<GCategoryWhereStageInput> _$gCategoryWhereStageInputSerializer =
    new _$GCategoryWhereStageInputSerializer();
Serializer<GCategoryWhereUniqueInput> _$gCategoryWhereUniqueInputSerializer =
    new _$GCategoryWhereUniqueInputSerializer();
Serializer<GColorInput> _$gColorInputSerializer = new _$GColorInputSerializer();
Serializer<GConnectPositionInput> _$gConnectPositionInputSerializer =
    new _$GConnectPositionInputSerializer();
Serializer<GDocumentFileTypes> _$gDocumentFileTypesSerializer =
    new _$GDocumentFileTypesSerializer();
Serializer<GDocumentOutputInput> _$gDocumentOutputInputSerializer =
    new _$GDocumentOutputInputSerializer();
Serializer<GDocumentTransformationInput>
    _$gDocumentTransformationInputSerializer =
    new _$GDocumentTransformationInputSerializer();
Serializer<GEntityTypeName> _$gEntityTypeNameSerializer =
    new _$GEntityTypeNameSerializer();
Serializer<GEntityWhereInput> _$gEntityWhereInputSerializer =
    new _$GEntityWhereInputSerializer();
Serializer<GImageBlurInput> _$gImageBlurInputSerializer =
    new _$GImageBlurInputSerializer();
Serializer<GImageBorderInput> _$gImageBorderInputSerializer =
    new _$GImageBorderInputSerializer();
Serializer<GImageCompressInput> _$gImageCompressInputSerializer =
    new _$GImageCompressInputSerializer();
Serializer<GImageCropInput> _$gImageCropInputSerializer =
    new _$GImageCropInputSerializer();
Serializer<GImageFit> _$gImageFitSerializer = new _$GImageFitSerializer();
Serializer<GImageQualityInput> _$gImageQualityInputSerializer =
    new _$GImageQualityInputSerializer();
Serializer<GImageResizeInput> _$gImageResizeInputSerializer =
    new _$GImageResizeInputSerializer();
Serializer<GImageSharpenInput> _$gImageSharpenInputSerializer =
    new _$GImageSharpenInputSerializer();
Serializer<GImageTransformationInput> _$gImageTransformationInputSerializer =
    new _$GImageTransformationInputSerializer();
Serializer<GLocale> _$gLocaleSerializer = new _$GLocaleSerializer();
Serializer<GLocationInput> _$gLocationInputSerializer =
    new _$GLocationInputSerializer();
Serializer<GPublishLocaleInput> _$gPublishLocaleInputSerializer =
    new _$GPublishLocaleInputSerializer();
Serializer<GRGBAInput> _$gRGBAInputSerializer = new _$GRGBAInputSerializer();
Serializer<GScheduledOperationConnectInput>
    _$gScheduledOperationConnectInputSerializer =
    new _$GScheduledOperationConnectInputSerializer();
Serializer<GScheduledOperationCreateManyInlineInput>
    _$gScheduledOperationCreateManyInlineInputSerializer =
    new _$GScheduledOperationCreateManyInlineInputSerializer();
Serializer<GScheduledOperationCreateOneInlineInput>
    _$gScheduledOperationCreateOneInlineInputSerializer =
    new _$GScheduledOperationCreateOneInlineInputSerializer();
Serializer<GScheduledOperationManyWhereInput>
    _$gScheduledOperationManyWhereInputSerializer =
    new _$GScheduledOperationManyWhereInputSerializer();
Serializer<GScheduledOperationOrderByInput>
    _$gScheduledOperationOrderByInputSerializer =
    new _$GScheduledOperationOrderByInputSerializer();
Serializer<GScheduledOperationStatus> _$gScheduledOperationStatusSerializer =
    new _$GScheduledOperationStatusSerializer();
Serializer<GScheduledOperationUpdateManyInlineInput>
    _$gScheduledOperationUpdateManyInlineInputSerializer =
    new _$GScheduledOperationUpdateManyInlineInputSerializer();
Serializer<GScheduledOperationUpdateOneInlineInput>
    _$gScheduledOperationUpdateOneInlineInputSerializer =
    new _$GScheduledOperationUpdateOneInlineInputSerializer();
Serializer<GScheduledOperationWhereInput>
    _$gScheduledOperationWhereInputSerializer =
    new _$GScheduledOperationWhereInputSerializer();
Serializer<GScheduledOperationWhereUniqueInput>
    _$gScheduledOperationWhereUniqueInputSerializer =
    new _$GScheduledOperationWhereUniqueInputSerializer();
Serializer<GScheduledReleaseConnectInput>
    _$gScheduledReleaseConnectInputSerializer =
    new _$GScheduledReleaseConnectInputSerializer();
Serializer<GScheduledReleaseCreateInput>
    _$gScheduledReleaseCreateInputSerializer =
    new _$GScheduledReleaseCreateInputSerializer();
Serializer<GScheduledReleaseCreateManyInlineInput>
    _$gScheduledReleaseCreateManyInlineInputSerializer =
    new _$GScheduledReleaseCreateManyInlineInputSerializer();
Serializer<GScheduledReleaseCreateOneInlineInput>
    _$gScheduledReleaseCreateOneInlineInputSerializer =
    new _$GScheduledReleaseCreateOneInlineInputSerializer();
Serializer<GScheduledReleaseManyWhereInput>
    _$gScheduledReleaseManyWhereInputSerializer =
    new _$GScheduledReleaseManyWhereInputSerializer();
Serializer<GScheduledReleaseOrderByInput>
    _$gScheduledReleaseOrderByInputSerializer =
    new _$GScheduledReleaseOrderByInputSerializer();
Serializer<GScheduledReleaseStatus> _$gScheduledReleaseStatusSerializer =
    new _$GScheduledReleaseStatusSerializer();
Serializer<GScheduledReleaseUpdateInput>
    _$gScheduledReleaseUpdateInputSerializer =
    new _$GScheduledReleaseUpdateInputSerializer();
Serializer<GScheduledReleaseUpdateManyInlineInput>
    _$gScheduledReleaseUpdateManyInlineInputSerializer =
    new _$GScheduledReleaseUpdateManyInlineInputSerializer();
Serializer<GScheduledReleaseUpdateManyInput>
    _$gScheduledReleaseUpdateManyInputSerializer =
    new _$GScheduledReleaseUpdateManyInputSerializer();
Serializer<GScheduledReleaseUpdateManyWithNestedWhereInput>
    _$gScheduledReleaseUpdateManyWithNestedWhereInputSerializer =
    new _$GScheduledReleaseUpdateManyWithNestedWhereInputSerializer();
Serializer<GScheduledReleaseUpdateOneInlineInput>
    _$gScheduledReleaseUpdateOneInlineInputSerializer =
    new _$GScheduledReleaseUpdateOneInlineInputSerializer();
Serializer<GScheduledReleaseUpdateWithNestedWhereUniqueInput>
    _$gScheduledReleaseUpdateWithNestedWhereUniqueInputSerializer =
    new _$GScheduledReleaseUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GScheduledReleaseUpsertInput>
    _$gScheduledReleaseUpsertInputSerializer =
    new _$GScheduledReleaseUpsertInputSerializer();
Serializer<GScheduledReleaseUpsertWithNestedWhereUniqueInput>
    _$gScheduledReleaseUpsertWithNestedWhereUniqueInputSerializer =
    new _$GScheduledReleaseUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GScheduledReleaseWhereInput>
    _$gScheduledReleaseWhereInputSerializer =
    new _$GScheduledReleaseWhereInputSerializer();
Serializer<GScheduledReleaseWhereUniqueInput>
    _$gScheduledReleaseWhereUniqueInputSerializer =
    new _$GScheduledReleaseWhereUniqueInputSerializer();
Serializer<GStage> _$gStageSerializer = new _$GStageSerializer();
Serializer<GSystemDateTimeFieldVariation>
    _$gSystemDateTimeFieldVariationSerializer =
    new _$GSystemDateTimeFieldVariationSerializer();
Serializer<GUnpublishLocaleInput> _$gUnpublishLocaleInputSerializer =
    new _$GUnpublishLocaleInputSerializer();
Serializer<GUserConnectInput> _$gUserConnectInputSerializer =
    new _$GUserConnectInputSerializer();
Serializer<GUserCreateManyInlineInput> _$gUserCreateManyInlineInputSerializer =
    new _$GUserCreateManyInlineInputSerializer();
Serializer<GUserCreateOneInlineInput> _$gUserCreateOneInlineInputSerializer =
    new _$GUserCreateOneInlineInputSerializer();
Serializer<GUserKind> _$gUserKindSerializer = new _$GUserKindSerializer();
Serializer<GUserManyWhereInput> _$gUserManyWhereInputSerializer =
    new _$GUserManyWhereInputSerializer();
Serializer<GUserOrderByInput> _$gUserOrderByInputSerializer =
    new _$GUserOrderByInputSerializer();
Serializer<GUserUpdateManyInlineInput> _$gUserUpdateManyInlineInputSerializer =
    new _$GUserUpdateManyInlineInputSerializer();
Serializer<GUserUpdateOneInlineInput> _$gUserUpdateOneInlineInputSerializer =
    new _$GUserUpdateOneInlineInputSerializer();
Serializer<GUserWhereComparatorInput> _$gUserWhereComparatorInputSerializer =
    new _$GUserWhereComparatorInputSerializer();
Serializer<GUserWhereInput> _$gUserWhereInputSerializer =
    new _$GUserWhereInputSerializer();
Serializer<GUserWhereStageInput> _$gUserWhereStageInputSerializer =
    new _$GUserWhereStageInputSerializer();
Serializer<GUserWhereUniqueInput> _$gUserWhereUniqueInputSerializer =
    new _$GUserWhereUniqueInputSerializer();
Serializer<GVersionWhereInput> _$gVersionWhereInputSerializer =
    new _$GVersionWhereInputSerializer();

class _$G_FilterKindSerializer implements PrimitiveSerializer<G_FilterKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gin': 'in',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'in': 'Gin',
  };

  @override
  final Iterable<Type> types = const <Type>[G_FilterKind];
  @override
  final String wireName = 'G_FilterKind';

  @override
  Object serialize(Serializers serializers, G_FilterKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_FilterKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_FilterKind.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$G_MutationInputFieldKindSerializer
    implements PrimitiveSerializer<G_MutationInputFieldKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Genum': 'enum',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'enum': 'Genum',
  };

  @override
  final Iterable<Type> types = const <Type>[G_MutationInputFieldKind];
  @override
  final String wireName = 'G_MutationInputFieldKind';

  @override
  Object serialize(Serializers serializers, G_MutationInputFieldKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_MutationInputFieldKind deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_MutationInputFieldKind.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$G_MutationKindSerializer
    implements PrimitiveSerializer<G_MutationKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gupdate': 'update',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'update': 'Gupdate',
  };

  @override
  final Iterable<Type> types = const <Type>[G_MutationKind];
  @override
  final String wireName = 'G_MutationKind';

  @override
  Object serialize(Serializers serializers, G_MutationKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_MutationKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_MutationKind.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$G_OrderDirectionSerializer
    implements PrimitiveSerializer<G_OrderDirection> {
  @override
  final Iterable<Type> types = const <Type>[G_OrderDirection];
  @override
  final String wireName = 'G_OrderDirection';

  @override
  Object serialize(Serializers serializers, G_OrderDirection object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_OrderDirection deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_OrderDirection.valueOf(serialized as String);
}

class _$G_RelationInputCardinalitySerializer
    implements PrimitiveSerializer<G_RelationInputCardinality> {
  @override
  final Iterable<Type> types = const <Type>[G_RelationInputCardinality];
  @override
  final String wireName = 'G_RelationInputCardinality';

  @override
  Object serialize(Serializers serializers, G_RelationInputCardinality object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_RelationInputCardinality deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationInputCardinality.valueOf(serialized as String);
}

class _$G_RelationInputKindSerializer
    implements PrimitiveSerializer<G_RelationInputKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gupdate': 'update',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'update': 'Gupdate',
  };

  @override
  final Iterable<Type> types = const <Type>[G_RelationInputKind];
  @override
  final String wireName = 'G_RelationInputKind';

  @override
  Object serialize(Serializers serializers, G_RelationInputKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_RelationInputKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationInputKind.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$G_RelationKindSerializer
    implements PrimitiveSerializer<G_RelationKind> {
  @override
  final Iterable<Type> types = const <Type>[G_RelationKind];
  @override
  final String wireName = 'G_RelationKind';

  @override
  Object serialize(Serializers serializers, G_RelationKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_RelationKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationKind.valueOf(serialized as String);
}

class _$GuntitledSerializer implements PrimitiveSerializer<Guntitled> {
  @override
  final Iterable<Type> types = const <Type>[Guntitled];
  @override
  final String wireName = 'Guntitled';

  @override
  Object serialize(Serializers serializers, Guntitled object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Guntitled deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Guntitled.valueOf(serialized as String);
}

class _$GArticleConnectInputSerializer
    implements StructuredSerializer<GArticleConnectInput> {
  @override
  final Iterable<Type> types = const [
    GArticleConnectInput,
    _$GArticleConnectInput
  ];
  @override
  final String wireName = 'GArticleConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GArticleWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GArticleConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleCreateInputSerializer
    implements StructuredSerializer<GArticleCreateInput> {
  @override
  final Iterable<Type> types = const [
    GArticleCreateInput,
    _$GArticleCreateInput
  ];
  @override
  final String wireName = 'GArticleCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.body;
    if (value != null) {
      result
        ..add('body')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRichTextAST)));
    }
    value = object.published;
    if (value != null) {
      result
        ..add('published')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.markdown;
    if (value != null) {
      result
        ..add('markdown')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.headerImage;
    if (value != null) {
      result
        ..add('headerImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    value = object.categories;
    if (value != null) {
      result
        ..add('categories')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateManyInlineInput)));
    }
    return result;
  }

  @override
  GArticleCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'body':
          result.body.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRichTextAST))! as GRichTextAST);
          break;
        case 'published':
          result.published = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'markdown':
          result.markdown = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'headerImage':
          result.headerImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'categories':
          result.categories.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryCreateManyInlineInput))!
              as GCategoryCreateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleCreateManyInlineInputSerializer
    implements StructuredSerializer<GArticleCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GArticleCreateManyInlineInput,
    _$GArticleCreateManyInlineInput
  ];
  @override
  final String wireName = 'GArticleCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GArticleCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleCreateOneInlineInputSerializer
    implements StructuredSerializer<GArticleCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GArticleCreateOneInlineInput,
    _$GArticleCreateOneInlineInput
  ];
  @override
  final String wireName = 'GArticleCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereUniqueInput)));
    }
    return result;
  }

  @override
  GArticleCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleCreateInput))!
              as GArticleCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleManyWhereInputSerializer
    implements StructuredSerializer<GArticleManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GArticleManyWhereInput,
    _$GArticleManyWhereInput
  ];
  @override
  final String wireName = 'GArticleManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not;
    if (value != null) {
      result
        ..add('subtitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_in;
    if (value != null) {
      result
        ..add('subtitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.subtitle_not_in;
    if (value != null) {
      result
        ..add('subtitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.subtitle_contains;
    if (value != null) {
      result
        ..add('subtitle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_contains;
    if (value != null) {
      result
        ..add('subtitle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_starts_with;
    if (value != null) {
      result
        ..add('subtitle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_starts_with;
    if (value != null) {
      result
        ..add('subtitle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_ends_with;
    if (value != null) {
      result
        ..add('subtitle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_ends_with;
    if (value != null) {
      result
        ..add('subtitle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.published;
    if (value != null) {
      result
        ..add('published')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.published_not;
    if (value != null) {
      result
        ..add('published_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.markdown;
    if (value != null) {
      result
        ..add('markdown')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not;
    if (value != null) {
      result
        ..add('markdown_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_in;
    if (value != null) {
      result
        ..add('markdown_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.markdown_not_in;
    if (value != null) {
      result
        ..add('markdown_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.markdown_contains;
    if (value != null) {
      result
        ..add('markdown_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_contains;
    if (value != null) {
      result
        ..add('markdown_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_starts_with;
    if (value != null) {
      result
        ..add('markdown_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_starts_with;
    if (value != null) {
      result
        ..add('markdown_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_ends_with;
    if (value != null) {
      result
        ..add('markdown_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_ends_with;
    if (value != null) {
      result
        ..add('markdown_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.headerImage;
    if (value != null) {
      result
        ..add('headerImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.categories_every;
    if (value != null) {
      result
        ..add('categories_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_some;
    if (value != null) {
      result
        ..add('categories_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_none;
    if (value != null) {
      result
        ..add('categories_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GArticleManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not':
          result.subtitle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_in':
          result.subtitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'subtitle_not_in':
          result.subtitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'subtitle_contains':
          result.subtitle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_contains':
          result.subtitle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_starts_with':
          result.subtitle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_starts_with':
          result.subtitle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_ends_with':
          result.subtitle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_ends_with':
          result.subtitle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'published':
          result.published = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'published_not':
          result.published_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'markdown':
          result.markdown = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not':
          result.markdown_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_in':
          result.markdown_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'markdown_not_in':
          result.markdown_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'markdown_contains':
          result.markdown_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_contains':
          result.markdown_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_starts_with':
          result.markdown_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_starts_with':
          result.markdown_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_ends_with':
          result.markdown_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_ends_with':
          result.markdown_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'headerImage':
          result.headerImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'categories_every':
          result.categories_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_some':
          result.categories_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_none':
          result.categories_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleOrderByInputSerializer
    implements PrimitiveSerializer<GArticleOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GArticleOrderByInput];
  @override
  final String wireName = 'GArticleOrderByInput';

  @override
  Object serialize(Serializers serializers, GArticleOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GArticleOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GArticleOrderByInput.valueOf(serialized as String);
}

class _$GArticleUpdateInputSerializer
    implements StructuredSerializer<GArticleUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateInput,
    _$GArticleUpdateInput
  ];
  @override
  final String wireName = 'GArticleUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.body;
    if (value != null) {
      result
        ..add('body')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRichTextAST)));
    }
    value = object.published;
    if (value != null) {
      result
        ..add('published')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.markdown;
    if (value != null) {
      result
        ..add('markdown')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.headerImage;
    if (value != null) {
      result
        ..add('headerImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.categories;
    if (value != null) {
      result
        ..add('categories')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryUpdateManyInlineInput)));
    }
    return result;
  }

  @override
  GArticleUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'body':
          result.body.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRichTextAST))! as GRichTextAST);
          break;
        case 'published':
          result.published = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'markdown':
          result.markdown = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'headerImage':
          result.headerImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'categories':
          result.categories.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryUpdateManyInlineInput))!
              as GCategoryUpdateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpdateManyInlineInputSerializer
    implements StructuredSerializer<GArticleUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateManyInlineInput,
    _$GArticleUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GArticleUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GArticleUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GArticleUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GArticleUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleConnectInput)]))!
              as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpdateManyInputSerializer
    implements StructuredSerializer<GArticleUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateManyInput,
    _$GArticleUpdateManyInput
  ];
  @override
  final String wireName = 'GArticleUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.body;
    if (value != null) {
      result
        ..add('body')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRichTextAST)));
    }
    value = object.published;
    if (value != null) {
      result
        ..add('published')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.markdown;
    if (value != null) {
      result
        ..add('markdown')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GArticleUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'body':
          result.body.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRichTextAST))! as GRichTextAST);
          break;
        case 'published':
          result.published = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'markdown':
          result.markdown = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GArticleUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateManyWithNestedWhereInput,
    _$GArticleUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GArticleUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GArticleWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GArticleUpdateManyInput)),
    ];

    return result;
  }

  @override
  GArticleUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpdateManyInput))!
              as GArticleUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpdateOneInlineInputSerializer
    implements StructuredSerializer<GArticleUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateOneInlineInput,
    _$GArticleUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GArticleUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GArticleUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GArticleUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GArticleUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleCreateInput))!
              as GArticleCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GArticleUpdateWithNestedWhereUniqueInput))!
              as GArticleUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GArticleUpsertWithNestedWhereUniqueInput))!
              as GArticleUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GArticleUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpdateWithNestedWhereUniqueInput,
    _$GArticleUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GArticleUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GArticleWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GArticleUpdateInput)),
    ];

    return result;
  }

  @override
  GArticleUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpdateInput))!
              as GArticleUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpsertInputSerializer
    implements StructuredSerializer<GArticleUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpsertInput,
    _$GArticleUpsertInput
  ];
  @override
  final String wireName = 'GArticleUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GArticleCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GArticleUpdateInput)),
    ];

    return result;
  }

  @override
  GArticleUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleCreateInput))!
              as GArticleCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpdateInput))!
              as GArticleUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GArticleUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GArticleUpsertWithNestedWhereUniqueInput,
    _$GArticleUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GArticleUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GArticleWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GArticleUpsertInput)),
    ];

    return result;
  }

  @override
  GArticleUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpsertInput))!
              as GArticleUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleWhereComparatorInputSerializer
    implements StructuredSerializer<GArticleWhereComparatorInput> {
  @override
  final Iterable<Type> types = const [
    GArticleWhereComparatorInput,
    _$GArticleWhereComparatorInput
  ];
  @override
  final String wireName = 'GArticleWhereComparatorInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleWhereComparatorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.outdated_to;
    if (value != null) {
      result
        ..add('outdated_to')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GArticleWhereComparatorInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleWhereComparatorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'outdated_to':
          result.outdated_to = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleWhereInputSerializer
    implements StructuredSerializer<GArticleWhereInput> {
  @override
  final Iterable<Type> types = const [GArticleWhereInput, _$GArticleWhereInput];
  @override
  final String wireName = 'GArticleWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereStageInput)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not;
    if (value != null) {
      result
        ..add('subtitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_in;
    if (value != null) {
      result
        ..add('subtitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.subtitle_not_in;
    if (value != null) {
      result
        ..add('subtitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.subtitle_contains;
    if (value != null) {
      result
        ..add('subtitle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_contains;
    if (value != null) {
      result
        ..add('subtitle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_starts_with;
    if (value != null) {
      result
        ..add('subtitle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_starts_with;
    if (value != null) {
      result
        ..add('subtitle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_ends_with;
    if (value != null) {
      result
        ..add('subtitle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_ends_with;
    if (value != null) {
      result
        ..add('subtitle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.published;
    if (value != null) {
      result
        ..add('published')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.published_not;
    if (value != null) {
      result
        ..add('published_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.markdown;
    if (value != null) {
      result
        ..add('markdown')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not;
    if (value != null) {
      result
        ..add('markdown_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_in;
    if (value != null) {
      result
        ..add('markdown_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.markdown_not_in;
    if (value != null) {
      result
        ..add('markdown_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.markdown_contains;
    if (value != null) {
      result
        ..add('markdown_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_contains;
    if (value != null) {
      result
        ..add('markdown_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_starts_with;
    if (value != null) {
      result
        ..add('markdown_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_starts_with;
    if (value != null) {
      result
        ..add('markdown_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_ends_with;
    if (value != null) {
      result
        ..add('markdown_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.markdown_not_ends_with;
    if (value != null) {
      result
        ..add('markdown_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.headerImage;
    if (value != null) {
      result
        ..add('headerImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.categories_every;
    if (value != null) {
      result
        ..add('categories_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_some;
    if (value != null) {
      result
        ..add('categories_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_none;
    if (value != null) {
      result
        ..add('categories_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GArticleWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GArticleWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereStageInput))!
              as GArticleWhereStageInput);
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not':
          result.subtitle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_in':
          result.subtitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'subtitle_not_in':
          result.subtitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'subtitle_contains':
          result.subtitle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_contains':
          result.subtitle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_starts_with':
          result.subtitle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_starts_with':
          result.subtitle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_ends_with':
          result.subtitle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'subtitle_not_ends_with':
          result.subtitle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'published':
          result.published = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'published_not':
          result.published_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'markdown':
          result.markdown = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not':
          result.markdown_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_in':
          result.markdown_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'markdown_not_in':
          result.markdown_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'markdown_contains':
          result.markdown_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_contains':
          result.markdown_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_starts_with':
          result.markdown_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_starts_with':
          result.markdown_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_ends_with':
          result.markdown_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'markdown_not_ends_with':
          result.markdown_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'headerImage':
          result.headerImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'categories_every':
          result.categories_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_some':
          result.categories_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_none':
          result.categories_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleWhereStageInputSerializer
    implements StructuredSerializer<GArticleWhereStageInput> {
  @override
  final Iterable<Type> types = const [
    GArticleWhereStageInput,
    _$GArticleWhereStageInput
  ];
  @override
  final String wireName = 'GArticleWhereStageInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleWhereStageInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereStageInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereStageInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GArticleWhereStageInput)])));
    }
    value = object.stage;
    if (value != null) {
      result
        ..add('stage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStage)));
    }
    value = object.compareWithParent;
    if (value != null) {
      result
        ..add('compareWithParent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereComparatorInput)));
    }
    return result;
  }

  @override
  GArticleWhereStageInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleWhereStageInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GArticleWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage)) as GStage?;
          break;
        case 'compareWithParent':
          result.compareWithParent.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereComparatorInput))!
              as GArticleWhereComparatorInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleWhereUniqueInputSerializer
    implements StructuredSerializer<GArticleWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GArticleWhereUniqueInput,
    _$GArticleWhereUniqueInput
  ];
  @override
  final String wireName = 'GArticleWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GArticleWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GArticleWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GArticleWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetConnectInputSerializer
    implements StructuredSerializer<GAssetConnectInput> {
  @override
  final Iterable<Type> types = const [GAssetConnectInput, _$GAssetConnectInput];
  @override
  final String wireName = 'GAssetConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GAssetConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateInputSerializer
    implements StructuredSerializer<GAssetCreateInput> {
  @override
  final Iterable<Type> types = const [GAssetCreateInput, _$GAssetCreateInput];
  @override
  final String wireName = 'GAssetCreateInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.headerImageArticle;
    if (value != null) {
      result
        ..add('headerImageArticle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleCreateManyInlineInput)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'headerImageArticle':
          result.headerImageArticle.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleCreateManyInlineInput))!
              as GArticleCreateManyInlineInput);
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationsInput))!
              as GAssetCreateLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationDataInput,
    _$GAssetCreateLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetCreateLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationInput,
    _$GAssetCreateLocalizationInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetCreateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetCreateLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationDataInput))!
              as GAssetCreateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationsInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationsInput,
    _$GAssetCreateLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetCreateLocalizationInput)])));
    }
    return result;
  }

  @override
  GAssetCreateLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetCreateLocalizationInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateManyInlineInputSerializer
    implements StructuredSerializer<GAssetCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateManyInlineInput,
    _$GAssetCreateManyInlineInput
  ];
  @override
  final String wireName = 'GAssetCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GAssetCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateOneInlineInputSerializer
    implements StructuredSerializer<GAssetCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateOneInlineInput,
    _$GAssetCreateOneInlineInput
  ];
  @override
  final String wireName = 'GAssetCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereUniqueInput)));
    }
    return result;
  }

  @override
  GAssetCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetManyWhereInputSerializer
    implements StructuredSerializer<GAssetManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetManyWhereInput,
    _$GAssetManyWhereInput
  ];
  @override
  final String wireName = 'GAssetManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.headerImageArticle_every;
    if (value != null) {
      result
        ..add('headerImageArticle_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.headerImageArticle_some;
    if (value != null) {
      result
        ..add('headerImageArticle_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.headerImageArticle_none;
    if (value != null) {
      result
        ..add('headerImageArticle_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.upload;
    if (value != null) {
      result
        ..add('upload')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadWhereInput)));
    }
    return result;
  }

  @override
  GAssetManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'headerImageArticle_every':
          result.headerImageArticle_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'headerImageArticle_some':
          result.headerImageArticle_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'headerImageArticle_none':
          result.headerImageArticle_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'upload':
          result.upload.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadWhereInput))!
              as GAssetUploadWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetOrderByInputSerializer
    implements PrimitiveSerializer<GAssetOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GAssetOrderByInput];
  @override
  final String wireName = 'GAssetOrderByInput';

  @override
  Object serialize(Serializers serializers, GAssetOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GAssetOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GAssetOrderByInput.valueOf(serialized as String);
}

class _$GAssetSingleRelationWhereInputSerializer
    implements StructuredSerializer<GAssetSingleRelationWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetSingleRelationWhereInput,
    _$GAssetSingleRelationWhereInput
  ];
  @override
  final String wireName = 'GAssetSingleRelationWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetSingleRelationWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetSingleRelationWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetSingleRelationWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetSingleRelationWhereInput)])));
    }
    value = object.upload;
    if (value != null) {
      result
        ..add('upload')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadWhereInput)));
    }
    return result;
  }

  @override
  GAssetSingleRelationWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetSingleRelationWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetSingleRelationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetSingleRelationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetSingleRelationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upload':
          result.upload.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadWhereInput))!
              as GAssetUploadWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetTransformationInputSerializer
    implements StructuredSerializer<GAssetTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetTransformationInput,
    _$GAssetTransformationInput
  ];
  @override
  final String wireName = 'GAssetTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.image;
    if (value != null) {
      result
        ..add('image')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageTransformationInput)));
    }
    value = object.document;
    if (value != null) {
      result
        ..add('document')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentTransformationInput)));
    }
    value = object.validateOptions;
    if (value != null) {
      result
        ..add('validateOptions')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GAssetTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'image':
          result.image.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageTransformationInput))!
              as GImageTransformationInput);
          break;
        case 'document':
          result.document.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentTransformationInput))!
              as GDocumentTransformationInput);
          break;
        case 'validateOptions':
          result.validateOptions = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateInputSerializer
    implements StructuredSerializer<GAssetUpdateInput> {
  @override
  final Iterable<Type> types = const [GAssetUpdateInput, _$GAssetUpdateInput];
  @override
  final String wireName = 'GAssetUpdateInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.headerImageArticle;
    if (value != null) {
      result
        ..add('headerImageArticle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleUpdateManyInlineInput)));
    }
    value = object.reUpload;
    if (value != null) {
      result
        ..add('reUpload')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'headerImageArticle':
          result.headerImageArticle.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpdateManyInlineInput))!
              as GArticleUpdateManyInlineInput);
          break;
        case 'reUpload':
          result.reUpload = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationsInput))!
              as GAssetUpdateLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationDataInput,
    _$GAssetUpdateLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reUpload;
    if (value != null) {
      result
        ..add('reUpload')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetUpdateLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reUpload':
          result.reUpload = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationInput,
    _$GAssetUpdateLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpdateLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationDataInput))!
              as GAssetUpdateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationsInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationsInput,
    _$GAssetUpdateLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetCreateLocalizationInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpdateLocalizationInput)])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpsertLocalizationInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GLocale)])));
    }
    return result;
  }

  @override
  GAssetUpdateLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetCreateLocalizationInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateLocalizationInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpsertLocalizationInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GLocale)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyInlineInputSerializer
    implements StructuredSerializer<GAssetUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyInlineInput,
    _$GAssetUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GAssetUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GAssetUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GAssetUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetConnectInput)]))!
              as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyInputSerializer
    implements StructuredSerializer<GAssetUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyInput,
    _$GAssetUpdateManyInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reUpload;
    if (value != null) {
      result
        ..add('reUpload')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateManyLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reUpload':
          result.reUpload = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateManyLocalizationsInput))!
              as GAssetUpdateManyLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationDataInput,
    _$GAssetUpdateManyLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.reUpload;
    if (value != null) {
      result
        ..add('reUpload')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.uploadUrl;
    if (value != null) {
      result
        ..add('uploadUrl')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetUpdateManyLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'reUpload':
          result.reUpload = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'uploadUrl':
          result.uploadUrl = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationInput,
    _$GAssetUpdateManyLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateManyLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpdateManyLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateManyLocalizationDataInput))!
              as GAssetUpdateManyLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationsInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationsInput,
    _$GAssetUpdateManyLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpdateManyLocalizationInput)])));
    }
    return result;
  }

  @override
  GAssetUpdateManyLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateManyLocalizationInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GAssetUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyWithNestedWhereInput,
    _$GAssetUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateManyInput)),
    ];

    return result;
  }

  @override
  GAssetUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateManyInput))!
              as GAssetUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateOneInlineInputSerializer
    implements StructuredSerializer<GAssetUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateOneInlineInput,
    _$GAssetUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GAssetUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GAssetUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GAssetUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GAssetUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateWithNestedWhereUniqueInput))!
              as GAssetUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpsertWithNestedWhereUniqueInput))!
              as GAssetUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateWithNestedWhereUniqueInput,
    _$GAssetUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateInput)),
    ];

    return result;
  }

  @override
  GAssetUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateInput))!
              as GAssetUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUploadStatusSerializer
    implements PrimitiveSerializer<GAssetUploadStatus> {
  @override
  final Iterable<Type> types = const <Type>[GAssetUploadStatus];
  @override
  final String wireName = 'GAssetUploadStatus';

  @override
  Object serialize(Serializers serializers, GAssetUploadStatus object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GAssetUploadStatus deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GAssetUploadStatus.valueOf(serialized as String);
}

class _$GAssetUploadWhereInputSerializer
    implements StructuredSerializer<GAssetUploadWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUploadWhereInput,
    _$GAssetUploadWhereInput
  ];
  @override
  final String wireName = 'GAssetUploadWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUploadWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GAssetUploadStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GAssetUploadStatus)])));
    }
    value = object.expiresAt;
    if (value != null) {
      result
        ..add('expiresAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_not;
    if (value != null) {
      result
        ..add('expiresAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_in;
    if (value != null) {
      result
        ..add('expiresAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.expiresAt_not_in;
    if (value != null) {
      result
        ..add('expiresAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.expiresAt_lt;
    if (value != null) {
      result
        ..add('expiresAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_lte;
    if (value != null) {
      result
        ..add('expiresAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_gt;
    if (value != null) {
      result
        ..add('expiresAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_gte;
    if (value != null) {
      result
        ..add('expiresAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GAssetUploadWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUploadWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadStatus))
              as GAssetUploadStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadStatus))
              as GAssetUploadStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GAssetUploadStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GAssetUploadStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'expiresAt':
          result.expiresAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_not':
          result.expiresAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_in':
          result.expiresAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'expiresAt_not_in':
          result.expiresAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'expiresAt_lt':
          result.expiresAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_lte':
          result.expiresAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_gt':
          result.expiresAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_gte':
          result.expiresAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUploadWhereStageInputSerializer
    implements StructuredSerializer<GAssetUploadWhereStageInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUploadWhereStageInput,
    _$GAssetUploadWhereStageInput
  ];
  @override
  final String wireName = 'GAssetUploadWhereStageInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUploadWhereStageInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetUploadWhereInput)])));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GAssetUploadStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GAssetUploadStatus)])));
    }
    value = object.expiresAt;
    if (value != null) {
      result
        ..add('expiresAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_not;
    if (value != null) {
      result
        ..add('expiresAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_in;
    if (value != null) {
      result
        ..add('expiresAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.expiresAt_not_in;
    if (value != null) {
      result
        ..add('expiresAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.expiresAt_lt;
    if (value != null) {
      result
        ..add('expiresAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_lte;
    if (value != null) {
      result
        ..add('expiresAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_gt;
    if (value != null) {
      result
        ..add('expiresAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.expiresAt_gte;
    if (value != null) {
      result
        ..add('expiresAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GAssetUploadWhereStageInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUploadWhereStageInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUploadWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadStatus))
              as GAssetUploadStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadStatus))
              as GAssetUploadStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GAssetUploadStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GAssetUploadStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'expiresAt':
          result.expiresAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_not':
          result.expiresAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_in':
          result.expiresAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'expiresAt_not_in':
          result.expiresAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'expiresAt_lt':
          result.expiresAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_lte':
          result.expiresAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_gt':
          result.expiresAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'expiresAt_gte':
          result.expiresAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertInputSerializer
    implements StructuredSerializer<GAssetUpsertInput> {
  @override
  final Iterable<Type> types = const [GAssetUpsertInput, _$GAssetUpsertInput];
  @override
  final String wireName = 'GAssetUpsertInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GAssetCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GAssetUpdateInput)),
    ];

    return result;
  }

  @override
  GAssetUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateInput))!
              as GAssetUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpsertLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpsertLocalizationInput,
    _$GAssetUpsertLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpsertLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpsertLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GAssetUpdateLocalizationDataInput)),
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GAssetCreateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpsertLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationDataInput))!
              as GAssetUpdateLocalizationDataInput);
          break;
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationDataInput))!
              as GAssetCreateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpsertWithNestedWhereUniqueInput,
    _$GAssetUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpsertInput)),
    ];

    return result;
  }

  @override
  GAssetUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpsertInput))!
              as GAssetUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereComparatorInputSerializer
    implements StructuredSerializer<GAssetWhereComparatorInput> {
  @override
  final Iterable<Type> types = const [
    GAssetWhereComparatorInput,
    _$GAssetWhereComparatorInput
  ];
  @override
  final String wireName = 'GAssetWhereComparatorInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetWhereComparatorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.outdated_to;
    if (value != null) {
      result
        ..add('outdated_to')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GAssetWhereComparatorInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereComparatorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'outdated_to':
          result.outdated_to = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereInputSerializer
    implements StructuredSerializer<GAssetWhereInput> {
  @override
  final Iterable<Type> types = const [GAssetWhereInput, _$GAssetWhereInput];
  @override
  final String wireName = 'GAssetWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereStageInput)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not;
    if (value != null) {
      result
        ..add('mimeType_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_in;
    if (value != null) {
      result
        ..add('mimeType_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.mimeType_not_in;
    if (value != null) {
      result
        ..add('mimeType_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.mimeType_contains;
    if (value != null) {
      result
        ..add('mimeType_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_contains;
    if (value != null) {
      result
        ..add('mimeType_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_starts_with;
    if (value != null) {
      result
        ..add('mimeType_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_starts_with;
    if (value != null) {
      result
        ..add('mimeType_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_ends_with;
    if (value != null) {
      result
        ..add('mimeType_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_ends_with;
    if (value != null) {
      result
        ..add('mimeType_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_not;
    if (value != null) {
      result
        ..add('size_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_in;
    if (value != null) {
      result
        ..add('size_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.size_not_in;
    if (value != null) {
      result
        ..add('size_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.size_lt;
    if (value != null) {
      result
        ..add('size_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_lte;
    if (value != null) {
      result
        ..add('size_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_gt;
    if (value != null) {
      result
        ..add('size_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_gte;
    if (value != null) {
      result
        ..add('size_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_not;
    if (value != null) {
      result
        ..add('width_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_in;
    if (value != null) {
      result
        ..add('width_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.width_not_in;
    if (value != null) {
      result
        ..add('width_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.width_lt;
    if (value != null) {
      result
        ..add('width_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_lte;
    if (value != null) {
      result
        ..add('width_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_gt;
    if (value != null) {
      result
        ..add('width_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_gte;
    if (value != null) {
      result
        ..add('width_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_not;
    if (value != null) {
      result
        ..add('height_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_in;
    if (value != null) {
      result
        ..add('height_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.height_not_in;
    if (value != null) {
      result
        ..add('height_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(double)])));
    }
    value = object.height_lt;
    if (value != null) {
      result
        ..add('height_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_lte;
    if (value != null) {
      result
        ..add('height_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_gt;
    if (value != null) {
      result
        ..add('height_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_gte;
    if (value != null) {
      result
        ..add('height_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not;
    if (value != null) {
      result
        ..add('fileName_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_in;
    if (value != null) {
      result
        ..add('fileName_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.fileName_not_in;
    if (value != null) {
      result
        ..add('fileName_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.fileName_contains;
    if (value != null) {
      result
        ..add('fileName_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_contains;
    if (value != null) {
      result
        ..add('fileName_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_starts_with;
    if (value != null) {
      result
        ..add('fileName_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_starts_with;
    if (value != null) {
      result
        ..add('fileName_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_ends_with;
    if (value != null) {
      result
        ..add('fileName_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_ends_with;
    if (value != null) {
      result
        ..add('fileName_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle;
    if (value != null) {
      result
        ..add('handle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not;
    if (value != null) {
      result
        ..add('handle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_in;
    if (value != null) {
      result
        ..add('handle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.handle_not_in;
    if (value != null) {
      result
        ..add('handle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.handle_contains;
    if (value != null) {
      result
        ..add('handle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_contains;
    if (value != null) {
      result
        ..add('handle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_starts_with;
    if (value != null) {
      result
        ..add('handle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_starts_with;
    if (value != null) {
      result
        ..add('handle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_ends_with;
    if (value != null) {
      result
        ..add('handle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_ends_with;
    if (value != null) {
      result
        ..add('handle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.headerImageArticle_every;
    if (value != null) {
      result
        ..add('headerImageArticle_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.headerImageArticle_some;
    if (value != null) {
      result
        ..add('headerImageArticle_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.headerImageArticle_none;
    if (value != null) {
      result
        ..add('headerImageArticle_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.upload;
    if (value != null) {
      result
        ..add('upload')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUploadWhereInput)));
    }
    return result;
  }

  @override
  GAssetWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereStageInput))!
              as GAssetWhereStageInput);
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_not':
          result.mimeType_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_in':
          result.mimeType_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'mimeType_not_in':
          result.mimeType_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'mimeType_contains':
          result.mimeType_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_not_contains':
          result.mimeType_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_starts_with':
          result.mimeType_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_not_starts_with':
          result.mimeType_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_ends_with':
          result.mimeType_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'mimeType_not_ends_with':
          result.mimeType_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'size_not':
          result.size_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'size_in':
          result.size_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'size_not_in':
          result.size_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'size_lt':
          result.size_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'size_lte':
          result.size_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'size_gt':
          result.size_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'size_gte':
          result.size_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width_not':
          result.width_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width_in':
          result.width_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'width_not_in':
          result.width_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'width_lt':
          result.width_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width_lte':
          result.width_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width_gt':
          result.width_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'width_gte':
          result.width_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height_not':
          result.height_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height_in':
          result.height_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'height_not_in':
          result.height_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(double)]))!
              as BuiltList<Object?>);
          break;
        case 'height_lt':
          result.height_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height_lte':
          result.height_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height_gt':
          result.height_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'height_gte':
          result.height_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double?;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_not':
          result.fileName_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_in':
          result.fileName_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'fileName_not_in':
          result.fileName_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'fileName_contains':
          result.fileName_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_not_contains':
          result.fileName_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_starts_with':
          result.fileName_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_not_starts_with':
          result.fileName_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_ends_with':
          result.fileName_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fileName_not_ends_with':
          result.fileName_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_not':
          result.handle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_in':
          result.handle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'handle_not_in':
          result.handle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'handle_contains':
          result.handle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_not_contains':
          result.handle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_starts_with':
          result.handle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_not_starts_with':
          result.handle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_ends_with':
          result.handle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'handle_not_ends_with':
          result.handle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'headerImageArticle_every':
          result.headerImageArticle_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'headerImageArticle_some':
          result.headerImageArticle_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'headerImageArticle_none':
          result.headerImageArticle_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'upload':
          result.upload.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUploadWhereInput))!
              as GAssetUploadWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereStageInputSerializer
    implements StructuredSerializer<GAssetWhereStageInput> {
  @override
  final Iterable<Type> types = const [
    GAssetWhereStageInput,
    _$GAssetWhereStageInput
  ];
  @override
  final String wireName = 'GAssetWhereStageInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetWhereStageInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereStageInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereStageInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereStageInput)])));
    }
    value = object.stage;
    if (value != null) {
      result
        ..add('stage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStage)));
    }
    value = object.compareWithParent;
    if (value != null) {
      result
        ..add('compareWithParent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereComparatorInput)));
    }
    return result;
  }

  @override
  GAssetWhereStageInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereStageInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage)) as GStage?;
          break;
        case 'compareWithParent':
          result.compareWithParent.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereComparatorInput))!
              as GAssetWhereComparatorInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetWhereUniqueInput,
    _$GAssetWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesConnectInputSerializer
    implements StructuredSerializer<GCategoryArticlesConnectInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesConnectInput,
    _$GCategoryArticlesConnectInput
  ];
  @override
  final String wireName = 'GCategoryArticlesConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleConnectInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleConnectInput))!
              as GArticleConnectInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesCreateInputSerializer
    implements StructuredSerializer<GCategoryArticlesCreateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesCreateInput,
    _$GCategoryArticlesCreateInput
  ];
  @override
  final String wireName = 'GCategoryArticlesCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleCreateInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleCreateInput))!
              as GArticleCreateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesCreateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryArticlesCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesCreateManyInlineInput,
    _$GCategoryArticlesCreateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryArticlesCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryArticlesCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesCreateInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesCreateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryArticlesCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesCreateOneInlineInput,
    _$GCategoryArticlesCreateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryArticlesCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryArticlesCreateInput))!
              as GCategoryArticlesCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryArticlesWhereUniqueInput))!
              as GCategoryArticlesWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpdateInputSerializer
    implements StructuredSerializer<GCategoryArticlesUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpdateInput,
    _$GCategoryArticlesUpdateInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleUpdateInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleUpdateInput))!
              as GArticleUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpdateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryArticlesUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpdateManyInlineInput,
    _$GCategoryArticlesUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryArticlesUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryArticlesUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryArticlesWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryArticlesUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesCreateInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesConnectInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GCategoryArticlesUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GCategoryArticlesUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryArticlesWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpdateManyWithNestedWhereInputSerializer
    implements
        StructuredSerializer<GCategoryArticlesUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpdateManyWithNestedWhereInput,
    _$GCategoryArticlesUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryArticlesUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GArticleUpdateManyWithNestedWhereInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GArticleUpdateManyWithNestedWhereInput))!
              as GArticleUpdateManyWithNestedWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpdateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryArticlesUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpdateOneInlineInput,
    _$GCategoryArticlesUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GCategoryArticlesUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GCategoryArticlesUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCategoryArticlesUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryArticlesCreateInput))!
              as GCategoryArticlesCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryArticlesUpdateWithNestedWhereUniqueInput))!
              as GCategoryArticlesUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryArticlesUpsertWithNestedWhereUniqueInput))!
              as GCategoryArticlesUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryArticlesWhereUniqueInput))!
              as GCategoryArticlesWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpdateWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GCategoryArticlesUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpdateWithNestedWhereUniqueInput,
    _$GCategoryArticlesUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryArticlesUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GArticleUpdateWithNestedWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GArticleUpdateWithNestedWhereUniqueInput))!
              as GArticleUpdateWithNestedWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesUpsertWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GCategoryArticlesUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesUpsertWithNestedWhereUniqueInput,
    _$GCategoryArticlesUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryArticlesUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryArticlesUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GArticleUpsertWithNestedWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GArticleUpsertWithNestedWhereUniqueInput))!
              as GArticleUpsertWithNestedWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesWhereInputSerializer
    implements StructuredSerializer<GCategoryArticlesWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesWhereInput,
    _$GCategoryArticlesWhereInput
  ];
  @override
  final String wireName = 'GCategoryArticlesWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereInput))!
              as GArticleWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryArticlesWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryArticlesWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryArticlesWhereUniqueInput,
    _$GCategoryArticlesWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryArticlesWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryArticlesWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.Article;
    if (value != null) {
      result
        ..add('Article')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GArticleWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryArticlesWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryArticlesWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'Article':
          result.Article.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GArticleWhereUniqueInput))!
              as GArticleWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryConnectInputSerializer
    implements StructuredSerializer<GCategoryConnectInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryConnectInput,
    _$GCategoryConnectInput
  ];
  @override
  final String wireName = 'GCategoryConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GCategoryConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateInputSerializer
    implements StructuredSerializer<GCategoryCreateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateInput,
    _$GCategoryCreateInput
  ];
  @override
  final String wireName = 'GCategoryCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.articles;
    if (value != null) {
      result
        ..add('articles')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryArticlesCreateManyInlineInput)));
    }
    return result;
  }

  @override
  GCategoryCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'articles':
          result.articles.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryArticlesCreateManyInlineInput))!
              as GCategoryArticlesCreateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateManyInlineInput,
    _$GCategoryCreateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateOneInlineInput,
    _$GCategoryCreateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryManyWhereInputSerializer
    implements StructuredSerializer<GCategoryManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryManyWhereInput,
    _$GCategoryManyWhereInput
  ];
  @override
  final String wireName = 'GCategoryManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.articles_empty;
    if (value != null) {
      result
        ..add('articles_empty')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.articles_some;
    if (value != null) {
      result
        ..add('articles_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesWhereInput)));
    }
    return result;
  }

  @override
  GCategoryManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'articles_empty':
          result.articles_empty = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'articles_some':
          result.articles_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryArticlesWhereInput))!
              as GCategoryArticlesWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryOrderByInputSerializer
    implements PrimitiveSerializer<GCategoryOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GCategoryOrderByInput];
  @override
  final String wireName = 'GCategoryOrderByInput';

  @override
  Object serialize(Serializers serializers, GCategoryOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GCategoryOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GCategoryOrderByInput.valueOf(serialized as String);
}

class _$GCategoryUpdateInputSerializer
    implements StructuredSerializer<GCategoryUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateInput,
    _$GCategoryUpdateInput
  ];
  @override
  final String wireName = 'GCategoryUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.articles;
    if (value != null) {
      result
        ..add('articles')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryArticlesUpdateManyInlineInput)));
    }
    return result;
  }

  @override
  GCategoryUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'articles':
          result.articles.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryArticlesUpdateManyInlineInput))!
              as GCategoryArticlesUpdateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyInlineInput,
    _$GCategoryUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryCreateInput)]))!
              as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryConnectInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyInput,
    _$GCategoryUpdateManyInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GCategoryUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyWithNestedWhereInput,
    _$GCategoryUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpdateManyInput)),
    ];

    return result;
  }

  @override
  GCategoryUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateManyInput))!
              as GCategoryUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateOneInlineInput,
    _$GCategoryUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCategoryUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryUpdateWithNestedWhereUniqueInput))!
              as GCategoryUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryUpsertWithNestedWhereUniqueInput))!
              as GCategoryUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateWithNestedWhereUniqueInput,
    _$GCategoryUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GCategoryUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateInput))!
              as GCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpsertInputSerializer
    implements StructuredSerializer<GCategoryUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpsertInput,
    _$GCategoryUpsertInput
  ];
  @override
  final String wireName = 'GCategoryUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GCategoryCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GCategoryUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateInput))!
              as GCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpsertWithNestedWhereUniqueInput,
    _$GCategoryUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpsertInput)),
    ];

    return result;
  }

  @override
  GCategoryUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpsertInput))!
              as GCategoryUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereComparatorInputSerializer
    implements StructuredSerializer<GCategoryWhereComparatorInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereComparatorInput,
    _$GCategoryWhereComparatorInput
  ];
  @override
  final String wireName = 'GCategoryWhereComparatorInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereComparatorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.outdated_to;
    if (value != null) {
      result
        ..add('outdated_to')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCategoryWhereComparatorInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereComparatorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'outdated_to':
          result.outdated_to = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereInputSerializer
    implements StructuredSerializer<GCategoryWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereInput,
    _$GCategoryWhereInput
  ];
  @override
  final String wireName = 'GCategoryWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereStageInput)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.scheduledIn_every;
    if (value != null) {
      result
        ..add('scheduledIn_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_some;
    if (value != null) {
      result
        ..add('scheduledIn_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.scheduledIn_none;
    if (value != null) {
      result
        ..add('scheduledIn_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.articles_empty;
    if (value != null) {
      result
        ..add('articles_empty')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.articles_some;
    if (value != null) {
      result
        ..add('articles_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryArticlesWhereInput)));
    }
    return result;
  }

  @override
  GCategoryWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereStageInput))!
              as GCategoryWhereStageInput);
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'scheduledIn_every':
          result.scheduledIn_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_some':
          result.scheduledIn_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'scheduledIn_none':
          result.scheduledIn_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'articles_empty':
          result.articles_empty = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'articles_some':
          result.articles_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryArticlesWhereInput))!
              as GCategoryArticlesWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereStageInputSerializer
    implements StructuredSerializer<GCategoryWhereStageInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereStageInput,
    _$GCategoryWhereStageInput
  ];
  @override
  final String wireName = 'GCategoryWhereStageInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereStageInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereStageInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereStageInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereStageInput)])));
    }
    value = object.stage;
    if (value != null) {
      result
        ..add('stage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStage)));
    }
    value = object.compareWithParent;
    if (value != null) {
      result
        ..add('compareWithParent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereComparatorInput)));
    }
    return result;
  }

  @override
  GCategoryWhereStageInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereStageInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereStageInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage)) as GStage?;
          break;
        case 'compareWithParent':
          result.compareWithParent.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereComparatorInput))!
              as GCategoryWhereComparatorInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereUniqueInput,
    _$GCategoryWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GCategoryWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GColorInputSerializer implements StructuredSerializer<GColorInput> {
  @override
  final Iterable<Type> types = const [GColorInput, _$GColorInput];
  @override
  final String wireName = 'GColorInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GColorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.hex;
    if (value != null) {
      result
        ..add('hex')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(GHex)));
    }
    value = object.rgba;
    if (value != null) {
      result
        ..add('rgba')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRGBAInput)));
    }
    return result;
  }

  @override
  GColorInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GColorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'hex':
          result.hex.replace(serializers.deserialize(value,
              specifiedType: const FullType(GHex))! as GHex);
          break;
        case 'rgba':
          result.rgba.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRGBAInput))! as GRGBAInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GConnectPositionInputSerializer
    implements StructuredSerializer<GConnectPositionInput> {
  @override
  final Iterable<Type> types = const [
    GConnectPositionInput,
    _$GConnectPositionInput
  ];
  @override
  final String wireName = 'GConnectPositionInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GConnectPositionInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.after;
    if (value != null) {
      result
        ..add('after')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.before;
    if (value != null) {
      result
        ..add('before')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.start;
    if (value != null) {
      result
        ..add('start')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.end;
    if (value != null) {
      result
        ..add('end')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GConnectPositionInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GConnectPositionInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'after':
          result.after = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'before':
          result.before = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'start':
          result.start = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'end':
          result.end = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GDocumentFileTypesSerializer
    implements PrimitiveSerializer<GDocumentFileTypes> {
  @override
  final Iterable<Type> types = const <Type>[GDocumentFileTypes];
  @override
  final String wireName = 'GDocumentFileTypes';

  @override
  Object serialize(Serializers serializers, GDocumentFileTypes object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GDocumentFileTypes deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GDocumentFileTypes.valueOf(serialized as String);
}

class _$GDocumentOutputInputSerializer
    implements StructuredSerializer<GDocumentOutputInput> {
  @override
  final Iterable<Type> types = const [
    GDocumentOutputInput,
    _$GDocumentOutputInput
  ];
  @override
  final String wireName = 'GDocumentOutputInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDocumentOutputInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.format;
    if (value != null) {
      result
        ..add('format')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentFileTypes)));
    }
    return result;
  }

  @override
  GDocumentOutputInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDocumentOutputInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'format':
          result.format = serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentFileTypes))
              as GDocumentFileTypes?;
          break;
      }
    }

    return result.build();
  }
}

class _$GDocumentTransformationInputSerializer
    implements StructuredSerializer<GDocumentTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GDocumentTransformationInput,
    _$GDocumentTransformationInput
  ];
  @override
  final String wireName = 'GDocumentTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDocumentTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.output;
    if (value != null) {
      result
        ..add('output')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentOutputInput)));
    }
    return result;
  }

  @override
  GDocumentTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDocumentTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'output':
          result.output.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentOutputInput))!
              as GDocumentOutputInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GEntityTypeNameSerializer
    implements PrimitiveSerializer<GEntityTypeName> {
  @override
  final Iterable<Type> types = const <Type>[GEntityTypeName];
  @override
  final String wireName = 'GEntityTypeName';

  @override
  Object serialize(Serializers serializers, GEntityTypeName object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GEntityTypeName deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GEntityTypeName.valueOf(serialized as String);
}

class _$GEntityWhereInputSerializer
    implements StructuredSerializer<GEntityWhereInput> {
  @override
  final Iterable<Type> types = const [GEntityWhereInput, _$GEntityWhereInput];
  @override
  final String wireName = 'GEntityWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GEntityWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'typename',
      serializers.serialize(object.typename,
          specifiedType: const FullType(GEntityTypeName)),
      'stage',
      serializers.serialize(object.stage,
          specifiedType: const FullType(GStage)),
    ];
    Object? value;
    value = object.locale;
    if (value != null) {
      result
        ..add('locale')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GLocale)));
    }
    return result;
  }

  @override
  GEntityWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GEntityWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'typename':
          result.typename = serializers.deserialize(value,
                  specifiedType: const FullType(GEntityTypeName))!
              as GEntityTypeName;
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage))! as GStage;
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale?;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageBlurInputSerializer
    implements StructuredSerializer<GImageBlurInput> {
  @override
  final Iterable<Type> types = const [GImageBlurInput, _$GImageBlurInput];
  @override
  final String wireName = 'GImageBlurInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GImageBlurInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'amount',
      serializers.serialize(object.amount, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GImageBlurInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageBlurInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageBorderInputSerializer
    implements StructuredSerializer<GImageBorderInput> {
  @override
  final Iterable<Type> types = const [GImageBorderInput, _$GImageBorderInput];
  @override
  final String wireName = 'GImageBorderInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GImageBorderInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'width',
      serializers.serialize(object.width, specifiedType: const FullType(int)),
      'color',
      serializers.serialize(object.color,
          specifiedType: const FullType(String)),
      'background',
      serializers.serialize(object.background,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GImageBorderInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageBorderInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'color':
          result.color = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'background':
          result.background = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageCompressInputSerializer
    implements StructuredSerializer<GImageCompressInput> {
  @override
  final Iterable<Type> types = const [
    GImageCompressInput,
    _$GImageCompressInput
  ];
  @override
  final String wireName = 'GImageCompressInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GImageCompressInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'metadata',
      serializers.serialize(object.metadata,
          specifiedType: const FullType(bool)),
    ];

    return result;
  }

  @override
  GImageCompressInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageCompressInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'metadata':
          result.metadata = serializers.deserialize(value,
              specifiedType: const FullType(bool))! as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageCropInputSerializer
    implements StructuredSerializer<GImageCropInput> {
  @override
  final Iterable<Type> types = const [GImageCropInput, _$GImageCropInput];
  @override
  final String wireName = 'GImageCropInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GImageCropInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'x',
      serializers.serialize(object.x, specifiedType: const FullType(int)),
      'y',
      serializers.serialize(object.y, specifiedType: const FullType(int)),
      'width',
      serializers.serialize(object.width, specifiedType: const FullType(int)),
      'height',
      serializers.serialize(object.height, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GImageCropInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageCropInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'x':
          result.x = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'y':
          result.y = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageFitSerializer implements PrimitiveSerializer<GImageFit> {
  @override
  final Iterable<Type> types = const <Type>[GImageFit];
  @override
  final String wireName = 'GImageFit';

  @override
  Object serialize(Serializers serializers, GImageFit object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GImageFit deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GImageFit.valueOf(serialized as String);
}

class _$GImageQualityInputSerializer
    implements StructuredSerializer<GImageQualityInput> {
  @override
  final Iterable<Type> types = const [GImageQualityInput, _$GImageQualityInput];
  @override
  final String wireName = 'GImageQualityInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GImageQualityInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'value',
      serializers.serialize(object.value, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GImageQualityInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageQualityInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'value':
          result.value = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageResizeInputSerializer
    implements StructuredSerializer<GImageResizeInput> {
  @override
  final Iterable<Type> types = const [GImageResizeInput, _$GImageResizeInput];
  @override
  final String wireName = 'GImageResizeInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GImageResizeInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.fit;
    if (value != null) {
      result
        ..add('fit')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageFit)));
    }
    return result;
  }

  @override
  GImageResizeInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageResizeInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'fit':
          result.fit = serializers.deserialize(value,
              specifiedType: const FullType(GImageFit)) as GImageFit?;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageSharpenInputSerializer
    implements StructuredSerializer<GImageSharpenInput> {
  @override
  final Iterable<Type> types = const [GImageSharpenInput, _$GImageSharpenInput];
  @override
  final String wireName = 'GImageSharpenInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GImageSharpenInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'amount',
      serializers.serialize(object.amount, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GImageSharpenInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageSharpenInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'amount':
          result.amount = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageTransformationInputSerializer
    implements StructuredSerializer<GImageTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GImageTransformationInput,
    _$GImageTransformationInput
  ];
  @override
  final String wireName = 'GImageTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GImageTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.resize;
    if (value != null) {
      result
        ..add('resize')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageResizeInput)));
    }
    value = object.compress;
    if (value != null) {
      result
        ..add('compress')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageCompressInput)));
    }
    value = object.blur;
    if (value != null) {
      result
        ..add('blur')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageBlurInput)));
    }
    value = object.sharpen;
    if (value != null) {
      result
        ..add('sharpen')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageSharpenInput)));
    }
    value = object.border;
    if (value != null) {
      result
        ..add('border')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageBorderInput)));
    }
    value = object.quality;
    if (value != null) {
      result
        ..add('quality')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageQualityInput)));
    }
    value = object.crop;
    if (value != null) {
      result
        ..add('crop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageCropInput)));
    }
    return result;
  }

  @override
  GImageTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'resize':
          result.resize.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageResizeInput))!
              as GImageResizeInput);
          break;
        case 'compress':
          result.compress.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageCompressInput))!
              as GImageCompressInput);
          break;
        case 'blur':
          result.blur.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageBlurInput))!
              as GImageBlurInput);
          break;
        case 'sharpen':
          result.sharpen.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageSharpenInput))!
              as GImageSharpenInput);
          break;
        case 'border':
          result.border.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageBorderInput))!
              as GImageBorderInput);
          break;
        case 'quality':
          result.quality.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageQualityInput))!
              as GImageQualityInput);
          break;
        case 'crop':
          result.crop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageCropInput))!
              as GImageCropInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GLocaleSerializer implements PrimitiveSerializer<GLocale> {
  @override
  final Iterable<Type> types = const <Type>[GLocale];
  @override
  final String wireName = 'GLocale';

  @override
  Object serialize(Serializers serializers, GLocale object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GLocale deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GLocale.valueOf(serialized as String);
}

class _$GLocationInputSerializer
    implements StructuredSerializer<GLocationInput> {
  @override
  final Iterable<Type> types = const [GLocationInput, _$GLocationInput];
  @override
  final String wireName = 'GLocationInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GLocationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'latitude',
      serializers.serialize(object.latitude,
          specifiedType: const FullType(double)),
      'longitude',
      serializers.serialize(object.longitude,
          specifiedType: const FullType(double)),
    ];

    return result;
  }

  @override
  GLocationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'latitude':
          result.latitude = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
        case 'longitude':
          result.longitude = serializers.deserialize(value,
              specifiedType: const FullType(double))! as double;
          break;
      }
    }

    return result.build();
  }
}

class _$GPublishLocaleInputSerializer
    implements StructuredSerializer<GPublishLocaleInput> {
  @override
  final Iterable<Type> types = const [
    GPublishLocaleInput,
    _$GPublishLocaleInput
  ];
  @override
  final String wireName = 'GPublishLocaleInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPublishLocaleInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
      'stages',
      serializers.serialize(object.stages,
          specifiedType:
              const FullType(BuiltList, const [const FullType(GStage)])),
    ];

    return result;
  }

  @override
  GPublishLocaleInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPublishLocaleInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
        case 'stages':
          result.stages.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GStage)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GRGBAInputSerializer implements StructuredSerializer<GRGBAInput> {
  @override
  final Iterable<Type> types = const [GRGBAInput, _$GRGBAInput];
  @override
  final String wireName = 'GRGBAInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRGBAInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'r',
      serializers.serialize(object.r, specifiedType: const FullType(GRGBAHue)),
      'g',
      serializers.serialize(object.g, specifiedType: const FullType(GRGBAHue)),
      'b',
      serializers.serialize(object.b, specifiedType: const FullType(GRGBAHue)),
      'a',
      serializers.serialize(object.a,
          specifiedType: const FullType(GRGBATransparency)),
    ];

    return result;
  }

  @override
  GRGBAInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRGBAInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'r':
          result.r.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRGBAHue))! as GRGBAHue);
          break;
        case 'g':
          result.g.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRGBAHue))! as GRGBAHue);
          break;
        case 'b':
          result.b.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRGBAHue))! as GRGBAHue);
          break;
        case 'a':
          result.a.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GRGBATransparency))!
              as GRGBATransparency);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationConnectInputSerializer
    implements StructuredSerializer<GScheduledOperationConnectInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationConnectInput,
    _$GScheduledOperationConnectInput
  ];
  @override
  final String wireName = 'GScheduledOperationConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GScheduledOperationWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GScheduledOperationConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledOperationWhereUniqueInput))!
              as GScheduledOperationWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationCreateManyInlineInputSerializer
    implements StructuredSerializer<GScheduledOperationCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationCreateManyInlineInput,
    _$GScheduledOperationCreateManyInlineInput
  ];
  @override
  final String wireName = 'GScheduledOperationCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GScheduledOperationCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationCreateOneInlineInputSerializer
    implements StructuredSerializer<GScheduledOperationCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationCreateOneInlineInput,
    _$GScheduledOperationCreateOneInlineInput
  ];
  @override
  final String wireName = 'GScheduledOperationCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GScheduledOperationWhereUniqueInput)));
    }
    return result;
  }

  @override
  GScheduledOperationCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledOperationWhereUniqueInput))!
              as GScheduledOperationWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationManyWhereInputSerializer
    implements StructuredSerializer<GScheduledOperationManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationManyWhereInput,
    _$GScheduledOperationManyWhereInput
  ];
  @override
  final String wireName = 'GScheduledOperationManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.rawPayload_json_path_exists;
    if (value != null) {
      result
        ..add('rawPayload_json_path_exists')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.rawPayload_value_recursive;
    if (value != null) {
      result
        ..add('rawPayload_value_recursive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(GJson)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not;
    if (value != null) {
      result
        ..add('errorMessage_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_in;
    if (value != null) {
      result
        ..add('errorMessage_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_not_in;
    if (value != null) {
      result
        ..add('errorMessage_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_contains;
    if (value != null) {
      result
        ..add('errorMessage_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_contains;
    if (value != null) {
      result
        ..add('errorMessage_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.release;
    if (value != null) {
      result
        ..add('release')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledOperationStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledOperationStatus)])));
    }
    return result;
  }

  @override
  GScheduledOperationManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'rawPayload_json_path_exists':
          result.rawPayload_json_path_exists = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'rawPayload_value_recursive':
          result.rawPayload_value_recursive.replace(serializers.deserialize(
              value,
              specifiedType: const FullType(GJson))! as GJson);
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not':
          result.errorMessage_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_in':
          result.errorMessage_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_not_in':
          result.errorMessage_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_contains':
          result.errorMessage_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_contains':
          result.errorMessage_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_starts_with':
          result.errorMessage_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_starts_with':
          result.errorMessage_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_ends_with':
          result.errorMessage_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_ends_with':
          result.errorMessage_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'release':
          result.release.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseWhereInput))!
              as GScheduledReleaseWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationStatus))
              as GScheduledOperationStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationStatus))
              as GScheduledOperationStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledOperationStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledOperationStatus)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationOrderByInputSerializer
    implements PrimitiveSerializer<GScheduledOperationOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GScheduledOperationOrderByInput];
  @override
  final String wireName = 'GScheduledOperationOrderByInput';

  @override
  Object serialize(
          Serializers serializers, GScheduledOperationOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GScheduledOperationOrderByInput deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GScheduledOperationOrderByInput.valueOf(serialized as String);
}

class _$GScheduledOperationStatusSerializer
    implements PrimitiveSerializer<GScheduledOperationStatus> {
  @override
  final Iterable<Type> types = const <Type>[GScheduledOperationStatus];
  @override
  final String wireName = 'GScheduledOperationStatus';

  @override
  Object serialize(Serializers serializers, GScheduledOperationStatus object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GScheduledOperationStatus deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GScheduledOperationStatus.valueOf(serialized as String);
}

class _$GScheduledOperationUpdateManyInlineInputSerializer
    implements StructuredSerializer<GScheduledOperationUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationUpdateManyInlineInput,
    _$GScheduledOperationUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GScheduledOperationUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereUniqueInput)])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GScheduledOperationUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationConnectInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationUpdateOneInlineInputSerializer
    implements StructuredSerializer<GScheduledOperationUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationUpdateOneInlineInput,
    _$GScheduledOperationUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GScheduledOperationUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GScheduledOperationWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GScheduledOperationUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledOperationWhereUniqueInput))!
              as GScheduledOperationWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationWhereInputSerializer
    implements StructuredSerializer<GScheduledOperationWhereInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationWhereInput,
    _$GScheduledOperationWhereInput
  ];
  @override
  final String wireName = 'GScheduledOperationWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledOperationWhereInput)])));
    }
    value = object.rawPayload_json_path_exists;
    if (value != null) {
      result
        ..add('rawPayload_json_path_exists')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.rawPayload_value_recursive;
    if (value != null) {
      result
        ..add('rawPayload_value_recursive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(GJson)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not;
    if (value != null) {
      result
        ..add('errorMessage_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_in;
    if (value != null) {
      result
        ..add('errorMessage_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_not_in;
    if (value != null) {
      result
        ..add('errorMessage_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_contains;
    if (value != null) {
      result
        ..add('errorMessage_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_contains;
    if (value != null) {
      result
        ..add('errorMessage_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.release;
    if (value != null) {
      result
        ..add('release')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledOperationStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledOperationStatus)])));
    }
    return result;
  }

  @override
  GScheduledOperationWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledOperationWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'rawPayload_json_path_exists':
          result.rawPayload_json_path_exists = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'rawPayload_value_recursive':
          result.rawPayload_value_recursive.replace(serializers.deserialize(
              value,
              specifiedType: const FullType(GJson))! as GJson);
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not':
          result.errorMessage_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_in':
          result.errorMessage_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_not_in':
          result.errorMessage_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_contains':
          result.errorMessage_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_contains':
          result.errorMessage_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_starts_with':
          result.errorMessage_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_starts_with':
          result.errorMessage_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_ends_with':
          result.errorMessage_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_ends_with':
          result.errorMessage_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'release':
          result.release.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseWhereInput))!
              as GScheduledReleaseWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationStatus))
              as GScheduledOperationStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationStatus))
              as GScheduledOperationStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledOperationStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledOperationStatus)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledOperationWhereUniqueInputSerializer
    implements StructuredSerializer<GScheduledOperationWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledOperationWhereUniqueInput,
    _$GScheduledOperationWhereUniqueInput
  ];
  @override
  final String wireName = 'GScheduledOperationWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledOperationWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GScheduledOperationWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledOperationWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseConnectInputSerializer
    implements StructuredSerializer<GScheduledReleaseConnectInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseConnectInput,
    _$GScheduledReleaseConnectInput
  ];
  @override
  final String wireName = 'GScheduledReleaseConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GScheduledReleaseWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GScheduledReleaseConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseWhereUniqueInput))!
              as GScheduledReleaseWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseCreateInputSerializer
    implements StructuredSerializer<GScheduledReleaseCreateInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseCreateInput,
    _$GScheduledReleaseCreateInput
  ];
  @override
  final String wireName = 'GScheduledReleaseCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.releaseAt;
    if (value != null) {
      result
        ..add('releaseAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    return result;
  }

  @override
  GScheduledReleaseCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'releaseAt':
          result.releaseAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseCreateManyInlineInputSerializer
    implements StructuredSerializer<GScheduledReleaseCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseCreateManyInlineInput,
    _$GScheduledReleaseCreateManyInlineInput
  ];
  @override
  final String wireName = 'GScheduledReleaseCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GScheduledReleaseCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseCreateInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseCreateOneInlineInputSerializer
    implements StructuredSerializer<GScheduledReleaseCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseCreateOneInlineInput,
    _$GScheduledReleaseCreateOneInlineInput
  ];
  @override
  final String wireName = 'GScheduledReleaseCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseWhereUniqueInput)));
    }
    return result;
  }

  @override
  GScheduledReleaseCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseCreateInput))!
              as GScheduledReleaseCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseWhereUniqueInput))!
              as GScheduledReleaseWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseManyWhereInputSerializer
    implements StructuredSerializer<GScheduledReleaseManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseManyWhereInput,
    _$GScheduledReleaseManyWhereInput
  ];
  @override
  final String wireName = 'GScheduledReleaseManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.releaseAt;
    if (value != null) {
      result
        ..add('releaseAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_not;
    if (value != null) {
      result
        ..add('releaseAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_in;
    if (value != null) {
      result
        ..add('releaseAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.releaseAt_not_in;
    if (value != null) {
      result
        ..add('releaseAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.releaseAt_lt;
    if (value != null) {
      result
        ..add('releaseAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_lte;
    if (value != null) {
      result
        ..add('releaseAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_gt;
    if (value != null) {
      result
        ..add('releaseAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_gte;
    if (value != null) {
      result
        ..add('releaseAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.isImplicit;
    if (value != null) {
      result
        ..add('isImplicit')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isImplicit_not;
    if (value != null) {
      result
        ..add('isImplicit_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not;
    if (value != null) {
      result
        ..add('errorMessage_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_in;
    if (value != null) {
      result
        ..add('errorMessage_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_not_in;
    if (value != null) {
      result
        ..add('errorMessage_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_contains;
    if (value != null) {
      result
        ..add('errorMessage_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_contains;
    if (value != null) {
      result
        ..add('errorMessage_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.operations_every;
    if (value != null) {
      result
        ..add('operations_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.operations_some;
    if (value != null) {
      result
        ..add('operations_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.operations_none;
    if (value != null) {
      result
        ..add('operations_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledReleaseStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledReleaseStatus)])));
    }
    return result;
  }

  @override
  GScheduledReleaseManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'releaseAt':
          result.releaseAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_not':
          result.releaseAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_in':
          result.releaseAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'releaseAt_not_in':
          result.releaseAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'releaseAt_lt':
          result.releaseAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_lte':
          result.releaseAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_gt':
          result.releaseAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_gte':
          result.releaseAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isImplicit':
          result.isImplicit = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isImplicit_not':
          result.isImplicit_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not':
          result.errorMessage_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_in':
          result.errorMessage_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_not_in':
          result.errorMessage_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_contains':
          result.errorMessage_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_contains':
          result.errorMessage_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_starts_with':
          result.errorMessage_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_starts_with':
          result.errorMessage_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_ends_with':
          result.errorMessage_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_ends_with':
          result.errorMessage_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'operations_every':
          result.operations_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'operations_some':
          result.operations_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'operations_none':
          result.operations_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseStatus))
              as GScheduledReleaseStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseStatus))
              as GScheduledReleaseStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledReleaseStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledReleaseStatus)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseOrderByInputSerializer
    implements PrimitiveSerializer<GScheduledReleaseOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GScheduledReleaseOrderByInput];
  @override
  final String wireName = 'GScheduledReleaseOrderByInput';

  @override
  Object serialize(
          Serializers serializers, GScheduledReleaseOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GScheduledReleaseOrderByInput deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GScheduledReleaseOrderByInput.valueOf(serialized as String);
}

class _$GScheduledReleaseStatusSerializer
    implements PrimitiveSerializer<GScheduledReleaseStatus> {
  @override
  final Iterable<Type> types = const <Type>[GScheduledReleaseStatus];
  @override
  final String wireName = 'GScheduledReleaseStatus';

  @override
  Object serialize(Serializers serializers, GScheduledReleaseStatus object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GScheduledReleaseStatus deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GScheduledReleaseStatus.valueOf(serialized as String);
}

class _$GScheduledReleaseUpdateInputSerializer
    implements StructuredSerializer<GScheduledReleaseUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateInput,
    _$GScheduledReleaseUpdateInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.releaseAt;
    if (value != null) {
      result
        ..add('releaseAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GScheduledReleaseUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'releaseAt':
          result.releaseAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpdateManyInlineInputSerializer
    implements StructuredSerializer<GScheduledReleaseUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateManyInlineInput,
    _$GScheduledReleaseUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GScheduledReleaseUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GScheduledReleaseUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GScheduledReleaseUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseCreateInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseConnectInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GScheduledReleaseUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GScheduledReleaseUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpdateManyInputSerializer
    implements StructuredSerializer<GScheduledReleaseUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateManyInput,
    _$GScheduledReleaseUpdateManyInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.releaseAt;
    if (value != null) {
      result
        ..add('releaseAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GScheduledReleaseUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'releaseAt':
          result.releaseAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpdateManyWithNestedWhereInputSerializer
    implements
        StructuredSerializer<GScheduledReleaseUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateManyWithNestedWhereInput,
    _$GScheduledReleaseUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GScheduledReleaseUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GScheduledReleaseWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GScheduledReleaseUpdateManyInput)),
    ];

    return result;
  }

  @override
  GScheduledReleaseUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseWhereInput))!
              as GScheduledReleaseWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseUpdateManyInput))!
              as GScheduledReleaseUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpdateOneInlineInputSerializer
    implements StructuredSerializer<GScheduledReleaseUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateOneInlineInput,
    _$GScheduledReleaseUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GScheduledReleaseUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GScheduledReleaseUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GScheduledReleaseUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseCreateInput))!
              as GScheduledReleaseCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GScheduledReleaseUpdateWithNestedWhereUniqueInput))!
              as GScheduledReleaseUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GScheduledReleaseUpsertWithNestedWhereUniqueInput))!
              as GScheduledReleaseUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseWhereUniqueInput))!
              as GScheduledReleaseWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpdateWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GScheduledReleaseUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpdateWithNestedWhereUniqueInput,
    _$GScheduledReleaseUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GScheduledReleaseUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GScheduledReleaseWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GScheduledReleaseUpdateInput)),
    ];

    return result;
  }

  @override
  GScheduledReleaseUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseWhereUniqueInput))!
              as GScheduledReleaseWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseUpdateInput))!
              as GScheduledReleaseUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpsertInputSerializer
    implements StructuredSerializer<GScheduledReleaseUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpsertInput,
    _$GScheduledReleaseUpsertInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GScheduledReleaseCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GScheduledReleaseUpdateInput)),
    ];

    return result;
  }

  @override
  GScheduledReleaseUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseCreateInput))!
              as GScheduledReleaseCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseUpdateInput))!
              as GScheduledReleaseUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseUpsertWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GScheduledReleaseUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseUpsertWithNestedWhereUniqueInput,
    _$GScheduledReleaseUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GScheduledReleaseUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GScheduledReleaseUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GScheduledReleaseWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GScheduledReleaseUpsertInput)),
    ];

    return result;
  }

  @override
  GScheduledReleaseUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GScheduledReleaseWhereUniqueInput))!
              as GScheduledReleaseWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseUpsertInput))!
              as GScheduledReleaseUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseWhereInputSerializer
    implements StructuredSerializer<GScheduledReleaseWhereInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseWhereInput,
    _$GScheduledReleaseWhereInput
  ];
  @override
  final String wireName = 'GScheduledReleaseWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GScheduledReleaseWhereInput)])));
    }
    value = object.releaseAt;
    if (value != null) {
      result
        ..add('releaseAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_not;
    if (value != null) {
      result
        ..add('releaseAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_in;
    if (value != null) {
      result
        ..add('releaseAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.releaseAt_not_in;
    if (value != null) {
      result
        ..add('releaseAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.releaseAt_lt;
    if (value != null) {
      result
        ..add('releaseAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_lte;
    if (value != null) {
      result
        ..add('releaseAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_gt;
    if (value != null) {
      result
        ..add('releaseAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.releaseAt_gte;
    if (value != null) {
      result
        ..add('releaseAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.isImplicit;
    if (value != null) {
      result
        ..add('isImplicit')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isImplicit_not;
    if (value != null) {
      result
        ..add('isImplicit_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.errorMessage;
    if (value != null) {
      result
        ..add('errorMessage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not;
    if (value != null) {
      result
        ..add('errorMessage_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_in;
    if (value != null) {
      result
        ..add('errorMessage_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_not_in;
    if (value != null) {
      result
        ..add('errorMessage_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.errorMessage_contains;
    if (value != null) {
      result
        ..add('errorMessage_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_contains;
    if (value != null) {
      result
        ..add('errorMessage_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_starts_with;
    if (value != null) {
      result
        ..add('errorMessage_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.errorMessage_not_ends_with;
    if (value != null) {
      result
        ..add('errorMessage_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.operations_every;
    if (value != null) {
      result
        ..add('operations_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.operations_some;
    if (value != null) {
      result
        ..add('operations_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.operations_none;
    if (value != null) {
      result
        ..add('operations_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledOperationWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.status;
    if (value != null) {
      result
        ..add('status')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseStatus)));
    }
    value = object.status_not;
    if (value != null) {
      result
        ..add('status_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GScheduledReleaseStatus)));
    }
    value = object.status_in;
    if (value != null) {
      result
        ..add('status_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledReleaseStatus)])));
    }
    value = object.status_not_in;
    if (value != null) {
      result
        ..add('status_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType.nullable(GScheduledReleaseStatus)])));
    }
    return result;
  }

  @override
  GScheduledReleaseWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GScheduledReleaseWhereInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'releaseAt':
          result.releaseAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_not':
          result.releaseAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_in':
          result.releaseAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'releaseAt_not_in':
          result.releaseAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'releaseAt_lt':
          result.releaseAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_lte':
          result.releaseAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_gt':
          result.releaseAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'releaseAt_gte':
          result.releaseAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'isImplicit':
          result.isImplicit = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isImplicit_not':
          result.isImplicit_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'errorMessage':
          result.errorMessage = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not':
          result.errorMessage_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_in':
          result.errorMessage_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_not_in':
          result.errorMessage_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'errorMessage_contains':
          result.errorMessage_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_contains':
          result.errorMessage_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_starts_with':
          result.errorMessage_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_starts_with':
          result.errorMessage_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_ends_with':
          result.errorMessage_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'errorMessage_not_ends_with':
          result.errorMessage_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'operations_every':
          result.operations_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'operations_some':
          result.operations_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'operations_none':
          result.operations_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledOperationWhereInput))!
              as GScheduledOperationWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'status':
          result.status = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseStatus))
              as GScheduledReleaseStatus?;
          break;
        case 'status_not':
          result.status_not = serializers.deserialize(value,
                  specifiedType: const FullType(GScheduledReleaseStatus))
              as GScheduledReleaseStatus?;
          break;
        case 'status_in':
          result.status_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledReleaseStatus)
              ]))! as BuiltList<Object?>);
          break;
        case 'status_not_in':
          result.status_not_in.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType.nullable(GScheduledReleaseStatus)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GScheduledReleaseWhereUniqueInputSerializer
    implements StructuredSerializer<GScheduledReleaseWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GScheduledReleaseWhereUniqueInput,
    _$GScheduledReleaseWhereUniqueInput
  ];
  @override
  final String wireName = 'GScheduledReleaseWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GScheduledReleaseWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GScheduledReleaseWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GScheduledReleaseWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GStageSerializer implements PrimitiveSerializer<GStage> {
  @override
  final Iterable<Type> types = const <Type>[GStage];
  @override
  final String wireName = 'GStage';

  @override
  Object serialize(Serializers serializers, GStage object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GStage deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GStage.valueOf(serialized as String);
}

class _$GSystemDateTimeFieldVariationSerializer
    implements PrimitiveSerializer<GSystemDateTimeFieldVariation> {
  @override
  final Iterable<Type> types = const <Type>[GSystemDateTimeFieldVariation];
  @override
  final String wireName = 'GSystemDateTimeFieldVariation';

  @override
  Object serialize(
          Serializers serializers, GSystemDateTimeFieldVariation object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GSystemDateTimeFieldVariation deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GSystemDateTimeFieldVariation.valueOf(serialized as String);
}

class _$GUnpublishLocaleInputSerializer
    implements StructuredSerializer<GUnpublishLocaleInput> {
  @override
  final Iterable<Type> types = const [
    GUnpublishLocaleInput,
    _$GUnpublishLocaleInput
  ];
  @override
  final String wireName = 'GUnpublishLocaleInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUnpublishLocaleInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
      'stages',
      serializers.serialize(object.stages,
          specifiedType:
              const FullType(BuiltList, const [const FullType(GStage)])),
    ];

    return result;
  }

  @override
  GUnpublishLocaleInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUnpublishLocaleInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale))! as GLocale;
          break;
        case 'stages':
          result.stages.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GStage)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserConnectInputSerializer
    implements StructuredSerializer<GUserConnectInput> {
  @override
  final Iterable<Type> types = const [GUserConnectInput, _$GUserConnectInput];
  @override
  final String wireName = 'GUserConnectInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GUserWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GUserConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserCreateManyInlineInputSerializer
    implements StructuredSerializer<GUserCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserCreateManyInlineInput,
    _$GUserCreateManyInlineInput
  ];
  @override
  final String wireName = 'GUserCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GUserCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserCreateOneInlineInputSerializer
    implements StructuredSerializer<GUserCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserCreateOneInlineInput,
    _$GUserCreateOneInlineInput
  ];
  @override
  final String wireName = 'GUserCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereUniqueInput)));
    }
    return result;
  }

  @override
  GUserCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserKindSerializer implements PrimitiveSerializer<GUserKind> {
  @override
  final Iterable<Type> types = const <Type>[GUserKind];
  @override
  final String wireName = 'GUserKind';

  @override
  Object serialize(Serializers serializers, GUserKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GUserKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GUserKind.valueOf(serialized as String);
}

class _$GUserManyWhereInputSerializer
    implements StructuredSerializer<GUserManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GUserManyWhereInput,
    _$GUserManyWhereInput
  ];
  @override
  final String wireName = 'GUserManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.picture;
    if (value != null) {
      result
        ..add('picture')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not;
    if (value != null) {
      result
        ..add('picture_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_in;
    if (value != null) {
      result
        ..add('picture_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.picture_not_in;
    if (value != null) {
      result
        ..add('picture_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.picture_contains;
    if (value != null) {
      result
        ..add('picture_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_contains;
    if (value != null) {
      result
        ..add('picture_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_starts_with;
    if (value != null) {
      result
        ..add('picture_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_starts_with;
    if (value != null) {
      result
        ..add('picture_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_ends_with;
    if (value != null) {
      result
        ..add('picture_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_ends_with;
    if (value != null) {
      result
        ..add('picture_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not;
    if (value != null) {
      result
        ..add('name_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_in;
    if (value != null) {
      result
        ..add('name_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.name_not_in;
    if (value != null) {
      result
        ..add('name_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.name_contains;
    if (value != null) {
      result
        ..add('name_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_contains;
    if (value != null) {
      result
        ..add('name_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_starts_with;
    if (value != null) {
      result
        ..add('name_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_starts_with;
    if (value != null) {
      result
        ..add('name_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_ends_with;
    if (value != null) {
      result
        ..add('name_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_ends_with;
    if (value != null) {
      result
        ..add('name_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.kind;
    if (value != null) {
      result
        ..add('kind')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_not;
    if (value != null) {
      result
        ..add('kind_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_in;
    if (value != null) {
      result
        ..add('kind_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GUserKind)])));
    }
    value = object.kind_not_in;
    if (value != null) {
      result
        ..add('kind_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GUserKind)])));
    }
    return result;
  }

  @override
  GUserManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'picture':
          result.picture = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not':
          result.picture_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_in':
          result.picture_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'picture_not_in':
          result.picture_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'picture_contains':
          result.picture_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_contains':
          result.picture_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_starts_with':
          result.picture_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_starts_with':
          result.picture_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_ends_with':
          result.picture_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_ends_with':
          result.picture_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not':
          result.name_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_in':
          result.name_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'name_not_in':
          result.name_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'name_contains':
          result.name_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_contains':
          result.name_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_starts_with':
          result.name_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_starts_with':
          result.name_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_ends_with':
          result.name_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_ends_with':
          result.name_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'kind':
          result.kind = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind?;
          break;
        case 'kind_not':
          result.kind_not = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind?;
          break;
        case 'kind_in':
          result.kind_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GUserKind)]))!
              as BuiltList<Object?>);
          break;
        case 'kind_not_in':
          result.kind_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GUserKind)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserOrderByInputSerializer
    implements PrimitiveSerializer<GUserOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GUserOrderByInput];
  @override
  final String wireName = 'GUserOrderByInput';

  @override
  Object serialize(Serializers serializers, GUserOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GUserOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GUserOrderByInput.valueOf(serialized as String);
}

class _$GUserUpdateManyInlineInputSerializer
    implements StructuredSerializer<GUserUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserUpdateManyInlineInput,
    _$GUserUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GUserUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GUserUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserConnectInput)]))!
              as BuiltList<Object?>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserUpdateOneInlineInputSerializer
    implements StructuredSerializer<GUserUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserUpdateOneInlineInput,
    _$GUserUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GUserUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GUserUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereComparatorInputSerializer
    implements StructuredSerializer<GUserWhereComparatorInput> {
  @override
  final Iterable<Type> types = const [
    GUserWhereComparatorInput,
    _$GUserWhereComparatorInput
  ];
  @override
  final String wireName = 'GUserWhereComparatorInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserWhereComparatorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.outdated_to;
    if (value != null) {
      result
        ..add('outdated_to')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GUserWhereComparatorInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereComparatorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'outdated_to':
          result.outdated_to = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereInputSerializer
    implements StructuredSerializer<GUserWhereInput> {
  @override
  final Iterable<Type> types = const [GUserWhereInput, _$GUserWhereInput];
  @override
  final String wireName = 'GUserWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.documentInStages_every;
    if (value != null) {
      result
        ..add('documentInStages_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.documentInStages_some;
    if (value != null) {
      result
        ..add('documentInStages_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.documentInStages_none;
    if (value != null) {
      result
        ..add('documentInStages_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereStageInput)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.picture;
    if (value != null) {
      result
        ..add('picture')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not;
    if (value != null) {
      result
        ..add('picture_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_in;
    if (value != null) {
      result
        ..add('picture_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.picture_not_in;
    if (value != null) {
      result
        ..add('picture_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.picture_contains;
    if (value != null) {
      result
        ..add('picture_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_contains;
    if (value != null) {
      result
        ..add('picture_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_starts_with;
    if (value != null) {
      result
        ..add('picture_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_starts_with;
    if (value != null) {
      result
        ..add('picture_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_ends_with;
    if (value != null) {
      result
        ..add('picture_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_ends_with;
    if (value != null) {
      result
        ..add('picture_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not;
    if (value != null) {
      result
        ..add('name_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_in;
    if (value != null) {
      result
        ..add('name_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.name_not_in;
    if (value != null) {
      result
        ..add('name_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.name_contains;
    if (value != null) {
      result
        ..add('name_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_contains;
    if (value != null) {
      result
        ..add('name_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_starts_with;
    if (value != null) {
      result
        ..add('name_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_starts_with;
    if (value != null) {
      result
        ..add('name_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_ends_with;
    if (value != null) {
      result
        ..add('name_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_ends_with;
    if (value != null) {
      result
        ..add('name_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GDateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDateTime)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.kind;
    if (value != null) {
      result
        ..add('kind')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_not;
    if (value != null) {
      result
        ..add('kind_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_in;
    if (value != null) {
      result
        ..add('kind_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GUserKind)])));
    }
    value = object.kind_not_in;
    if (value != null) {
      result
        ..add('kind_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType.nullable(GUserKind)])));
    }
    return result;
  }

  @override
  GUserWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object?>);
          break;
        case 'documentInStages_every':
          result.documentInStages_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'documentInStages_some':
          result.documentInStages_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'documentInStages_none':
          result.documentInStages_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereStageInput))!
              as GUserWhereStageInput);
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'picture':
          result.picture = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not':
          result.picture_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_in':
          result.picture_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'picture_not_in':
          result.picture_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'picture_contains':
          result.picture_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_contains':
          result.picture_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_starts_with':
          result.picture_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_starts_with':
          result.picture_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_ends_with':
          result.picture_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'picture_not_ends_with':
          result.picture_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not':
          result.name_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_in':
          result.name_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'name_not_in':
          result.name_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'name_contains':
          result.name_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_contains':
          result.name_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_starts_with':
          result.name_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_starts_with':
          result.name_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_ends_with':
          result.name_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name_not_ends_with':
          result.name_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'publishedAt':
          result.publishedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_not':
          result.publishedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt':
          result.updatedAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_not':
          result.updatedAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt':
          result.createdAt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_not':
          result.createdAt_not.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GDateTime)]))!
              as BuiltList<Object?>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_lte':
          result.createdAt_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gt':
          result.createdAt_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'createdAt_gte':
          result.createdAt_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(GDateTime))! as GDateTime);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(String)]))!
              as BuiltList<Object?>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'kind':
          result.kind = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind?;
          break;
        case 'kind_not':
          result.kind_not = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind?;
          break;
        case 'kind_in':
          result.kind_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GUserKind)]))!
              as BuiltList<Object?>);
          break;
        case 'kind_not_in':
          result.kind_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType.nullable(GUserKind)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereStageInputSerializer
    implements StructuredSerializer<GUserWhereStageInput> {
  @override
  final Iterable<Type> types = const [
    GUserWhereStageInput,
    _$GUserWhereStageInput
  ];
  @override
  final String wireName = 'GUserWhereStageInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserWhereStageInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereStageInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereStageInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereStageInput)])));
    }
    value = object.stage;
    if (value != null) {
      result
        ..add('stage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GStage)));
    }
    value = object.compareWithParent;
    if (value != null) {
      result
        ..add('compareWithParent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereComparatorInput)));
    }
    return result;
  }

  @override
  GUserWhereStageInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereStageInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereStageInput)]))!
              as BuiltList<Object?>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereStageInput)]))!
              as BuiltList<Object?>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereStageInput)]))!
              as BuiltList<Object?>);
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage)) as GStage?;
          break;
        case 'compareWithParent':
          result.compareWithParent.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereComparatorInput))!
              as GUserWhereComparatorInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereUniqueInputSerializer
    implements StructuredSerializer<GUserWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GUserWhereUniqueInput,
    _$GUserWhereUniqueInput
  ];
  @override
  final String wireName = 'GUserWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUserWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$GVersionWhereInputSerializer
    implements StructuredSerializer<GVersionWhereInput> {
  @override
  final Iterable<Type> types = const [GVersionWhereInput, _$GVersionWhereInput];
  @override
  final String wireName = 'GVersionWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GVersionWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'stage',
      serializers.serialize(object.stage,
          specifiedType: const FullType(GStage)),
      'revision',
      serializers.serialize(object.revision,
          specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GVersionWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GVersionWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage))! as GStage;
          break;
        case 'revision':
          result.revision = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GArticleConnectInput extends GArticleConnectInput {
  @override
  final GArticleWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GArticleConnectInput(
          [void Function(GArticleConnectInputBuilder)? updates]) =>
      (new GArticleConnectInputBuilder()..update(updates))._build();

  _$GArticleConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GArticleConnectInput', 'where');
  }

  @override
  GArticleConnectInput rebuild(
          void Function(GArticleConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleConnectInputBuilder toBuilder() =>
      new GArticleConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GArticleConnectInputBuilder
    implements Builder<GArticleConnectInput, GArticleConnectInputBuilder> {
  _$GArticleConnectInput? _$v;

  GArticleWhereUniqueInputBuilder? _where;
  GArticleWhereUniqueInputBuilder get where =>
      _$this._where ??= new GArticleWhereUniqueInputBuilder();
  set where(GArticleWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GArticleConnectInputBuilder();

  GArticleConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleConnectInput;
  }

  @override
  void update(void Function(GArticleConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleConnectInput build() => _build();

  _$GArticleConnectInput _build() {
    _$GArticleConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleCreateInput extends GArticleCreateInput {
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? createdAt;
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final GRichTextAST? body;
  @override
  final bool? published;
  @override
  final String? markdown;
  @override
  final GAssetCreateOneInlineInput? headerImage;
  @override
  final GCategoryCreateManyInlineInput? categories;

  factory _$GArticleCreateInput(
          [void Function(GArticleCreateInputBuilder)? updates]) =>
      (new GArticleCreateInputBuilder()..update(updates))._build();

  _$GArticleCreateInput._(
      {this.updatedAt,
      this.createdAt,
      this.title,
      this.subtitle,
      this.body,
      this.published,
      this.markdown,
      this.headerImage,
      this.categories})
      : super._();

  @override
  GArticleCreateInput rebuild(
          void Function(GArticleCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleCreateInputBuilder toBuilder() =>
      new GArticleCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleCreateInput &&
        updatedAt == other.updatedAt &&
        createdAt == other.createdAt &&
        title == other.title &&
        subtitle == other.subtitle &&
        body == other.body &&
        published == other.published &&
        markdown == other.markdown &&
        headerImage == other.headerImage &&
        categories == other.categories;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, subtitle.hashCode);
    _$hash = $jc(_$hash, body.hashCode);
    _$hash = $jc(_$hash, published.hashCode);
    _$hash = $jc(_$hash, markdown.hashCode);
    _$hash = $jc(_$hash, headerImage.hashCode);
    _$hash = $jc(_$hash, categories.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleCreateInput')
          ..add('updatedAt', updatedAt)
          ..add('createdAt', createdAt)
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('body', body)
          ..add('published', published)
          ..add('markdown', markdown)
          ..add('headerImage', headerImage)
          ..add('categories', categories))
        .toString();
  }
}

class GArticleCreateInputBuilder
    implements Builder<GArticleCreateInput, GArticleCreateInputBuilder> {
  _$GArticleCreateInput? _$v;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  GRichTextASTBuilder? _body;
  GRichTextASTBuilder get body => _$this._body ??= new GRichTextASTBuilder();
  set body(GRichTextASTBuilder? body) => _$this._body = body;

  bool? _published;
  bool? get published => _$this._published;
  set published(bool? published) => _$this._published = published;

  String? _markdown;
  String? get markdown => _$this._markdown;
  set markdown(String? markdown) => _$this._markdown = markdown;

  GAssetCreateOneInlineInputBuilder? _headerImage;
  GAssetCreateOneInlineInputBuilder get headerImage =>
      _$this._headerImage ??= new GAssetCreateOneInlineInputBuilder();
  set headerImage(GAssetCreateOneInlineInputBuilder? headerImage) =>
      _$this._headerImage = headerImage;

  GCategoryCreateManyInlineInputBuilder? _categories;
  GCategoryCreateManyInlineInputBuilder get categories =>
      _$this._categories ??= new GCategoryCreateManyInlineInputBuilder();
  set categories(GCategoryCreateManyInlineInputBuilder? categories) =>
      _$this._categories = categories;

  GArticleCreateInputBuilder();

  GArticleCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updatedAt = $v.updatedAt?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _title = $v.title;
      _subtitle = $v.subtitle;
      _body = $v.body?.toBuilder();
      _published = $v.published;
      _markdown = $v.markdown;
      _headerImage = $v.headerImage?.toBuilder();
      _categories = $v.categories?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleCreateInput;
  }

  @override
  void update(void Function(GArticleCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleCreateInput build() => _build();

  _$GArticleCreateInput _build() {
    _$GArticleCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleCreateInput._(
              updatedAt: _updatedAt?.build(),
              createdAt: _createdAt?.build(),
              title: title,
              subtitle: subtitle,
              body: _body?.build(),
              published: published,
              markdown: markdown,
              headerImage: _headerImage?.build(),
              categories: _categories?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();

        _$failedField = 'body';
        _body?.build();

        _$failedField = 'headerImage';
        _headerImage?.build();
        _$failedField = 'categories';
        _categories?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleCreateManyInlineInput extends GArticleCreateManyInlineInput {
  @override
  final BuiltList<GArticleCreateInput>? create;
  @override
  final BuiltList<GArticleWhereUniqueInput>? connect;

  factory _$GArticleCreateManyInlineInput(
          [void Function(GArticleCreateManyInlineInputBuilder)? updates]) =>
      (new GArticleCreateManyInlineInputBuilder()..update(updates))._build();

  _$GArticleCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GArticleCreateManyInlineInput rebuild(
          void Function(GArticleCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleCreateManyInlineInputBuilder toBuilder() =>
      new GArticleCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GArticleCreateManyInlineInputBuilder
    implements
        Builder<GArticleCreateManyInlineInput,
            GArticleCreateManyInlineInputBuilder> {
  _$GArticleCreateManyInlineInput? _$v;

  ListBuilder<GArticleCreateInput>? _create;
  ListBuilder<GArticleCreateInput> get create =>
      _$this._create ??= new ListBuilder<GArticleCreateInput>();
  set create(ListBuilder<GArticleCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GArticleWhereUniqueInput>? _connect;
  ListBuilder<GArticleWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GArticleWhereUniqueInput>();
  set connect(ListBuilder<GArticleWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GArticleCreateManyInlineInputBuilder();

  GArticleCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleCreateManyInlineInput;
  }

  @override
  void update(void Function(GArticleCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleCreateManyInlineInput build() => _build();

  _$GArticleCreateManyInlineInput _build() {
    _$GArticleCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleCreateOneInlineInput extends GArticleCreateOneInlineInput {
  @override
  final GArticleCreateInput? create;
  @override
  final GArticleWhereUniqueInput? connect;

  factory _$GArticleCreateOneInlineInput(
          [void Function(GArticleCreateOneInlineInputBuilder)? updates]) =>
      (new GArticleCreateOneInlineInputBuilder()..update(updates))._build();

  _$GArticleCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GArticleCreateOneInlineInput rebuild(
          void Function(GArticleCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleCreateOneInlineInputBuilder toBuilder() =>
      new GArticleCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GArticleCreateOneInlineInputBuilder
    implements
        Builder<GArticleCreateOneInlineInput,
            GArticleCreateOneInlineInputBuilder> {
  _$GArticleCreateOneInlineInput? _$v;

  GArticleCreateInputBuilder? _create;
  GArticleCreateInputBuilder get create =>
      _$this._create ??= new GArticleCreateInputBuilder();
  set create(GArticleCreateInputBuilder? create) => _$this._create = create;

  GArticleWhereUniqueInputBuilder? _connect;
  GArticleWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GArticleWhereUniqueInputBuilder();
  set connect(GArticleWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GArticleCreateOneInlineInputBuilder();

  GArticleCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleCreateOneInlineInput;
  }

  @override
  void update(void Function(GArticleCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleCreateOneInlineInput build() => _build();

  _$GArticleCreateOneInlineInput _build() {
    _$GArticleCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleManyWhereInput extends GArticleManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GArticleWhereInput>? AND;
  @override
  final BuiltList<GArticleWhereInput>? OR;
  @override
  final BuiltList<GArticleWhereInput>? NOT;
  @override
  final GArticleWhereStageInput? documentInStages_every;
  @override
  final GArticleWhereStageInput? documentInStages_some;
  @override
  final GArticleWhereStageInput? documentInStages_none;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final String? subtitle;
  @override
  final String? subtitle_not;
  @override
  final BuiltList<String?>? subtitle_in;
  @override
  final BuiltList<String?>? subtitle_not_in;
  @override
  final String? subtitle_contains;
  @override
  final String? subtitle_not_contains;
  @override
  final String? subtitle_starts_with;
  @override
  final String? subtitle_not_starts_with;
  @override
  final String? subtitle_ends_with;
  @override
  final String? subtitle_not_ends_with;
  @override
  final bool? published;
  @override
  final bool? published_not;
  @override
  final String? markdown;
  @override
  final String? markdown_not;
  @override
  final BuiltList<String?>? markdown_in;
  @override
  final BuiltList<String?>? markdown_not_in;
  @override
  final String? markdown_contains;
  @override
  final String? markdown_not_contains;
  @override
  final String? markdown_starts_with;
  @override
  final String? markdown_not_starts_with;
  @override
  final String? markdown_ends_with;
  @override
  final String? markdown_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GAssetWhereInput? headerImage;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final GCategoryWhereInput? categories_every;
  @override
  final GCategoryWhereInput? categories_some;
  @override
  final GCategoryWhereInput? categories_none;

  factory _$GArticleManyWhereInput(
          [void Function(GArticleManyWhereInputBuilder)? updates]) =>
      (new GArticleManyWhereInputBuilder()..update(updates))._build();

  _$GArticleManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.subtitle,
      this.subtitle_not,
      this.subtitle_in,
      this.subtitle_not_in,
      this.subtitle_contains,
      this.subtitle_not_contains,
      this.subtitle_starts_with,
      this.subtitle_not_starts_with,
      this.subtitle_ends_with,
      this.subtitle_not_ends_with,
      this.published,
      this.published_not,
      this.markdown,
      this.markdown_not,
      this.markdown_in,
      this.markdown_not_in,
      this.markdown_contains,
      this.markdown_not_contains,
      this.markdown_starts_with,
      this.markdown_not_starts_with,
      this.markdown_ends_with,
      this.markdown_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.headerImage,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.categories_every,
      this.categories_some,
      this.categories_none})
      : super._();

  @override
  GArticleManyWhereInput rebuild(
          void Function(GArticleManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleManyWhereInputBuilder toBuilder() =>
      new GArticleManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        subtitle == other.subtitle &&
        subtitle_not == other.subtitle_not &&
        subtitle_in == other.subtitle_in &&
        subtitle_not_in == other.subtitle_not_in &&
        subtitle_contains == other.subtitle_contains &&
        subtitle_not_contains == other.subtitle_not_contains &&
        subtitle_starts_with == other.subtitle_starts_with &&
        subtitle_not_starts_with == other.subtitle_not_starts_with &&
        subtitle_ends_with == other.subtitle_ends_with &&
        subtitle_not_ends_with == other.subtitle_not_ends_with &&
        published == other.published &&
        published_not == other.published_not &&
        markdown == other.markdown &&
        markdown_not == other.markdown_not &&
        markdown_in == other.markdown_in &&
        markdown_not_in == other.markdown_not_in &&
        markdown_contains == other.markdown_contains &&
        markdown_not_contains == other.markdown_not_contains &&
        markdown_starts_with == other.markdown_starts_with &&
        markdown_not_starts_with == other.markdown_not_starts_with &&
        markdown_ends_with == other.markdown_ends_with &&
        markdown_not_ends_with == other.markdown_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        headerImage == other.headerImage &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        categories_every == other.categories_every &&
        categories_some == other.categories_some &&
        categories_none == other.categories_none;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, subtitle.hashCode);
    _$hash = $jc(_$hash, subtitle_not.hashCode);
    _$hash = $jc(_$hash, subtitle_in.hashCode);
    _$hash = $jc(_$hash, subtitle_not_in.hashCode);
    _$hash = $jc(_$hash, subtitle_contains.hashCode);
    _$hash = $jc(_$hash, subtitle_not_contains.hashCode);
    _$hash = $jc(_$hash, subtitle_starts_with.hashCode);
    _$hash = $jc(_$hash, subtitle_not_starts_with.hashCode);
    _$hash = $jc(_$hash, subtitle_ends_with.hashCode);
    _$hash = $jc(_$hash, subtitle_not_ends_with.hashCode);
    _$hash = $jc(_$hash, published.hashCode);
    _$hash = $jc(_$hash, published_not.hashCode);
    _$hash = $jc(_$hash, markdown.hashCode);
    _$hash = $jc(_$hash, markdown_not.hashCode);
    _$hash = $jc(_$hash, markdown_in.hashCode);
    _$hash = $jc(_$hash, markdown_not_in.hashCode);
    _$hash = $jc(_$hash, markdown_contains.hashCode);
    _$hash = $jc(_$hash, markdown_not_contains.hashCode);
    _$hash = $jc(_$hash, markdown_starts_with.hashCode);
    _$hash = $jc(_$hash, markdown_not_starts_with.hashCode);
    _$hash = $jc(_$hash, markdown_ends_with.hashCode);
    _$hash = $jc(_$hash, markdown_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, headerImage.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, categories_every.hashCode);
    _$hash = $jc(_$hash, categories_some.hashCode);
    _$hash = $jc(_$hash, categories_none.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('subtitle', subtitle)
          ..add('subtitle_not', subtitle_not)
          ..add('subtitle_in', subtitle_in)
          ..add('subtitle_not_in', subtitle_not_in)
          ..add('subtitle_contains', subtitle_contains)
          ..add('subtitle_not_contains', subtitle_not_contains)
          ..add('subtitle_starts_with', subtitle_starts_with)
          ..add('subtitle_not_starts_with', subtitle_not_starts_with)
          ..add('subtitle_ends_with', subtitle_ends_with)
          ..add('subtitle_not_ends_with', subtitle_not_ends_with)
          ..add('published', published)
          ..add('published_not', published_not)
          ..add('markdown', markdown)
          ..add('markdown_not', markdown_not)
          ..add('markdown_in', markdown_in)
          ..add('markdown_not_in', markdown_not_in)
          ..add('markdown_contains', markdown_contains)
          ..add('markdown_not_contains', markdown_not_contains)
          ..add('markdown_starts_with', markdown_starts_with)
          ..add('markdown_not_starts_with', markdown_not_starts_with)
          ..add('markdown_ends_with', markdown_ends_with)
          ..add('markdown_not_ends_with', markdown_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('headerImage', headerImage)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('categories_every', categories_every)
          ..add('categories_some', categories_some)
          ..add('categories_none', categories_none))
        .toString();
  }
}

class GArticleManyWhereInputBuilder
    implements Builder<GArticleManyWhereInput, GArticleManyWhereInputBuilder> {
  _$GArticleManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GArticleWhereInput>? _AND;
  ListBuilder<GArticleWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GArticleWhereInput>();
  set AND(ListBuilder<GArticleWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GArticleWhereInput>? _OR;
  ListBuilder<GArticleWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GArticleWhereInput>();
  set OR(ListBuilder<GArticleWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GArticleWhereInput>? _NOT;
  ListBuilder<GArticleWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GArticleWhereInput>();
  set NOT(ListBuilder<GArticleWhereInput>? NOT) => _$this._NOT = NOT;

  GArticleWhereStageInputBuilder? _documentInStages_every;
  GArticleWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GArticleWhereStageInputBuilder();
  set documentInStages_every(
          GArticleWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GArticleWhereStageInputBuilder? _documentInStages_some;
  GArticleWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GArticleWhereStageInputBuilder();
  set documentInStages_some(
          GArticleWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GArticleWhereStageInputBuilder? _documentInStages_none;
  GArticleWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GArticleWhereStageInputBuilder();
  set documentInStages_none(
          GArticleWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _subtitle_not;
  String? get subtitle_not => _$this._subtitle_not;
  set subtitle_not(String? subtitle_not) => _$this._subtitle_not = subtitle_not;

  ListBuilder<String?>? _subtitle_in;
  ListBuilder<String?> get subtitle_in =>
      _$this._subtitle_in ??= new ListBuilder<String?>();
  set subtitle_in(ListBuilder<String?>? subtitle_in) =>
      _$this._subtitle_in = subtitle_in;

  ListBuilder<String?>? _subtitle_not_in;
  ListBuilder<String?> get subtitle_not_in =>
      _$this._subtitle_not_in ??= new ListBuilder<String?>();
  set subtitle_not_in(ListBuilder<String?>? subtitle_not_in) =>
      _$this._subtitle_not_in = subtitle_not_in;

  String? _subtitle_contains;
  String? get subtitle_contains => _$this._subtitle_contains;
  set subtitle_contains(String? subtitle_contains) =>
      _$this._subtitle_contains = subtitle_contains;

  String? _subtitle_not_contains;
  String? get subtitle_not_contains => _$this._subtitle_not_contains;
  set subtitle_not_contains(String? subtitle_not_contains) =>
      _$this._subtitle_not_contains = subtitle_not_contains;

  String? _subtitle_starts_with;
  String? get subtitle_starts_with => _$this._subtitle_starts_with;
  set subtitle_starts_with(String? subtitle_starts_with) =>
      _$this._subtitle_starts_with = subtitle_starts_with;

  String? _subtitle_not_starts_with;
  String? get subtitle_not_starts_with => _$this._subtitle_not_starts_with;
  set subtitle_not_starts_with(String? subtitle_not_starts_with) =>
      _$this._subtitle_not_starts_with = subtitle_not_starts_with;

  String? _subtitle_ends_with;
  String? get subtitle_ends_with => _$this._subtitle_ends_with;
  set subtitle_ends_with(String? subtitle_ends_with) =>
      _$this._subtitle_ends_with = subtitle_ends_with;

  String? _subtitle_not_ends_with;
  String? get subtitle_not_ends_with => _$this._subtitle_not_ends_with;
  set subtitle_not_ends_with(String? subtitle_not_ends_with) =>
      _$this._subtitle_not_ends_with = subtitle_not_ends_with;

  bool? _published;
  bool? get published => _$this._published;
  set published(bool? published) => _$this._published = published;

  bool? _published_not;
  bool? get published_not => _$this._published_not;
  set published_not(bool? published_not) =>
      _$this._published_not = published_not;

  String? _markdown;
  String? get markdown => _$this._markdown;
  set markdown(String? markdown) => _$this._markdown = markdown;

  String? _markdown_not;
  String? get markdown_not => _$this._markdown_not;
  set markdown_not(String? markdown_not) => _$this._markdown_not = markdown_not;

  ListBuilder<String?>? _markdown_in;
  ListBuilder<String?> get markdown_in =>
      _$this._markdown_in ??= new ListBuilder<String?>();
  set markdown_in(ListBuilder<String?>? markdown_in) =>
      _$this._markdown_in = markdown_in;

  ListBuilder<String?>? _markdown_not_in;
  ListBuilder<String?> get markdown_not_in =>
      _$this._markdown_not_in ??= new ListBuilder<String?>();
  set markdown_not_in(ListBuilder<String?>? markdown_not_in) =>
      _$this._markdown_not_in = markdown_not_in;

  String? _markdown_contains;
  String? get markdown_contains => _$this._markdown_contains;
  set markdown_contains(String? markdown_contains) =>
      _$this._markdown_contains = markdown_contains;

  String? _markdown_not_contains;
  String? get markdown_not_contains => _$this._markdown_not_contains;
  set markdown_not_contains(String? markdown_not_contains) =>
      _$this._markdown_not_contains = markdown_not_contains;

  String? _markdown_starts_with;
  String? get markdown_starts_with => _$this._markdown_starts_with;
  set markdown_starts_with(String? markdown_starts_with) =>
      _$this._markdown_starts_with = markdown_starts_with;

  String? _markdown_not_starts_with;
  String? get markdown_not_starts_with => _$this._markdown_not_starts_with;
  set markdown_not_starts_with(String? markdown_not_starts_with) =>
      _$this._markdown_not_starts_with = markdown_not_starts_with;

  String? _markdown_ends_with;
  String? get markdown_ends_with => _$this._markdown_ends_with;
  set markdown_ends_with(String? markdown_ends_with) =>
      _$this._markdown_ends_with = markdown_ends_with;

  String? _markdown_not_ends_with;
  String? get markdown_not_ends_with => _$this._markdown_not_ends_with;
  set markdown_not_ends_with(String? markdown_not_ends_with) =>
      _$this._markdown_not_ends_with = markdown_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GAssetWhereInputBuilder? _headerImage;
  GAssetWhereInputBuilder get headerImage =>
      _$this._headerImage ??= new GAssetWhereInputBuilder();
  set headerImage(GAssetWhereInputBuilder? headerImage) =>
      _$this._headerImage = headerImage;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  GCategoryWhereInputBuilder? _categories_every;
  GCategoryWhereInputBuilder get categories_every =>
      _$this._categories_every ??= new GCategoryWhereInputBuilder();
  set categories_every(GCategoryWhereInputBuilder? categories_every) =>
      _$this._categories_every = categories_every;

  GCategoryWhereInputBuilder? _categories_some;
  GCategoryWhereInputBuilder get categories_some =>
      _$this._categories_some ??= new GCategoryWhereInputBuilder();
  set categories_some(GCategoryWhereInputBuilder? categories_some) =>
      _$this._categories_some = categories_some;

  GCategoryWhereInputBuilder? _categories_none;
  GCategoryWhereInputBuilder get categories_none =>
      _$this._categories_none ??= new GCategoryWhereInputBuilder();
  set categories_none(GCategoryWhereInputBuilder? categories_none) =>
      _$this._categories_none = categories_none;

  GArticleManyWhereInputBuilder();

  GArticleManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _subtitle = $v.subtitle;
      _subtitle_not = $v.subtitle_not;
      _subtitle_in = $v.subtitle_in?.toBuilder();
      _subtitle_not_in = $v.subtitle_not_in?.toBuilder();
      _subtitle_contains = $v.subtitle_contains;
      _subtitle_not_contains = $v.subtitle_not_contains;
      _subtitle_starts_with = $v.subtitle_starts_with;
      _subtitle_not_starts_with = $v.subtitle_not_starts_with;
      _subtitle_ends_with = $v.subtitle_ends_with;
      _subtitle_not_ends_with = $v.subtitle_not_ends_with;
      _published = $v.published;
      _published_not = $v.published_not;
      _markdown = $v.markdown;
      _markdown_not = $v.markdown_not;
      _markdown_in = $v.markdown_in?.toBuilder();
      _markdown_not_in = $v.markdown_not_in?.toBuilder();
      _markdown_contains = $v.markdown_contains;
      _markdown_not_contains = $v.markdown_not_contains;
      _markdown_starts_with = $v.markdown_starts_with;
      _markdown_not_starts_with = $v.markdown_not_starts_with;
      _markdown_ends_with = $v.markdown_ends_with;
      _markdown_not_ends_with = $v.markdown_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _headerImage = $v.headerImage?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _categories_every = $v.categories_every?.toBuilder();
      _categories_some = $v.categories_some?.toBuilder();
      _categories_none = $v.categories_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleManyWhereInput;
  }

  @override
  void update(void Function(GArticleManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleManyWhereInput build() => _build();

  _$GArticleManyWhereInput _build() {
    _$GArticleManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              subtitle: subtitle,
              subtitle_not: subtitle_not,
              subtitle_in: _subtitle_in?.build(),
              subtitle_not_in: _subtitle_not_in?.build(),
              subtitle_contains: subtitle_contains,
              subtitle_not_contains: subtitle_not_contains,
              subtitle_starts_with: subtitle_starts_with,
              subtitle_not_starts_with: subtitle_not_starts_with,
              subtitle_ends_with: subtitle_ends_with,
              subtitle_not_ends_with: subtitle_not_ends_with,
              published: published,
              published_not: published_not,
              markdown: markdown,
              markdown_not: markdown_not,
              markdown_in: _markdown_in?.build(),
              markdown_not_in: _markdown_not_in?.build(),
              markdown_contains: markdown_contains,
              markdown_not_contains: markdown_not_contains,
              markdown_starts_with: markdown_starts_with,
              markdown_not_starts_with: markdown_not_starts_with,
              markdown_ends_with: markdown_ends_with,
              markdown_not_ends_with: markdown_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              headerImage: _headerImage?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              categories_every: _categories_every?.build(),
              categories_some: _categories_some?.build(),
              categories_none: _categories_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();
        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'subtitle_in';
        _subtitle_in?.build();
        _$failedField = 'subtitle_not_in';
        _subtitle_not_in?.build();

        _$failedField = 'markdown_in';
        _markdown_in?.build();
        _$failedField = 'markdown_not_in';
        _markdown_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'headerImage';
        _headerImage?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();
        _$failedField = 'categories_every';
        _categories_every?.build();
        _$failedField = 'categories_some';
        _categories_some?.build();
        _$failedField = 'categories_none';
        _categories_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateInput extends GArticleUpdateInput {
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final GRichTextAST? body;
  @override
  final bool? published;
  @override
  final String? markdown;
  @override
  final GAssetUpdateOneInlineInput? headerImage;
  @override
  final GCategoryUpdateManyInlineInput? categories;

  factory _$GArticleUpdateInput(
          [void Function(GArticleUpdateInputBuilder)? updates]) =>
      (new GArticleUpdateInputBuilder()..update(updates))._build();

  _$GArticleUpdateInput._(
      {this.title,
      this.subtitle,
      this.body,
      this.published,
      this.markdown,
      this.headerImage,
      this.categories})
      : super._();

  @override
  GArticleUpdateInput rebuild(
          void Function(GArticleUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateInputBuilder toBuilder() =>
      new GArticleUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateInput &&
        title == other.title &&
        subtitle == other.subtitle &&
        body == other.body &&
        published == other.published &&
        markdown == other.markdown &&
        headerImage == other.headerImage &&
        categories == other.categories;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, subtitle.hashCode);
    _$hash = $jc(_$hash, body.hashCode);
    _$hash = $jc(_$hash, published.hashCode);
    _$hash = $jc(_$hash, markdown.hashCode);
    _$hash = $jc(_$hash, headerImage.hashCode);
    _$hash = $jc(_$hash, categories.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleUpdateInput')
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('body', body)
          ..add('published', published)
          ..add('markdown', markdown)
          ..add('headerImage', headerImage)
          ..add('categories', categories))
        .toString();
  }
}

class GArticleUpdateInputBuilder
    implements Builder<GArticleUpdateInput, GArticleUpdateInputBuilder> {
  _$GArticleUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  GRichTextASTBuilder? _body;
  GRichTextASTBuilder get body => _$this._body ??= new GRichTextASTBuilder();
  set body(GRichTextASTBuilder? body) => _$this._body = body;

  bool? _published;
  bool? get published => _$this._published;
  set published(bool? published) => _$this._published = published;

  String? _markdown;
  String? get markdown => _$this._markdown;
  set markdown(String? markdown) => _$this._markdown = markdown;

  GAssetUpdateOneInlineInputBuilder? _headerImage;
  GAssetUpdateOneInlineInputBuilder get headerImage =>
      _$this._headerImage ??= new GAssetUpdateOneInlineInputBuilder();
  set headerImage(GAssetUpdateOneInlineInputBuilder? headerImage) =>
      _$this._headerImage = headerImage;

  GCategoryUpdateManyInlineInputBuilder? _categories;
  GCategoryUpdateManyInlineInputBuilder get categories =>
      _$this._categories ??= new GCategoryUpdateManyInlineInputBuilder();
  set categories(GCategoryUpdateManyInlineInputBuilder? categories) =>
      _$this._categories = categories;

  GArticleUpdateInputBuilder();

  GArticleUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _subtitle = $v.subtitle;
      _body = $v.body?.toBuilder();
      _published = $v.published;
      _markdown = $v.markdown;
      _headerImage = $v.headerImage?.toBuilder();
      _categories = $v.categories?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateInput;
  }

  @override
  void update(void Function(GArticleUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateInput build() => _build();

  _$GArticleUpdateInput _build() {
    _$GArticleUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateInput._(
              title: title,
              subtitle: subtitle,
              body: _body?.build(),
              published: published,
              markdown: markdown,
              headerImage: _headerImage?.build(),
              categories: _categories?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'body';
        _body?.build();

        _$failedField = 'headerImage';
        _headerImage?.build();
        _$failedField = 'categories';
        _categories?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateManyInlineInput extends GArticleUpdateManyInlineInput {
  @override
  final BuiltList<GArticleCreateInput>? create;
  @override
  final BuiltList<GArticleConnectInput>? connect;
  @override
  final BuiltList<GArticleWhereUniqueInput>? set;
  @override
  final BuiltList<GArticleUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GArticleUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GArticleWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GArticleWhereUniqueInput>? delete;

  factory _$GArticleUpdateManyInlineInput(
          [void Function(GArticleUpdateManyInlineInputBuilder)? updates]) =>
      (new GArticleUpdateManyInlineInputBuilder()..update(updates))._build();

  _$GArticleUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GArticleUpdateManyInlineInput rebuild(
          void Function(GArticleUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateManyInlineInputBuilder toBuilder() =>
      new GArticleUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GArticleUpdateManyInlineInputBuilder
    implements
        Builder<GArticleUpdateManyInlineInput,
            GArticleUpdateManyInlineInputBuilder> {
  _$GArticleUpdateManyInlineInput? _$v;

  ListBuilder<GArticleCreateInput>? _create;
  ListBuilder<GArticleCreateInput> get create =>
      _$this._create ??= new ListBuilder<GArticleCreateInput>();
  set create(ListBuilder<GArticleCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GArticleConnectInput>? _connect;
  ListBuilder<GArticleConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GArticleConnectInput>();
  set connect(ListBuilder<GArticleConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GArticleWhereUniqueInput>? _set;
  ListBuilder<GArticleWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GArticleWhereUniqueInput>();
  set set(ListBuilder<GArticleWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GArticleUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GArticleUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GArticleUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GArticleUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GArticleUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GArticleUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GArticleUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GArticleUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GArticleWhereUniqueInput>? _disconnect;
  ListBuilder<GArticleWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GArticleWhereUniqueInput>();
  set disconnect(ListBuilder<GArticleWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GArticleWhereUniqueInput>? _delete;
  ListBuilder<GArticleWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GArticleWhereUniqueInput>();
  set delete(ListBuilder<GArticleWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GArticleUpdateManyInlineInputBuilder();

  GArticleUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateManyInlineInput;
  }

  @override
  void update(void Function(GArticleUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateManyInlineInput build() => _build();

  _$GArticleUpdateManyInlineInput _build() {
    _$GArticleUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateManyInput extends GArticleUpdateManyInput {
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final GRichTextAST? body;
  @override
  final bool? published;
  @override
  final String? markdown;

  factory _$GArticleUpdateManyInput(
          [void Function(GArticleUpdateManyInputBuilder)? updates]) =>
      (new GArticleUpdateManyInputBuilder()..update(updates))._build();

  _$GArticleUpdateManyInput._(
      {this.title, this.subtitle, this.body, this.published, this.markdown})
      : super._();

  @override
  GArticleUpdateManyInput rebuild(
          void Function(GArticleUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateManyInputBuilder toBuilder() =>
      new GArticleUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateManyInput &&
        title == other.title &&
        subtitle == other.subtitle &&
        body == other.body &&
        published == other.published &&
        markdown == other.markdown;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, subtitle.hashCode);
    _$hash = $jc(_$hash, body.hashCode);
    _$hash = $jc(_$hash, published.hashCode);
    _$hash = $jc(_$hash, markdown.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleUpdateManyInput')
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('body', body)
          ..add('published', published)
          ..add('markdown', markdown))
        .toString();
  }
}

class GArticleUpdateManyInputBuilder
    implements
        Builder<GArticleUpdateManyInput, GArticleUpdateManyInputBuilder> {
  _$GArticleUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  GRichTextASTBuilder? _body;
  GRichTextASTBuilder get body => _$this._body ??= new GRichTextASTBuilder();
  set body(GRichTextASTBuilder? body) => _$this._body = body;

  bool? _published;
  bool? get published => _$this._published;
  set published(bool? published) => _$this._published = published;

  String? _markdown;
  String? get markdown => _$this._markdown;
  set markdown(String? markdown) => _$this._markdown = markdown;

  GArticleUpdateManyInputBuilder();

  GArticleUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _subtitle = $v.subtitle;
      _body = $v.body?.toBuilder();
      _published = $v.published;
      _markdown = $v.markdown;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateManyInput;
  }

  @override
  void update(void Function(GArticleUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateManyInput build() => _build();

  _$GArticleUpdateManyInput _build() {
    _$GArticleUpdateManyInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateManyInput._(
              title: title,
              subtitle: subtitle,
              body: _body?.build(),
              published: published,
              markdown: markdown);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'body';
        _body?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateManyInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateManyWithNestedWhereInput
    extends GArticleUpdateManyWithNestedWhereInput {
  @override
  final GArticleWhereInput where;
  @override
  final GArticleUpdateManyInput data;

  factory _$GArticleUpdateManyWithNestedWhereInput(
          [void Function(GArticleUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GArticleUpdateManyWithNestedWhereInputBuilder()..update(updates))
          ._build();

  _$GArticleUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GArticleUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GArticleUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GArticleUpdateManyWithNestedWhereInput rebuild(
          void Function(GArticleUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GArticleUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GArticleUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GArticleUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GArticleUpdateManyWithNestedWhereInput,
            GArticleUpdateManyWithNestedWhereInputBuilder> {
  _$GArticleUpdateManyWithNestedWhereInput? _$v;

  GArticleWhereInputBuilder? _where;
  GArticleWhereInputBuilder get where =>
      _$this._where ??= new GArticleWhereInputBuilder();
  set where(GArticleWhereInputBuilder? where) => _$this._where = where;

  GArticleUpdateManyInputBuilder? _data;
  GArticleUpdateManyInputBuilder get data =>
      _$this._data ??= new GArticleUpdateManyInputBuilder();
  set data(GArticleUpdateManyInputBuilder? data) => _$this._data = data;

  GArticleUpdateManyWithNestedWhereInputBuilder();

  GArticleUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GArticleUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateManyWithNestedWhereInput build() => _build();

  _$GArticleUpdateManyWithNestedWhereInput _build() {
    _$GArticleUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateOneInlineInput extends GArticleUpdateOneInlineInput {
  @override
  final GArticleCreateInput? create;
  @override
  final GArticleUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GArticleUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GArticleWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GArticleUpdateOneInlineInput(
          [void Function(GArticleUpdateOneInlineInputBuilder)? updates]) =>
      (new GArticleUpdateOneInlineInputBuilder()..update(updates))._build();

  _$GArticleUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GArticleUpdateOneInlineInput rebuild(
          void Function(GArticleUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateOneInlineInputBuilder toBuilder() =>
      new GArticleUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GArticleUpdateOneInlineInputBuilder
    implements
        Builder<GArticleUpdateOneInlineInput,
            GArticleUpdateOneInlineInputBuilder> {
  _$GArticleUpdateOneInlineInput? _$v;

  GArticleCreateInputBuilder? _create;
  GArticleCreateInputBuilder get create =>
      _$this._create ??= new GArticleCreateInputBuilder();
  set create(GArticleCreateInputBuilder? create) => _$this._create = create;

  GArticleUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GArticleUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GArticleUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GArticleUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GArticleUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GArticleUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GArticleUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GArticleUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GArticleWhereUniqueInputBuilder? _connect;
  GArticleWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GArticleWhereUniqueInputBuilder();
  set connect(GArticleWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GArticleUpdateOneInlineInputBuilder();

  GArticleUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateOneInlineInput;
  }

  @override
  void update(void Function(GArticleUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateOneInlineInput build() => _build();

  _$GArticleUpdateOneInlineInput _build() {
    _$GArticleUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpdateWithNestedWhereUniqueInput
    extends GArticleUpdateWithNestedWhereUniqueInput {
  @override
  final GArticleWhereUniqueInput where;
  @override
  final GArticleUpdateInput data;

  factory _$GArticleUpdateWithNestedWhereUniqueInput(
          [void Function(GArticleUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GArticleUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GArticleUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GArticleUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GArticleUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GArticleUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GArticleUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GArticleUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GArticleUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GArticleUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GArticleUpdateWithNestedWhereUniqueInput,
            GArticleUpdateWithNestedWhereUniqueInputBuilder> {
  _$GArticleUpdateWithNestedWhereUniqueInput? _$v;

  GArticleWhereUniqueInputBuilder? _where;
  GArticleWhereUniqueInputBuilder get where =>
      _$this._where ??= new GArticleWhereUniqueInputBuilder();
  set where(GArticleWhereUniqueInputBuilder? where) => _$this._where = where;

  GArticleUpdateInputBuilder? _data;
  GArticleUpdateInputBuilder get data =>
      _$this._data ??= new GArticleUpdateInputBuilder();
  set data(GArticleUpdateInputBuilder? data) => _$this._data = data;

  GArticleUpdateWithNestedWhereUniqueInputBuilder();

  GArticleUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GArticleUpdateWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpdateWithNestedWhereUniqueInput build() => _build();

  _$GArticleUpdateWithNestedWhereUniqueInput _build() {
    _$GArticleUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpsertInput extends GArticleUpsertInput {
  @override
  final GArticleCreateInput create;
  @override
  final GArticleUpdateInput updateIt;

  factory _$GArticleUpsertInput(
          [void Function(GArticleUpsertInputBuilder)? updates]) =>
      (new GArticleUpsertInputBuilder()..update(updates))._build();

  _$GArticleUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, r'GArticleUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, r'GArticleUpsertInput', 'updateIt');
  }

  @override
  GArticleUpsertInput rebuild(
          void Function(GArticleUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpsertInputBuilder toBuilder() =>
      new GArticleUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GArticleUpsertInputBuilder
    implements Builder<GArticleUpsertInput, GArticleUpsertInputBuilder> {
  _$GArticleUpsertInput? _$v;

  GArticleCreateInputBuilder? _create;
  GArticleCreateInputBuilder get create =>
      _$this._create ??= new GArticleCreateInputBuilder();
  set create(GArticleCreateInputBuilder? create) => _$this._create = create;

  GArticleUpdateInputBuilder? _updateIt;
  GArticleUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GArticleUpdateInputBuilder();
  set updateIt(GArticleUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GArticleUpsertInputBuilder();

  GArticleUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpsertInput;
  }

  @override
  void update(void Function(GArticleUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpsertInput build() => _build();

  _$GArticleUpsertInput _build() {
    _$GArticleUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleUpsertWithNestedWhereUniqueInput
    extends GArticleUpsertWithNestedWhereUniqueInput {
  @override
  final GArticleWhereUniqueInput where;
  @override
  final GArticleUpsertInput data;

  factory _$GArticleUpsertWithNestedWhereUniqueInput(
          [void Function(GArticleUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GArticleUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GArticleUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GArticleUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GArticleUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GArticleUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GArticleUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GArticleUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GArticleUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GArticleUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GArticleUpsertWithNestedWhereUniqueInput,
            GArticleUpsertWithNestedWhereUniqueInputBuilder> {
  _$GArticleUpsertWithNestedWhereUniqueInput? _$v;

  GArticleWhereUniqueInputBuilder? _where;
  GArticleWhereUniqueInputBuilder get where =>
      _$this._where ??= new GArticleWhereUniqueInputBuilder();
  set where(GArticleWhereUniqueInputBuilder? where) => _$this._where = where;

  GArticleUpsertInputBuilder? _data;
  GArticleUpsertInputBuilder get data =>
      _$this._data ??= new GArticleUpsertInputBuilder();
  set data(GArticleUpsertInputBuilder? data) => _$this._data = data;

  GArticleUpsertWithNestedWhereUniqueInputBuilder();

  GArticleUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GArticleUpsertWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleUpsertWithNestedWhereUniqueInput build() => _build();

  _$GArticleUpsertWithNestedWhereUniqueInput _build() {
    _$GArticleUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleWhereComparatorInput extends GArticleWhereComparatorInput {
  @override
  final bool? outdated_to;

  factory _$GArticleWhereComparatorInput(
          [void Function(GArticleWhereComparatorInputBuilder)? updates]) =>
      (new GArticleWhereComparatorInputBuilder()..update(updates))._build();

  _$GArticleWhereComparatorInput._({this.outdated_to}) : super._();

  @override
  GArticleWhereComparatorInput rebuild(
          void Function(GArticleWhereComparatorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleWhereComparatorInputBuilder toBuilder() =>
      new GArticleWhereComparatorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleWhereComparatorInput &&
        outdated_to == other.outdated_to;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, outdated_to.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleWhereComparatorInput')
          ..add('outdated_to', outdated_to))
        .toString();
  }
}

class GArticleWhereComparatorInputBuilder
    implements
        Builder<GArticleWhereComparatorInput,
            GArticleWhereComparatorInputBuilder> {
  _$GArticleWhereComparatorInput? _$v;

  bool? _outdated_to;
  bool? get outdated_to => _$this._outdated_to;
  set outdated_to(bool? outdated_to) => _$this._outdated_to = outdated_to;

  GArticleWhereComparatorInputBuilder();

  GArticleWhereComparatorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _outdated_to = $v.outdated_to;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleWhereComparatorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleWhereComparatorInput;
  }

  @override
  void update(void Function(GArticleWhereComparatorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleWhereComparatorInput build() => _build();

  _$GArticleWhereComparatorInput _build() {
    final _$result =
        _$v ?? new _$GArticleWhereComparatorInput._(outdated_to: outdated_to);
    replace(_$result);
    return _$result;
  }
}

class _$GArticleWhereInput extends GArticleWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GArticleWhereInput>? AND;
  @override
  final BuiltList<GArticleWhereInput>? OR;
  @override
  final BuiltList<GArticleWhereInput>? NOT;
  @override
  final GArticleWhereStageInput? documentInStages_every;
  @override
  final GArticleWhereStageInput? documentInStages_some;
  @override
  final GArticleWhereStageInput? documentInStages_none;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final String? subtitle;
  @override
  final String? subtitle_not;
  @override
  final BuiltList<String?>? subtitle_in;
  @override
  final BuiltList<String?>? subtitle_not_in;
  @override
  final String? subtitle_contains;
  @override
  final String? subtitle_not_contains;
  @override
  final String? subtitle_starts_with;
  @override
  final String? subtitle_not_starts_with;
  @override
  final String? subtitle_ends_with;
  @override
  final String? subtitle_not_ends_with;
  @override
  final bool? published;
  @override
  final bool? published_not;
  @override
  final String? markdown;
  @override
  final String? markdown_not;
  @override
  final BuiltList<String?>? markdown_in;
  @override
  final BuiltList<String?>? markdown_not_in;
  @override
  final String? markdown_contains;
  @override
  final String? markdown_not_contains;
  @override
  final String? markdown_starts_with;
  @override
  final String? markdown_not_starts_with;
  @override
  final String? markdown_ends_with;
  @override
  final String? markdown_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GAssetWhereInput? headerImage;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final GCategoryWhereInput? categories_every;
  @override
  final GCategoryWhereInput? categories_some;
  @override
  final GCategoryWhereInput? categories_none;

  factory _$GArticleWhereInput(
          [void Function(GArticleWhereInputBuilder)? updates]) =>
      (new GArticleWhereInputBuilder()..update(updates))._build();

  _$GArticleWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.subtitle,
      this.subtitle_not,
      this.subtitle_in,
      this.subtitle_not_in,
      this.subtitle_contains,
      this.subtitle_not_contains,
      this.subtitle_starts_with,
      this.subtitle_not_starts_with,
      this.subtitle_ends_with,
      this.subtitle_not_ends_with,
      this.published,
      this.published_not,
      this.markdown,
      this.markdown_not,
      this.markdown_in,
      this.markdown_not_in,
      this.markdown_contains,
      this.markdown_not_contains,
      this.markdown_starts_with,
      this.markdown_not_starts_with,
      this.markdown_ends_with,
      this.markdown_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.headerImage,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.categories_every,
      this.categories_some,
      this.categories_none})
      : super._();

  @override
  GArticleWhereInput rebuild(
          void Function(GArticleWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleWhereInputBuilder toBuilder() =>
      new GArticleWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        subtitle == other.subtitle &&
        subtitle_not == other.subtitle_not &&
        subtitle_in == other.subtitle_in &&
        subtitle_not_in == other.subtitle_not_in &&
        subtitle_contains == other.subtitle_contains &&
        subtitle_not_contains == other.subtitle_not_contains &&
        subtitle_starts_with == other.subtitle_starts_with &&
        subtitle_not_starts_with == other.subtitle_not_starts_with &&
        subtitle_ends_with == other.subtitle_ends_with &&
        subtitle_not_ends_with == other.subtitle_not_ends_with &&
        published == other.published &&
        published_not == other.published_not &&
        markdown == other.markdown &&
        markdown_not == other.markdown_not &&
        markdown_in == other.markdown_in &&
        markdown_not_in == other.markdown_not_in &&
        markdown_contains == other.markdown_contains &&
        markdown_not_contains == other.markdown_not_contains &&
        markdown_starts_with == other.markdown_starts_with &&
        markdown_not_starts_with == other.markdown_not_starts_with &&
        markdown_ends_with == other.markdown_ends_with &&
        markdown_not_ends_with == other.markdown_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        headerImage == other.headerImage &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        categories_every == other.categories_every &&
        categories_some == other.categories_some &&
        categories_none == other.categories_none;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, subtitle.hashCode);
    _$hash = $jc(_$hash, subtitle_not.hashCode);
    _$hash = $jc(_$hash, subtitle_in.hashCode);
    _$hash = $jc(_$hash, subtitle_not_in.hashCode);
    _$hash = $jc(_$hash, subtitle_contains.hashCode);
    _$hash = $jc(_$hash, subtitle_not_contains.hashCode);
    _$hash = $jc(_$hash, subtitle_starts_with.hashCode);
    _$hash = $jc(_$hash, subtitle_not_starts_with.hashCode);
    _$hash = $jc(_$hash, subtitle_ends_with.hashCode);
    _$hash = $jc(_$hash, subtitle_not_ends_with.hashCode);
    _$hash = $jc(_$hash, published.hashCode);
    _$hash = $jc(_$hash, published_not.hashCode);
    _$hash = $jc(_$hash, markdown.hashCode);
    _$hash = $jc(_$hash, markdown_not.hashCode);
    _$hash = $jc(_$hash, markdown_in.hashCode);
    _$hash = $jc(_$hash, markdown_not_in.hashCode);
    _$hash = $jc(_$hash, markdown_contains.hashCode);
    _$hash = $jc(_$hash, markdown_not_contains.hashCode);
    _$hash = $jc(_$hash, markdown_starts_with.hashCode);
    _$hash = $jc(_$hash, markdown_not_starts_with.hashCode);
    _$hash = $jc(_$hash, markdown_ends_with.hashCode);
    _$hash = $jc(_$hash, markdown_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, headerImage.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, categories_every.hashCode);
    _$hash = $jc(_$hash, categories_some.hashCode);
    _$hash = $jc(_$hash, categories_none.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('subtitle', subtitle)
          ..add('subtitle_not', subtitle_not)
          ..add('subtitle_in', subtitle_in)
          ..add('subtitle_not_in', subtitle_not_in)
          ..add('subtitle_contains', subtitle_contains)
          ..add('subtitle_not_contains', subtitle_not_contains)
          ..add('subtitle_starts_with', subtitle_starts_with)
          ..add('subtitle_not_starts_with', subtitle_not_starts_with)
          ..add('subtitle_ends_with', subtitle_ends_with)
          ..add('subtitle_not_ends_with', subtitle_not_ends_with)
          ..add('published', published)
          ..add('published_not', published_not)
          ..add('markdown', markdown)
          ..add('markdown_not', markdown_not)
          ..add('markdown_in', markdown_in)
          ..add('markdown_not_in', markdown_not_in)
          ..add('markdown_contains', markdown_contains)
          ..add('markdown_not_contains', markdown_not_contains)
          ..add('markdown_starts_with', markdown_starts_with)
          ..add('markdown_not_starts_with', markdown_not_starts_with)
          ..add('markdown_ends_with', markdown_ends_with)
          ..add('markdown_not_ends_with', markdown_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('headerImage', headerImage)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('categories_every', categories_every)
          ..add('categories_some', categories_some)
          ..add('categories_none', categories_none))
        .toString();
  }
}

class GArticleWhereInputBuilder
    implements Builder<GArticleWhereInput, GArticleWhereInputBuilder> {
  _$GArticleWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GArticleWhereInput>? _AND;
  ListBuilder<GArticleWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GArticleWhereInput>();
  set AND(ListBuilder<GArticleWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GArticleWhereInput>? _OR;
  ListBuilder<GArticleWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GArticleWhereInput>();
  set OR(ListBuilder<GArticleWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GArticleWhereInput>? _NOT;
  ListBuilder<GArticleWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GArticleWhereInput>();
  set NOT(ListBuilder<GArticleWhereInput>? NOT) => _$this._NOT = NOT;

  GArticleWhereStageInputBuilder? _documentInStages_every;
  GArticleWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GArticleWhereStageInputBuilder();
  set documentInStages_every(
          GArticleWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GArticleWhereStageInputBuilder? _documentInStages_some;
  GArticleWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GArticleWhereStageInputBuilder();
  set documentInStages_some(
          GArticleWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GArticleWhereStageInputBuilder? _documentInStages_none;
  GArticleWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GArticleWhereStageInputBuilder();
  set documentInStages_none(
          GArticleWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _subtitle_not;
  String? get subtitle_not => _$this._subtitle_not;
  set subtitle_not(String? subtitle_not) => _$this._subtitle_not = subtitle_not;

  ListBuilder<String?>? _subtitle_in;
  ListBuilder<String?> get subtitle_in =>
      _$this._subtitle_in ??= new ListBuilder<String?>();
  set subtitle_in(ListBuilder<String?>? subtitle_in) =>
      _$this._subtitle_in = subtitle_in;

  ListBuilder<String?>? _subtitle_not_in;
  ListBuilder<String?> get subtitle_not_in =>
      _$this._subtitle_not_in ??= new ListBuilder<String?>();
  set subtitle_not_in(ListBuilder<String?>? subtitle_not_in) =>
      _$this._subtitle_not_in = subtitle_not_in;

  String? _subtitle_contains;
  String? get subtitle_contains => _$this._subtitle_contains;
  set subtitle_contains(String? subtitle_contains) =>
      _$this._subtitle_contains = subtitle_contains;

  String? _subtitle_not_contains;
  String? get subtitle_not_contains => _$this._subtitle_not_contains;
  set subtitle_not_contains(String? subtitle_not_contains) =>
      _$this._subtitle_not_contains = subtitle_not_contains;

  String? _subtitle_starts_with;
  String? get subtitle_starts_with => _$this._subtitle_starts_with;
  set subtitle_starts_with(String? subtitle_starts_with) =>
      _$this._subtitle_starts_with = subtitle_starts_with;

  String? _subtitle_not_starts_with;
  String? get subtitle_not_starts_with => _$this._subtitle_not_starts_with;
  set subtitle_not_starts_with(String? subtitle_not_starts_with) =>
      _$this._subtitle_not_starts_with = subtitle_not_starts_with;

  String? _subtitle_ends_with;
  String? get subtitle_ends_with => _$this._subtitle_ends_with;
  set subtitle_ends_with(String? subtitle_ends_with) =>
      _$this._subtitle_ends_with = subtitle_ends_with;

  String? _subtitle_not_ends_with;
  String? get subtitle_not_ends_with => _$this._subtitle_not_ends_with;
  set subtitle_not_ends_with(String? subtitle_not_ends_with) =>
      _$this._subtitle_not_ends_with = subtitle_not_ends_with;

  bool? _published;
  bool? get published => _$this._published;
  set published(bool? published) => _$this._published = published;

  bool? _published_not;
  bool? get published_not => _$this._published_not;
  set published_not(bool? published_not) =>
      _$this._published_not = published_not;

  String? _markdown;
  String? get markdown => _$this._markdown;
  set markdown(String? markdown) => _$this._markdown = markdown;

  String? _markdown_not;
  String? get markdown_not => _$this._markdown_not;
  set markdown_not(String? markdown_not) => _$this._markdown_not = markdown_not;

  ListBuilder<String?>? _markdown_in;
  ListBuilder<String?> get markdown_in =>
      _$this._markdown_in ??= new ListBuilder<String?>();
  set markdown_in(ListBuilder<String?>? markdown_in) =>
      _$this._markdown_in = markdown_in;

  ListBuilder<String?>? _markdown_not_in;
  ListBuilder<String?> get markdown_not_in =>
      _$this._markdown_not_in ??= new ListBuilder<String?>();
  set markdown_not_in(ListBuilder<String?>? markdown_not_in) =>
      _$this._markdown_not_in = markdown_not_in;

  String? _markdown_contains;
  String? get markdown_contains => _$this._markdown_contains;
  set markdown_contains(String? markdown_contains) =>
      _$this._markdown_contains = markdown_contains;

  String? _markdown_not_contains;
  String? get markdown_not_contains => _$this._markdown_not_contains;
  set markdown_not_contains(String? markdown_not_contains) =>
      _$this._markdown_not_contains = markdown_not_contains;

  String? _markdown_starts_with;
  String? get markdown_starts_with => _$this._markdown_starts_with;
  set markdown_starts_with(String? markdown_starts_with) =>
      _$this._markdown_starts_with = markdown_starts_with;

  String? _markdown_not_starts_with;
  String? get markdown_not_starts_with => _$this._markdown_not_starts_with;
  set markdown_not_starts_with(String? markdown_not_starts_with) =>
      _$this._markdown_not_starts_with = markdown_not_starts_with;

  String? _markdown_ends_with;
  String? get markdown_ends_with => _$this._markdown_ends_with;
  set markdown_ends_with(String? markdown_ends_with) =>
      _$this._markdown_ends_with = markdown_ends_with;

  String? _markdown_not_ends_with;
  String? get markdown_not_ends_with => _$this._markdown_not_ends_with;
  set markdown_not_ends_with(String? markdown_not_ends_with) =>
      _$this._markdown_not_ends_with = markdown_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GAssetWhereInputBuilder? _headerImage;
  GAssetWhereInputBuilder get headerImage =>
      _$this._headerImage ??= new GAssetWhereInputBuilder();
  set headerImage(GAssetWhereInputBuilder? headerImage) =>
      _$this._headerImage = headerImage;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  GCategoryWhereInputBuilder? _categories_every;
  GCategoryWhereInputBuilder get categories_every =>
      _$this._categories_every ??= new GCategoryWhereInputBuilder();
  set categories_every(GCategoryWhereInputBuilder? categories_every) =>
      _$this._categories_every = categories_every;

  GCategoryWhereInputBuilder? _categories_some;
  GCategoryWhereInputBuilder get categories_some =>
      _$this._categories_some ??= new GCategoryWhereInputBuilder();
  set categories_some(GCategoryWhereInputBuilder? categories_some) =>
      _$this._categories_some = categories_some;

  GCategoryWhereInputBuilder? _categories_none;
  GCategoryWhereInputBuilder get categories_none =>
      _$this._categories_none ??= new GCategoryWhereInputBuilder();
  set categories_none(GCategoryWhereInputBuilder? categories_none) =>
      _$this._categories_none = categories_none;

  GArticleWhereInputBuilder();

  GArticleWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _subtitle = $v.subtitle;
      _subtitle_not = $v.subtitle_not;
      _subtitle_in = $v.subtitle_in?.toBuilder();
      _subtitle_not_in = $v.subtitle_not_in?.toBuilder();
      _subtitle_contains = $v.subtitle_contains;
      _subtitle_not_contains = $v.subtitle_not_contains;
      _subtitle_starts_with = $v.subtitle_starts_with;
      _subtitle_not_starts_with = $v.subtitle_not_starts_with;
      _subtitle_ends_with = $v.subtitle_ends_with;
      _subtitle_not_ends_with = $v.subtitle_not_ends_with;
      _published = $v.published;
      _published_not = $v.published_not;
      _markdown = $v.markdown;
      _markdown_not = $v.markdown_not;
      _markdown_in = $v.markdown_in?.toBuilder();
      _markdown_not_in = $v.markdown_not_in?.toBuilder();
      _markdown_contains = $v.markdown_contains;
      _markdown_not_contains = $v.markdown_not_contains;
      _markdown_starts_with = $v.markdown_starts_with;
      _markdown_not_starts_with = $v.markdown_not_starts_with;
      _markdown_ends_with = $v.markdown_ends_with;
      _markdown_not_ends_with = $v.markdown_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _headerImage = $v.headerImage?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _categories_every = $v.categories_every?.toBuilder();
      _categories_some = $v.categories_some?.toBuilder();
      _categories_none = $v.categories_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleWhereInput;
  }

  @override
  void update(void Function(GArticleWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleWhereInput build() => _build();

  _$GArticleWhereInput _build() {
    _$GArticleWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              subtitle: subtitle,
              subtitle_not: subtitle_not,
              subtitle_in: _subtitle_in?.build(),
              subtitle_not_in: _subtitle_not_in?.build(),
              subtitle_contains: subtitle_contains,
              subtitle_not_contains: subtitle_not_contains,
              subtitle_starts_with: subtitle_starts_with,
              subtitle_not_starts_with: subtitle_not_starts_with,
              subtitle_ends_with: subtitle_ends_with,
              subtitle_not_ends_with: subtitle_not_ends_with,
              published: published,
              published_not: published_not,
              markdown: markdown,
              markdown_not: markdown_not,
              markdown_in: _markdown_in?.build(),
              markdown_not_in: _markdown_not_in?.build(),
              markdown_contains: markdown_contains,
              markdown_not_contains: markdown_not_contains,
              markdown_starts_with: markdown_starts_with,
              markdown_not_starts_with: markdown_not_starts_with,
              markdown_ends_with: markdown_ends_with,
              markdown_not_ends_with: markdown_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              headerImage: _headerImage?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              categories_every: _categories_every?.build(),
              categories_some: _categories_some?.build(),
              categories_none: _categories_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();
        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'subtitle_in';
        _subtitle_in?.build();
        _$failedField = 'subtitle_not_in';
        _subtitle_not_in?.build();

        _$failedField = 'markdown_in';
        _markdown_in?.build();
        _$failedField = 'markdown_not_in';
        _markdown_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'headerImage';
        _headerImage?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();
        _$failedField = 'categories_every';
        _categories_every?.build();
        _$failedField = 'categories_some';
        _categories_some?.build();
        _$failedField = 'categories_none';
        _categories_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleWhereStageInput extends GArticleWhereStageInput {
  @override
  final BuiltList<GArticleWhereStageInput>? AND;
  @override
  final BuiltList<GArticleWhereStageInput>? OR;
  @override
  final BuiltList<GArticleWhereStageInput>? NOT;
  @override
  final GStage? stage;
  @override
  final GArticleWhereComparatorInput? compareWithParent;

  factory _$GArticleWhereStageInput(
          [void Function(GArticleWhereStageInputBuilder)? updates]) =>
      (new GArticleWhereStageInputBuilder()..update(updates))._build();

  _$GArticleWhereStageInput._(
      {this.AND, this.OR, this.NOT, this.stage, this.compareWithParent})
      : super._();

  @override
  GArticleWhereStageInput rebuild(
          void Function(GArticleWhereStageInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleWhereStageInputBuilder toBuilder() =>
      new GArticleWhereStageInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleWhereStageInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        stage == other.stage &&
        compareWithParent == other.compareWithParent;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, compareWithParent.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleWhereStageInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('stage', stage)
          ..add('compareWithParent', compareWithParent))
        .toString();
  }
}

class GArticleWhereStageInputBuilder
    implements
        Builder<GArticleWhereStageInput, GArticleWhereStageInputBuilder> {
  _$GArticleWhereStageInput? _$v;

  ListBuilder<GArticleWhereStageInput>? _AND;
  ListBuilder<GArticleWhereStageInput> get AND =>
      _$this._AND ??= new ListBuilder<GArticleWhereStageInput>();
  set AND(ListBuilder<GArticleWhereStageInput>? AND) => _$this._AND = AND;

  ListBuilder<GArticleWhereStageInput>? _OR;
  ListBuilder<GArticleWhereStageInput> get OR =>
      _$this._OR ??= new ListBuilder<GArticleWhereStageInput>();
  set OR(ListBuilder<GArticleWhereStageInput>? OR) => _$this._OR = OR;

  ListBuilder<GArticleWhereStageInput>? _NOT;
  ListBuilder<GArticleWhereStageInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GArticleWhereStageInput>();
  set NOT(ListBuilder<GArticleWhereStageInput>? NOT) => _$this._NOT = NOT;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  GArticleWhereComparatorInputBuilder? _compareWithParent;
  GArticleWhereComparatorInputBuilder get compareWithParent =>
      _$this._compareWithParent ??= new GArticleWhereComparatorInputBuilder();
  set compareWithParent(
          GArticleWhereComparatorInputBuilder? compareWithParent) =>
      _$this._compareWithParent = compareWithParent;

  GArticleWhereStageInputBuilder();

  GArticleWhereStageInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _stage = $v.stage;
      _compareWithParent = $v.compareWithParent?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleWhereStageInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleWhereStageInput;
  }

  @override
  void update(void Function(GArticleWhereStageInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleWhereStageInput build() => _build();

  _$GArticleWhereStageInput _build() {
    _$GArticleWhereStageInput _$result;
    try {
      _$result = _$v ??
          new _$GArticleWhereStageInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              stage: stage,
              compareWithParent: _compareWithParent?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'compareWithParent';
        _compareWithParent?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GArticleWhereStageInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GArticleWhereUniqueInput extends GArticleWhereUniqueInput {
  @override
  final String? id;

  factory _$GArticleWhereUniqueInput(
          [void Function(GArticleWhereUniqueInputBuilder)? updates]) =>
      (new GArticleWhereUniqueInputBuilder()..update(updates))._build();

  _$GArticleWhereUniqueInput._({this.id}) : super._();

  @override
  GArticleWhereUniqueInput rebuild(
          void Function(GArticleWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GArticleWhereUniqueInputBuilder toBuilder() =>
      new GArticleWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GArticleWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GArticleWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GArticleWhereUniqueInputBuilder
    implements
        Builder<GArticleWhereUniqueInput, GArticleWhereUniqueInputBuilder> {
  _$GArticleWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GArticleWhereUniqueInputBuilder();

  GArticleWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GArticleWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GArticleWhereUniqueInput;
  }

  @override
  void update(void Function(GArticleWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GArticleWhereUniqueInput build() => _build();

  _$GArticleWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GArticleWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetConnectInput extends GAssetConnectInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GAssetConnectInput(
          [void Function(GAssetConnectInputBuilder)? updates]) =>
      (new GAssetConnectInputBuilder()..update(updates))._build();

  _$GAssetConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GAssetConnectInput', 'where');
  }

  @override
  GAssetConnectInput rebuild(
          void Function(GAssetConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetConnectInputBuilder toBuilder() =>
      new GAssetConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GAssetConnectInputBuilder
    implements Builder<GAssetConnectInput, GAssetConnectInputBuilder> {
  _$GAssetConnectInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GAssetConnectInputBuilder();

  GAssetConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetConnectInput;
  }

  @override
  void update(void Function(GAssetConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetConnectInput build() => _build();

  _$GAssetConnectInput _build() {
    _$GAssetConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateInput extends GAssetCreateInput {
  @override
  final String? fileName;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? createdAt;
  @override
  final GArticleCreateManyInlineInput? headerImageArticle;
  @override
  final String? uploadUrl;
  @override
  final GAssetCreateLocalizationsInput? localizations;

  factory _$GAssetCreateInput(
          [void Function(GAssetCreateInputBuilder)? updates]) =>
      (new GAssetCreateInputBuilder()..update(updates))._build();

  _$GAssetCreateInput._(
      {this.fileName,
      this.updatedAt,
      this.createdAt,
      this.headerImageArticle,
      this.uploadUrl,
      this.localizations})
      : super._();

  @override
  GAssetCreateInput rebuild(void Function(GAssetCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateInputBuilder toBuilder() =>
      new GAssetCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateInput &&
        fileName == other.fileName &&
        updatedAt == other.updatedAt &&
        createdAt == other.createdAt &&
        headerImageArticle == other.headerImageArticle &&
        uploadUrl == other.uploadUrl &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, headerImageArticle.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jc(_$hash, localizations.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateInput')
          ..add('fileName', fileName)
          ..add('updatedAt', updatedAt)
          ..add('createdAt', createdAt)
          ..add('headerImageArticle', headerImageArticle)
          ..add('uploadUrl', uploadUrl)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetCreateInputBuilder
    implements Builder<GAssetCreateInput, GAssetCreateInputBuilder> {
  _$GAssetCreateInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GArticleCreateManyInlineInputBuilder? _headerImageArticle;
  GArticleCreateManyInlineInputBuilder get headerImageArticle =>
      _$this._headerImageArticle ??= new GArticleCreateManyInlineInputBuilder();
  set headerImageArticle(
          GArticleCreateManyInlineInputBuilder? headerImageArticle) =>
      _$this._headerImageArticle = headerImageArticle;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetCreateLocalizationsInputBuilder? _localizations;
  GAssetCreateLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetCreateLocalizationsInputBuilder();
  set localizations(GAssetCreateLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetCreateInputBuilder();

  GAssetCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _updatedAt = $v.updatedAt?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _headerImageArticle = $v.headerImageArticle?.toBuilder();
      _uploadUrl = $v.uploadUrl;
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateInput;
  }

  @override
  void update(void Function(GAssetCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateInput build() => _build();

  _$GAssetCreateInput _build() {
    _$GAssetCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateInput._(
              fileName: fileName,
              updatedAt: _updatedAt?.build(),
              createdAt: _createdAt?.build(),
              headerImageArticle: _headerImageArticle?.build(),
              uploadUrl: uploadUrl,
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'headerImageArticle';
        _headerImageArticle?.build();

        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationDataInput
    extends GAssetCreateLocalizationDataInput {
  @override
  final String? fileName;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? createdAt;
  @override
  final String? uploadUrl;

  factory _$GAssetCreateLocalizationDataInput(
          [void Function(GAssetCreateLocalizationDataInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationDataInputBuilder()..update(updates))
          ._build();

  _$GAssetCreateLocalizationDataInput._(
      {this.fileName, this.updatedAt, this.createdAt, this.uploadUrl})
      : super._();

  @override
  GAssetCreateLocalizationDataInput rebuild(
          void Function(GAssetCreateLocalizationDataInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationDataInputBuilder toBuilder() =>
      new GAssetCreateLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationDataInput &&
        fileName == other.fileName &&
        updatedAt == other.updatedAt &&
        createdAt == other.createdAt &&
        uploadUrl == other.uploadUrl;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateLocalizationDataInput')
          ..add('fileName', fileName)
          ..add('updatedAt', updatedAt)
          ..add('createdAt', createdAt)
          ..add('uploadUrl', uploadUrl))
        .toString();
  }
}

class GAssetCreateLocalizationDataInputBuilder
    implements
        Builder<GAssetCreateLocalizationDataInput,
            GAssetCreateLocalizationDataInputBuilder> {
  _$GAssetCreateLocalizationDataInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetCreateLocalizationDataInputBuilder();

  GAssetCreateLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _updatedAt = $v.updatedAt?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _uploadUrl = $v.uploadUrl;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetCreateLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateLocalizationDataInput build() => _build();

  _$GAssetCreateLocalizationDataInput _build() {
    _$GAssetCreateLocalizationDataInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateLocalizationDataInput._(
              fileName: fileName,
              updatedAt: _updatedAt?.build(),
              createdAt: _createdAt?.build(),
              uploadUrl: uploadUrl);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateLocalizationDataInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationInput extends GAssetCreateLocalizationInput {
  @override
  final GAssetCreateLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetCreateLocalizationInput(
          [void Function(GAssetCreateLocalizationInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationInputBuilder()..update(updates))._build();

  _$GAssetCreateLocalizationInput._({required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetCreateLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GAssetCreateLocalizationInput', 'locale');
  }

  @override
  GAssetCreateLocalizationInput rebuild(
          void Function(GAssetCreateLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationInputBuilder toBuilder() =>
      new GAssetCreateLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetCreateLocalizationInputBuilder
    implements
        Builder<GAssetCreateLocalizationInput,
            GAssetCreateLocalizationInputBuilder> {
  _$GAssetCreateLocalizationInput? _$v;

  GAssetCreateLocalizationDataInputBuilder? _data;
  GAssetCreateLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetCreateLocalizationDataInputBuilder();
  set data(GAssetCreateLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetCreateLocalizationInputBuilder();

  GAssetCreateLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationInput;
  }

  @override
  void update(void Function(GAssetCreateLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateLocalizationInput build() => _build();

  _$GAssetCreateLocalizationInput _build() {
    _$GAssetCreateLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GAssetCreateLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationsInput extends GAssetCreateLocalizationsInput {
  @override
  final BuiltList<GAssetCreateLocalizationInput>? create;

  factory _$GAssetCreateLocalizationsInput(
          [void Function(GAssetCreateLocalizationsInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationsInputBuilder()..update(updates))._build();

  _$GAssetCreateLocalizationsInput._({this.create}) : super._();

  @override
  GAssetCreateLocalizationsInput rebuild(
          void Function(GAssetCreateLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationsInputBuilder toBuilder() =>
      new GAssetCreateLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationsInput && create == other.create;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateLocalizationsInput')
          ..add('create', create))
        .toString();
  }
}

class GAssetCreateLocalizationsInputBuilder
    implements
        Builder<GAssetCreateLocalizationsInput,
            GAssetCreateLocalizationsInputBuilder> {
  _$GAssetCreateLocalizationsInput? _$v;

  ListBuilder<GAssetCreateLocalizationInput>? _create;
  ListBuilder<GAssetCreateLocalizationInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateLocalizationInput>();
  set create(ListBuilder<GAssetCreateLocalizationInput>? create) =>
      _$this._create = create;

  GAssetCreateLocalizationsInputBuilder();

  GAssetCreateLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationsInput;
  }

  @override
  void update(void Function(GAssetCreateLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateLocalizationsInput build() => _build();

  _$GAssetCreateLocalizationsInput _build() {
    _$GAssetCreateLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateLocalizationsInput._(create: _create?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateManyInlineInput extends GAssetCreateManyInlineInput {
  @override
  final BuiltList<GAssetCreateInput>? create;
  @override
  final BuiltList<GAssetWhereUniqueInput>? connect;

  factory _$GAssetCreateManyInlineInput(
          [void Function(GAssetCreateManyInlineInputBuilder)? updates]) =>
      (new GAssetCreateManyInlineInputBuilder()..update(updates))._build();

  _$GAssetCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GAssetCreateManyInlineInput rebuild(
          void Function(GAssetCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateManyInlineInputBuilder toBuilder() =>
      new GAssetCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GAssetCreateManyInlineInputBuilder
    implements
        Builder<GAssetCreateManyInlineInput,
            GAssetCreateManyInlineInputBuilder> {
  _$GAssetCreateManyInlineInput? _$v;

  ListBuilder<GAssetCreateInput>? _create;
  ListBuilder<GAssetCreateInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateInput>();
  set create(ListBuilder<GAssetCreateInput>? create) => _$this._create = create;

  ListBuilder<GAssetWhereUniqueInput>? _connect;
  ListBuilder<GAssetWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GAssetWhereUniqueInput>();
  set connect(ListBuilder<GAssetWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GAssetCreateManyInlineInputBuilder();

  GAssetCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateManyInlineInput;
  }

  @override
  void update(void Function(GAssetCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateManyInlineInput build() => _build();

  _$GAssetCreateManyInlineInput _build() {
    _$GAssetCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateOneInlineInput extends GAssetCreateOneInlineInput {
  @override
  final GAssetCreateInput? create;
  @override
  final GAssetWhereUniqueInput? connect;

  factory _$GAssetCreateOneInlineInput(
          [void Function(GAssetCreateOneInlineInputBuilder)? updates]) =>
      (new GAssetCreateOneInlineInputBuilder()..update(updates))._build();

  _$GAssetCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GAssetCreateOneInlineInput rebuild(
          void Function(GAssetCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateOneInlineInputBuilder toBuilder() =>
      new GAssetCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GAssetCreateOneInlineInputBuilder
    implements
        Builder<GAssetCreateOneInlineInput, GAssetCreateOneInlineInputBuilder> {
  _$GAssetCreateOneInlineInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetWhereUniqueInputBuilder? _connect;
  GAssetWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GAssetWhereUniqueInputBuilder();
  set connect(GAssetWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GAssetCreateOneInlineInputBuilder();

  GAssetCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateOneInlineInput;
  }

  @override
  void update(void Function(GAssetCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetCreateOneInlineInput build() => _build();

  _$GAssetCreateOneInlineInput _build() {
    _$GAssetCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetManyWhereInput extends GAssetManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GAssetWhereInput>? AND;
  @override
  final BuiltList<GAssetWhereInput>? OR;
  @override
  final BuiltList<GAssetWhereInput>? NOT;
  @override
  final GAssetWhereStageInput? documentInStages_every;
  @override
  final GAssetWhereStageInput? documentInStages_some;
  @override
  final GAssetWhereStageInput? documentInStages_none;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GArticleWhereInput? headerImageArticle_every;
  @override
  final GArticleWhereInput? headerImageArticle_some;
  @override
  final GArticleWhereInput? headerImageArticle_none;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final GAssetUploadWhereInput? upload;

  factory _$GAssetManyWhereInput(
          [void Function(GAssetManyWhereInputBuilder)? updates]) =>
      (new GAssetManyWhereInputBuilder()..update(updates))._build();

  _$GAssetManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.headerImageArticle_every,
      this.headerImageArticle_some,
      this.headerImageArticle_none,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.upload})
      : super._();

  @override
  GAssetManyWhereInput rebuild(
          void Function(GAssetManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetManyWhereInputBuilder toBuilder() =>
      new GAssetManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        headerImageArticle_every == other.headerImageArticle_every &&
        headerImageArticle_some == other.headerImageArticle_some &&
        headerImageArticle_none == other.headerImageArticle_none &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        upload == other.upload;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_every.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_some.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_none.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, upload.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('headerImageArticle_every', headerImageArticle_every)
          ..add('headerImageArticle_some', headerImageArticle_some)
          ..add('headerImageArticle_none', headerImageArticle_none)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('upload', upload))
        .toString();
  }
}

class GAssetManyWhereInputBuilder
    implements Builder<GAssetManyWhereInput, GAssetManyWhereInputBuilder> {
  _$GAssetManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GAssetWhereInput>? _AND;
  ListBuilder<GAssetWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetWhereInput>();
  set AND(ListBuilder<GAssetWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetWhereInput>? _OR;
  ListBuilder<GAssetWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetWhereInput>();
  set OR(ListBuilder<GAssetWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetWhereInput>? _NOT;
  ListBuilder<GAssetWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetWhereInput>();
  set NOT(ListBuilder<GAssetWhereInput>? NOT) => _$this._NOT = NOT;

  GAssetWhereStageInputBuilder? _documentInStages_every;
  GAssetWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GAssetWhereStageInputBuilder();
  set documentInStages_every(
          GAssetWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GAssetWhereStageInputBuilder? _documentInStages_some;
  GAssetWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GAssetWhereStageInputBuilder();
  set documentInStages_some(
          GAssetWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GAssetWhereStageInputBuilder? _documentInStages_none;
  GAssetWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GAssetWhereStageInputBuilder();
  set documentInStages_none(
          GAssetWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GArticleWhereInputBuilder? _headerImageArticle_every;
  GArticleWhereInputBuilder get headerImageArticle_every =>
      _$this._headerImageArticle_every ??= new GArticleWhereInputBuilder();
  set headerImageArticle_every(
          GArticleWhereInputBuilder? headerImageArticle_every) =>
      _$this._headerImageArticle_every = headerImageArticle_every;

  GArticleWhereInputBuilder? _headerImageArticle_some;
  GArticleWhereInputBuilder get headerImageArticle_some =>
      _$this._headerImageArticle_some ??= new GArticleWhereInputBuilder();
  set headerImageArticle_some(
          GArticleWhereInputBuilder? headerImageArticle_some) =>
      _$this._headerImageArticle_some = headerImageArticle_some;

  GArticleWhereInputBuilder? _headerImageArticle_none;
  GArticleWhereInputBuilder get headerImageArticle_none =>
      _$this._headerImageArticle_none ??= new GArticleWhereInputBuilder();
  set headerImageArticle_none(
          GArticleWhereInputBuilder? headerImageArticle_none) =>
      _$this._headerImageArticle_none = headerImageArticle_none;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  GAssetUploadWhereInputBuilder? _upload;
  GAssetUploadWhereInputBuilder get upload =>
      _$this._upload ??= new GAssetUploadWhereInputBuilder();
  set upload(GAssetUploadWhereInputBuilder? upload) => _$this._upload = upload;

  GAssetManyWhereInputBuilder();

  GAssetManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _headerImageArticle_every = $v.headerImageArticle_every?.toBuilder();
      _headerImageArticle_some = $v.headerImageArticle_some?.toBuilder();
      _headerImageArticle_none = $v.headerImageArticle_none?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _upload = $v.upload?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetManyWhereInput;
  }

  @override
  void update(void Function(GAssetManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetManyWhereInput build() => _build();

  _$GAssetManyWhereInput _build() {
    _$GAssetManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              headerImageArticle_every: _headerImageArticle_every?.build(),
              headerImageArticle_some: _headerImageArticle_some?.build(),
              headerImageArticle_none: _headerImageArticle_none?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              upload: _upload?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();
        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'headerImageArticle_every';
        _headerImageArticle_every?.build();
        _$failedField = 'headerImageArticle_some';
        _headerImageArticle_some?.build();
        _$failedField = 'headerImageArticle_none';
        _headerImageArticle_none?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();
        _$failedField = 'upload';
        _upload?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetSingleRelationWhereInput extends GAssetSingleRelationWhereInput {
  @override
  final BuiltList<GAssetSingleRelationWhereInput>? AND;
  @override
  final BuiltList<GAssetSingleRelationWhereInput>? OR;
  @override
  final BuiltList<GAssetSingleRelationWhereInput>? NOT;
  @override
  final GAssetUploadWhereInput? upload;

  factory _$GAssetSingleRelationWhereInput(
          [void Function(GAssetSingleRelationWhereInputBuilder)? updates]) =>
      (new GAssetSingleRelationWhereInputBuilder()..update(updates))._build();

  _$GAssetSingleRelationWhereInput._({this.AND, this.OR, this.NOT, this.upload})
      : super._();

  @override
  GAssetSingleRelationWhereInput rebuild(
          void Function(GAssetSingleRelationWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetSingleRelationWhereInputBuilder toBuilder() =>
      new GAssetSingleRelationWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetSingleRelationWhereInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        upload == other.upload;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, upload.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetSingleRelationWhereInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('upload', upload))
        .toString();
  }
}

class GAssetSingleRelationWhereInputBuilder
    implements
        Builder<GAssetSingleRelationWhereInput,
            GAssetSingleRelationWhereInputBuilder> {
  _$GAssetSingleRelationWhereInput? _$v;

  ListBuilder<GAssetSingleRelationWhereInput>? _AND;
  ListBuilder<GAssetSingleRelationWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetSingleRelationWhereInput>();
  set AND(ListBuilder<GAssetSingleRelationWhereInput>? AND) =>
      _$this._AND = AND;

  ListBuilder<GAssetSingleRelationWhereInput>? _OR;
  ListBuilder<GAssetSingleRelationWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetSingleRelationWhereInput>();
  set OR(ListBuilder<GAssetSingleRelationWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetSingleRelationWhereInput>? _NOT;
  ListBuilder<GAssetSingleRelationWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetSingleRelationWhereInput>();
  set NOT(ListBuilder<GAssetSingleRelationWhereInput>? NOT) =>
      _$this._NOT = NOT;

  GAssetUploadWhereInputBuilder? _upload;
  GAssetUploadWhereInputBuilder get upload =>
      _$this._upload ??= new GAssetUploadWhereInputBuilder();
  set upload(GAssetUploadWhereInputBuilder? upload) => _$this._upload = upload;

  GAssetSingleRelationWhereInputBuilder();

  GAssetSingleRelationWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _upload = $v.upload?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetSingleRelationWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetSingleRelationWhereInput;
  }

  @override
  void update(void Function(GAssetSingleRelationWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetSingleRelationWhereInput build() => _build();

  _$GAssetSingleRelationWhereInput _build() {
    _$GAssetSingleRelationWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetSingleRelationWhereInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              upload: _upload?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'upload';
        _upload?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetSingleRelationWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetTransformationInput extends GAssetTransformationInput {
  @override
  final GImageTransformationInput? image;
  @override
  final GDocumentTransformationInput? document;
  @override
  final bool? validateOptions;

  factory _$GAssetTransformationInput(
          [void Function(GAssetTransformationInputBuilder)? updates]) =>
      (new GAssetTransformationInputBuilder()..update(updates))._build();

  _$GAssetTransformationInput._(
      {this.image, this.document, this.validateOptions})
      : super._();

  @override
  GAssetTransformationInput rebuild(
          void Function(GAssetTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetTransformationInputBuilder toBuilder() =>
      new GAssetTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetTransformationInput &&
        image == other.image &&
        document == other.document &&
        validateOptions == other.validateOptions;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, image.hashCode);
    _$hash = $jc(_$hash, document.hashCode);
    _$hash = $jc(_$hash, validateOptions.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetTransformationInput')
          ..add('image', image)
          ..add('document', document)
          ..add('validateOptions', validateOptions))
        .toString();
  }
}

class GAssetTransformationInputBuilder
    implements
        Builder<GAssetTransformationInput, GAssetTransformationInputBuilder> {
  _$GAssetTransformationInput? _$v;

  GImageTransformationInputBuilder? _image;
  GImageTransformationInputBuilder get image =>
      _$this._image ??= new GImageTransformationInputBuilder();
  set image(GImageTransformationInputBuilder? image) => _$this._image = image;

  GDocumentTransformationInputBuilder? _document;
  GDocumentTransformationInputBuilder get document =>
      _$this._document ??= new GDocumentTransformationInputBuilder();
  set document(GDocumentTransformationInputBuilder? document) =>
      _$this._document = document;

  bool? _validateOptions;
  bool? get validateOptions => _$this._validateOptions;
  set validateOptions(bool? validateOptions) =>
      _$this._validateOptions = validateOptions;

  GAssetTransformationInputBuilder();

  GAssetTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _image = $v.image?.toBuilder();
      _document = $v.document?.toBuilder();
      _validateOptions = $v.validateOptions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetTransformationInput;
  }

  @override
  void update(void Function(GAssetTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetTransformationInput build() => _build();

  _$GAssetTransformationInput _build() {
    _$GAssetTransformationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetTransformationInput._(
              image: _image?.build(),
              document: _document?.build(),
              validateOptions: validateOptions);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'image';
        _image?.build();
        _$failedField = 'document';
        _document?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateInput extends GAssetUpdateInput {
  @override
  final String? fileName;
  @override
  final GArticleUpdateManyInlineInput? headerImageArticle;
  @override
  final bool? reUpload;
  @override
  final String? uploadUrl;
  @override
  final GAssetUpdateLocalizationsInput? localizations;

  factory _$GAssetUpdateInput(
          [void Function(GAssetUpdateInputBuilder)? updates]) =>
      (new GAssetUpdateInputBuilder()..update(updates))._build();

  _$GAssetUpdateInput._(
      {this.fileName,
      this.headerImageArticle,
      this.reUpload,
      this.uploadUrl,
      this.localizations})
      : super._();

  @override
  GAssetUpdateInput rebuild(void Function(GAssetUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateInputBuilder toBuilder() =>
      new GAssetUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateInput &&
        fileName == other.fileName &&
        headerImageArticle == other.headerImageArticle &&
        reUpload == other.reUpload &&
        uploadUrl == other.uploadUrl &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, headerImageArticle.hashCode);
    _$hash = $jc(_$hash, reUpload.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jc(_$hash, localizations.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateInput')
          ..add('fileName', fileName)
          ..add('headerImageArticle', headerImageArticle)
          ..add('reUpload', reUpload)
          ..add('uploadUrl', uploadUrl)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetUpdateInputBuilder
    implements Builder<GAssetUpdateInput, GAssetUpdateInputBuilder> {
  _$GAssetUpdateInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  GArticleUpdateManyInlineInputBuilder? _headerImageArticle;
  GArticleUpdateManyInlineInputBuilder get headerImageArticle =>
      _$this._headerImageArticle ??= new GArticleUpdateManyInlineInputBuilder();
  set headerImageArticle(
          GArticleUpdateManyInlineInputBuilder? headerImageArticle) =>
      _$this._headerImageArticle = headerImageArticle;

  bool? _reUpload;
  bool? get reUpload => _$this._reUpload;
  set reUpload(bool? reUpload) => _$this._reUpload = reUpload;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetUpdateLocalizationsInputBuilder? _localizations;
  GAssetUpdateLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetUpdateLocalizationsInputBuilder();
  set localizations(GAssetUpdateLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetUpdateInputBuilder();

  GAssetUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _headerImageArticle = $v.headerImageArticle?.toBuilder();
      _reUpload = $v.reUpload;
      _uploadUrl = $v.uploadUrl;
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateInput;
  }

  @override
  void update(void Function(GAssetUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateInput build() => _build();

  _$GAssetUpdateInput _build() {
    _$GAssetUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateInput._(
              fileName: fileName,
              headerImageArticle: _headerImageArticle?.build(),
              reUpload: reUpload,
              uploadUrl: uploadUrl,
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'headerImageArticle';
        _headerImageArticle?.build();

        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationDataInput
    extends GAssetUpdateLocalizationDataInput {
  @override
  final String? fileName;
  @override
  final bool? reUpload;
  @override
  final String? uploadUrl;

  factory _$GAssetUpdateLocalizationDataInput(
          [void Function(GAssetUpdateLocalizationDataInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationDataInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateLocalizationDataInput._(
      {this.fileName, this.reUpload, this.uploadUrl})
      : super._();

  @override
  GAssetUpdateLocalizationDataInput rebuild(
          void Function(GAssetUpdateLocalizationDataInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationDataInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationDataInput &&
        fileName == other.fileName &&
        reUpload == other.reUpload &&
        uploadUrl == other.uploadUrl;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, reUpload.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateLocalizationDataInput')
          ..add('fileName', fileName)
          ..add('reUpload', reUpload)
          ..add('uploadUrl', uploadUrl))
        .toString();
  }
}

class GAssetUpdateLocalizationDataInputBuilder
    implements
        Builder<GAssetUpdateLocalizationDataInput,
            GAssetUpdateLocalizationDataInputBuilder> {
  _$GAssetUpdateLocalizationDataInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  bool? _reUpload;
  bool? get reUpload => _$this._reUpload;
  set reUpload(bool? reUpload) => _$this._reUpload = reUpload;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetUpdateLocalizationDataInputBuilder();

  GAssetUpdateLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _reUpload = $v.reUpload;
      _uploadUrl = $v.uploadUrl;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetUpdateLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateLocalizationDataInput build() => _build();

  _$GAssetUpdateLocalizationDataInput _build() {
    final _$result = _$v ??
        new _$GAssetUpdateLocalizationDataInput._(
            fileName: fileName, reUpload: reUpload, uploadUrl: uploadUrl);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationInput extends GAssetUpdateLocalizationInput {
  @override
  final GAssetUpdateLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetUpdateLocalizationInput(
          [void Function(GAssetUpdateLocalizationInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationInputBuilder()..update(updates))._build();

  _$GAssetUpdateLocalizationInput._({required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetUpdateLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GAssetUpdateLocalizationInput', 'locale');
  }

  @override
  GAssetUpdateLocalizationInput rebuild(
          void Function(GAssetUpdateLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpdateLocalizationInputBuilder
    implements
        Builder<GAssetUpdateLocalizationInput,
            GAssetUpdateLocalizationInputBuilder> {
  _$GAssetUpdateLocalizationInput? _$v;

  GAssetUpdateLocalizationDataInputBuilder? _data;
  GAssetUpdateLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetUpdateLocalizationDataInputBuilder();
  set data(GAssetUpdateLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpdateLocalizationInputBuilder();

  GAssetUpdateLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationInput;
  }

  @override
  void update(void Function(GAssetUpdateLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateLocalizationInput build() => _build();

  _$GAssetUpdateLocalizationInput _build() {
    _$GAssetUpdateLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GAssetUpdateLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationsInput extends GAssetUpdateLocalizationsInput {
  @override
  final BuiltList<GAssetCreateLocalizationInput>? create;
  @override
  final BuiltList<GAssetUpdateLocalizationInput>? updateIt;
  @override
  final BuiltList<GAssetUpsertLocalizationInput>? upsert;
  @override
  final BuiltList<GLocale>? delete;

  factory _$GAssetUpdateLocalizationsInput(
          [void Function(GAssetUpdateLocalizationsInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationsInputBuilder()..update(updates))._build();

  _$GAssetUpdateLocalizationsInput._(
      {this.create, this.updateIt, this.upsert, this.delete})
      : super._();

  @override
  GAssetUpdateLocalizationsInput rebuild(
          void Function(GAssetUpdateLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationsInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationsInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateLocalizationsInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateLocalizationsInputBuilder
    implements
        Builder<GAssetUpdateLocalizationsInput,
            GAssetUpdateLocalizationsInputBuilder> {
  _$GAssetUpdateLocalizationsInput? _$v;

  ListBuilder<GAssetCreateLocalizationInput>? _create;
  ListBuilder<GAssetCreateLocalizationInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateLocalizationInput>();
  set create(ListBuilder<GAssetCreateLocalizationInput>? create) =>
      _$this._create = create;

  ListBuilder<GAssetUpdateLocalizationInput>? _updateIt;
  ListBuilder<GAssetUpdateLocalizationInput> get updateIt =>
      _$this._updateIt ??= new ListBuilder<GAssetUpdateLocalizationInput>();
  set updateIt(ListBuilder<GAssetUpdateLocalizationInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GAssetUpsertLocalizationInput>? _upsert;
  ListBuilder<GAssetUpsertLocalizationInput> get upsert =>
      _$this._upsert ??= new ListBuilder<GAssetUpsertLocalizationInput>();
  set upsert(ListBuilder<GAssetUpsertLocalizationInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GLocale>? _delete;
  ListBuilder<GLocale> get delete =>
      _$this._delete ??= new ListBuilder<GLocale>();
  set delete(ListBuilder<GLocale>? delete) => _$this._delete = delete;

  GAssetUpdateLocalizationsInputBuilder();

  GAssetUpdateLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationsInput;
  }

  @override
  void update(void Function(GAssetUpdateLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateLocalizationsInput build() => _build();

  _$GAssetUpdateLocalizationsInput _build() {
    _$GAssetUpdateLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateLocalizationsInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyInlineInput extends GAssetUpdateManyInlineInput {
  @override
  final BuiltList<GAssetCreateInput>? create;
  @override
  final BuiltList<GAssetConnectInput>? connect;
  @override
  final BuiltList<GAssetWhereUniqueInput>? set;
  @override
  final BuiltList<GAssetUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GAssetUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GAssetWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GAssetWhereUniqueInput>? delete;

  factory _$GAssetUpdateManyInlineInput(
          [void Function(GAssetUpdateManyInlineInputBuilder)? updates]) =>
      (new GAssetUpdateManyInlineInputBuilder()..update(updates))._build();

  _$GAssetUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GAssetUpdateManyInlineInput rebuild(
          void Function(GAssetUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyInlineInputBuilder toBuilder() =>
      new GAssetUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateManyInlineInputBuilder
    implements
        Builder<GAssetUpdateManyInlineInput,
            GAssetUpdateManyInlineInputBuilder> {
  _$GAssetUpdateManyInlineInput? _$v;

  ListBuilder<GAssetCreateInput>? _create;
  ListBuilder<GAssetCreateInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateInput>();
  set create(ListBuilder<GAssetCreateInput>? create) => _$this._create = create;

  ListBuilder<GAssetConnectInput>? _connect;
  ListBuilder<GAssetConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GAssetConnectInput>();
  set connect(ListBuilder<GAssetConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GAssetWhereUniqueInput>? _set;
  ListBuilder<GAssetWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GAssetWhereUniqueInput>();
  set set(ListBuilder<GAssetWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GAssetUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>();
  set updateIt(ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GAssetUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GAssetWhereUniqueInput>? _disconnect;
  ListBuilder<GAssetWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GAssetWhereUniqueInput>();
  set disconnect(ListBuilder<GAssetWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GAssetWhereUniqueInput>? _delete;
  ListBuilder<GAssetWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GAssetWhereUniqueInput>();
  set delete(ListBuilder<GAssetWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GAssetUpdateManyInlineInputBuilder();

  GAssetUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyInlineInput;
  }

  @override
  void update(void Function(GAssetUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyInlineInput build() => _build();

  _$GAssetUpdateManyInlineInput _build() {
    _$GAssetUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyInput extends GAssetUpdateManyInput {
  @override
  final String? fileName;
  @override
  final bool? reUpload;
  @override
  final String? uploadUrl;
  @override
  final GAssetUpdateManyLocalizationsInput? localizations;

  factory _$GAssetUpdateManyInput(
          [void Function(GAssetUpdateManyInputBuilder)? updates]) =>
      (new GAssetUpdateManyInputBuilder()..update(updates))._build();

  _$GAssetUpdateManyInput._(
      {this.fileName, this.reUpload, this.uploadUrl, this.localizations})
      : super._();

  @override
  GAssetUpdateManyInput rebuild(
          void Function(GAssetUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyInputBuilder toBuilder() =>
      new GAssetUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyInput &&
        fileName == other.fileName &&
        reUpload == other.reUpload &&
        uploadUrl == other.uploadUrl &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, reUpload.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jc(_$hash, localizations.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateManyInput')
          ..add('fileName', fileName)
          ..add('reUpload', reUpload)
          ..add('uploadUrl', uploadUrl)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetUpdateManyInputBuilder
    implements Builder<GAssetUpdateManyInput, GAssetUpdateManyInputBuilder> {
  _$GAssetUpdateManyInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  bool? _reUpload;
  bool? get reUpload => _$this._reUpload;
  set reUpload(bool? reUpload) => _$this._reUpload = reUpload;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetUpdateManyLocalizationsInputBuilder? _localizations;
  GAssetUpdateManyLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetUpdateManyLocalizationsInputBuilder();
  set localizations(GAssetUpdateManyLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetUpdateManyInputBuilder();

  GAssetUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _reUpload = $v.reUpload;
      _uploadUrl = $v.uploadUrl;
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyInput;
  }

  @override
  void update(void Function(GAssetUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyInput build() => _build();

  _$GAssetUpdateManyInput _build() {
    _$GAssetUpdateManyInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyInput._(
              fileName: fileName,
              reUpload: reUpload,
              uploadUrl: uploadUrl,
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateManyInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationDataInput
    extends GAssetUpdateManyLocalizationDataInput {
  @override
  final String? fileName;
  @override
  final bool? reUpload;
  @override
  final String? uploadUrl;

  factory _$GAssetUpdateManyLocalizationDataInput(
          [void Function(GAssetUpdateManyLocalizationDataInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyLocalizationDataInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateManyLocalizationDataInput._(
      {this.fileName, this.reUpload, this.uploadUrl})
      : super._();

  @override
  GAssetUpdateManyLocalizationDataInput rebuild(
          void Function(GAssetUpdateManyLocalizationDataInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationDataInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationDataInput &&
        fileName == other.fileName &&
        reUpload == other.reUpload &&
        uploadUrl == other.uploadUrl;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, reUpload.hashCode);
    _$hash = $jc(_$hash, uploadUrl.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GAssetUpdateManyLocalizationDataInput')
          ..add('fileName', fileName)
          ..add('reUpload', reUpload)
          ..add('uploadUrl', uploadUrl))
        .toString();
  }
}

class GAssetUpdateManyLocalizationDataInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationDataInput,
            GAssetUpdateManyLocalizationDataInputBuilder> {
  _$GAssetUpdateManyLocalizationDataInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  bool? _reUpload;
  bool? get reUpload => _$this._reUpload;
  set reUpload(bool? reUpload) => _$this._reUpload = reUpload;

  String? _uploadUrl;
  String? get uploadUrl => _$this._uploadUrl;
  set uploadUrl(String? uploadUrl) => _$this._uploadUrl = uploadUrl;

  GAssetUpdateManyLocalizationDataInputBuilder();

  GAssetUpdateManyLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _reUpload = $v.reUpload;
      _uploadUrl = $v.uploadUrl;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyLocalizationDataInput build() => _build();

  _$GAssetUpdateManyLocalizationDataInput _build() {
    final _$result = _$v ??
        new _$GAssetUpdateManyLocalizationDataInput._(
            fileName: fileName, reUpload: reUpload, uploadUrl: uploadUrl);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationInput
    extends GAssetUpdateManyLocalizationInput {
  @override
  final GAssetUpdateManyLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetUpdateManyLocalizationInput(
          [void Function(GAssetUpdateManyLocalizationInputBuilder)? updates]) =>
      (new GAssetUpdateManyLocalizationInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateManyLocalizationInput._(
      {required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetUpdateManyLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GAssetUpdateManyLocalizationInput', 'locale');
  }

  @override
  GAssetUpdateManyLocalizationInput rebuild(
          void Function(GAssetUpdateManyLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateManyLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpdateManyLocalizationInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationInput,
            GAssetUpdateManyLocalizationInputBuilder> {
  _$GAssetUpdateManyLocalizationInput? _$v;

  GAssetUpdateManyLocalizationDataInputBuilder? _data;
  GAssetUpdateManyLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetUpdateManyLocalizationDataInputBuilder();
  set data(GAssetUpdateManyLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpdateManyLocalizationInputBuilder();

  GAssetUpdateManyLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyLocalizationInput build() => _build();

  _$GAssetUpdateManyLocalizationInput _build() {
    _$GAssetUpdateManyLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GAssetUpdateManyLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateManyLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationsInput
    extends GAssetUpdateManyLocalizationsInput {
  @override
  final BuiltList<GAssetUpdateManyLocalizationInput>? updateIt;

  factory _$GAssetUpdateManyLocalizationsInput(
          [void Function(GAssetUpdateManyLocalizationsInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyLocalizationsInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateManyLocalizationsInput._({this.updateIt}) : super._();

  @override
  GAssetUpdateManyLocalizationsInput rebuild(
          void Function(GAssetUpdateManyLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationsInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationsInput &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateManyLocalizationsInput')
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GAssetUpdateManyLocalizationsInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationsInput,
            GAssetUpdateManyLocalizationsInputBuilder> {
  _$GAssetUpdateManyLocalizationsInput? _$v;

  ListBuilder<GAssetUpdateManyLocalizationInput>? _updateIt;
  ListBuilder<GAssetUpdateManyLocalizationInput> get updateIt =>
      _$this._updateIt ??= new ListBuilder<GAssetUpdateManyLocalizationInput>();
  set updateIt(ListBuilder<GAssetUpdateManyLocalizationInput>? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpdateManyLocalizationsInputBuilder();

  GAssetUpdateManyLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updateIt = $v.updateIt?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationsInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyLocalizationsInput build() => _build();

  _$GAssetUpdateManyLocalizationsInput _build() {
    _$GAssetUpdateManyLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyLocalizationsInput._(
              updateIt: _updateIt?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updateIt';
        _updateIt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateManyLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyWithNestedWhereInput
    extends GAssetUpdateManyWithNestedWhereInput {
  @override
  final GAssetWhereInput where;
  @override
  final GAssetUpdateManyInput data;

  factory _$GAssetUpdateManyWithNestedWhereInput(
          [void Function(GAssetUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyWithNestedWhereInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GAssetUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GAssetUpdateManyWithNestedWhereInput rebuild(
          void Function(GAssetUpdateManyWithNestedWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GAssetUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GAssetUpdateManyWithNestedWhereInput,
            GAssetUpdateManyWithNestedWhereInputBuilder> {
  _$GAssetUpdateManyWithNestedWhereInput? _$v;

  GAssetWhereInputBuilder? _where;
  GAssetWhereInputBuilder get where =>
      _$this._where ??= new GAssetWhereInputBuilder();
  set where(GAssetWhereInputBuilder? where) => _$this._where = where;

  GAssetUpdateManyInputBuilder? _data;
  GAssetUpdateManyInputBuilder get data =>
      _$this._data ??= new GAssetUpdateManyInputBuilder();
  set data(GAssetUpdateManyInputBuilder? data) => _$this._data = data;

  GAssetUpdateManyWithNestedWhereInputBuilder();

  GAssetUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateManyWithNestedWhereInput build() => _build();

  _$GAssetUpdateManyWithNestedWhereInput _build() {
    _$GAssetUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateOneInlineInput extends GAssetUpdateOneInlineInput {
  @override
  final GAssetCreateInput? create;
  @override
  final GAssetUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GAssetUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GAssetWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GAssetUpdateOneInlineInput(
          [void Function(GAssetUpdateOneInlineInputBuilder)? updates]) =>
      (new GAssetUpdateOneInlineInputBuilder()..update(updates))._build();

  _$GAssetUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GAssetUpdateOneInlineInput rebuild(
          void Function(GAssetUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateOneInlineInputBuilder toBuilder() =>
      new GAssetUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateOneInlineInputBuilder
    implements
        Builder<GAssetUpdateOneInlineInput, GAssetUpdateOneInlineInputBuilder> {
  _$GAssetUpdateOneInlineInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GAssetUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GAssetUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GAssetUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GAssetUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GAssetUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GAssetWhereUniqueInputBuilder? _connect;
  GAssetWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GAssetWhereUniqueInputBuilder();
  set connect(GAssetWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GAssetUpdateOneInlineInputBuilder();

  GAssetUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateOneInlineInput;
  }

  @override
  void update(void Function(GAssetUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateOneInlineInput build() => _build();

  _$GAssetUpdateOneInlineInput _build() {
    _$GAssetUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateWithNestedWhereUniqueInput
    extends GAssetUpdateWithNestedWhereUniqueInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GAssetUpdateInput data;

  factory _$GAssetUpdateWithNestedWhereUniqueInput(
          [void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GAssetUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GAssetUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GAssetUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GAssetUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GAssetUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GAssetUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GAssetUpdateWithNestedWhereUniqueInput,
            GAssetUpdateWithNestedWhereUniqueInputBuilder> {
  _$GAssetUpdateWithNestedWhereUniqueInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GAssetUpdateInputBuilder? _data;
  GAssetUpdateInputBuilder get data =>
      _$this._data ??= new GAssetUpdateInputBuilder();
  set data(GAssetUpdateInputBuilder? data) => _$this._data = data;

  GAssetUpdateWithNestedWhereUniqueInputBuilder();

  GAssetUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpdateWithNestedWhereUniqueInput build() => _build();

  _$GAssetUpdateWithNestedWhereUniqueInput _build() {
    _$GAssetUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUploadWhereInput extends GAssetUploadWhereInput {
  @override
  final BuiltList<GAssetUploadWhereInput>? AND;
  @override
  final BuiltList<GAssetUploadWhereInput>? OR;
  @override
  final BuiltList<GAssetUploadWhereInput>? NOT;
  @override
  final GAssetUploadStatus? status;
  @override
  final GAssetUploadStatus? status_not;
  @override
  final BuiltList<GAssetUploadStatus?>? status_in;
  @override
  final BuiltList<GAssetUploadStatus?>? status_not_in;
  @override
  final GDateTime? expiresAt;
  @override
  final GDateTime? expiresAt_not;
  @override
  final BuiltList<GDateTime?>? expiresAt_in;
  @override
  final BuiltList<GDateTime?>? expiresAt_not_in;
  @override
  final GDateTime? expiresAt_lt;
  @override
  final GDateTime? expiresAt_lte;
  @override
  final GDateTime? expiresAt_gt;
  @override
  final GDateTime? expiresAt_gte;

  factory _$GAssetUploadWhereInput(
          [void Function(GAssetUploadWhereInputBuilder)? updates]) =>
      (new GAssetUploadWhereInputBuilder()..update(updates))._build();

  _$GAssetUploadWhereInput._(
      {this.AND,
      this.OR,
      this.NOT,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in,
      this.expiresAt,
      this.expiresAt_not,
      this.expiresAt_in,
      this.expiresAt_not_in,
      this.expiresAt_lt,
      this.expiresAt_lte,
      this.expiresAt_gt,
      this.expiresAt_gte})
      : super._();

  @override
  GAssetUploadWhereInput rebuild(
          void Function(GAssetUploadWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUploadWhereInputBuilder toBuilder() =>
      new GAssetUploadWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUploadWhereInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in &&
        expiresAt == other.expiresAt &&
        expiresAt_not == other.expiresAt_not &&
        expiresAt_in == other.expiresAt_in &&
        expiresAt_not_in == other.expiresAt_not_in &&
        expiresAt_lt == other.expiresAt_lt &&
        expiresAt_lte == other.expiresAt_lte &&
        expiresAt_gt == other.expiresAt_gt &&
        expiresAt_gte == other.expiresAt_gte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jc(_$hash, expiresAt.hashCode);
    _$hash = $jc(_$hash, expiresAt_not.hashCode);
    _$hash = $jc(_$hash, expiresAt_in.hashCode);
    _$hash = $jc(_$hash, expiresAt_not_in.hashCode);
    _$hash = $jc(_$hash, expiresAt_lt.hashCode);
    _$hash = $jc(_$hash, expiresAt_lte.hashCode);
    _$hash = $jc(_$hash, expiresAt_gt.hashCode);
    _$hash = $jc(_$hash, expiresAt_gte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUploadWhereInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in)
          ..add('expiresAt', expiresAt)
          ..add('expiresAt_not', expiresAt_not)
          ..add('expiresAt_in', expiresAt_in)
          ..add('expiresAt_not_in', expiresAt_not_in)
          ..add('expiresAt_lt', expiresAt_lt)
          ..add('expiresAt_lte', expiresAt_lte)
          ..add('expiresAt_gt', expiresAt_gt)
          ..add('expiresAt_gte', expiresAt_gte))
        .toString();
  }
}

class GAssetUploadWhereInputBuilder
    implements Builder<GAssetUploadWhereInput, GAssetUploadWhereInputBuilder> {
  _$GAssetUploadWhereInput? _$v;

  ListBuilder<GAssetUploadWhereInput>? _AND;
  ListBuilder<GAssetUploadWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetUploadWhereInput>();
  set AND(ListBuilder<GAssetUploadWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetUploadWhereInput>? _OR;
  ListBuilder<GAssetUploadWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetUploadWhereInput>();
  set OR(ListBuilder<GAssetUploadWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetUploadWhereInput>? _NOT;
  ListBuilder<GAssetUploadWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetUploadWhereInput>();
  set NOT(ListBuilder<GAssetUploadWhereInput>? NOT) => _$this._NOT = NOT;

  GAssetUploadStatus? _status;
  GAssetUploadStatus? get status => _$this._status;
  set status(GAssetUploadStatus? status) => _$this._status = status;

  GAssetUploadStatus? _status_not;
  GAssetUploadStatus? get status_not => _$this._status_not;
  set status_not(GAssetUploadStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GAssetUploadStatus?>? _status_in;
  ListBuilder<GAssetUploadStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GAssetUploadStatus?>();
  set status_in(ListBuilder<GAssetUploadStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GAssetUploadStatus?>? _status_not_in;
  ListBuilder<GAssetUploadStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GAssetUploadStatus?>();
  set status_not_in(ListBuilder<GAssetUploadStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GDateTimeBuilder? _expiresAt;
  GDateTimeBuilder get expiresAt =>
      _$this._expiresAt ??= new GDateTimeBuilder();
  set expiresAt(GDateTimeBuilder? expiresAt) => _$this._expiresAt = expiresAt;

  GDateTimeBuilder? _expiresAt_not;
  GDateTimeBuilder get expiresAt_not =>
      _$this._expiresAt_not ??= new GDateTimeBuilder();
  set expiresAt_not(GDateTimeBuilder? expiresAt_not) =>
      _$this._expiresAt_not = expiresAt_not;

  ListBuilder<GDateTime?>? _expiresAt_in;
  ListBuilder<GDateTime?> get expiresAt_in =>
      _$this._expiresAt_in ??= new ListBuilder<GDateTime?>();
  set expiresAt_in(ListBuilder<GDateTime?>? expiresAt_in) =>
      _$this._expiresAt_in = expiresAt_in;

  ListBuilder<GDateTime?>? _expiresAt_not_in;
  ListBuilder<GDateTime?> get expiresAt_not_in =>
      _$this._expiresAt_not_in ??= new ListBuilder<GDateTime?>();
  set expiresAt_not_in(ListBuilder<GDateTime?>? expiresAt_not_in) =>
      _$this._expiresAt_not_in = expiresAt_not_in;

  GDateTimeBuilder? _expiresAt_lt;
  GDateTimeBuilder get expiresAt_lt =>
      _$this._expiresAt_lt ??= new GDateTimeBuilder();
  set expiresAt_lt(GDateTimeBuilder? expiresAt_lt) =>
      _$this._expiresAt_lt = expiresAt_lt;

  GDateTimeBuilder? _expiresAt_lte;
  GDateTimeBuilder get expiresAt_lte =>
      _$this._expiresAt_lte ??= new GDateTimeBuilder();
  set expiresAt_lte(GDateTimeBuilder? expiresAt_lte) =>
      _$this._expiresAt_lte = expiresAt_lte;

  GDateTimeBuilder? _expiresAt_gt;
  GDateTimeBuilder get expiresAt_gt =>
      _$this._expiresAt_gt ??= new GDateTimeBuilder();
  set expiresAt_gt(GDateTimeBuilder? expiresAt_gt) =>
      _$this._expiresAt_gt = expiresAt_gt;

  GDateTimeBuilder? _expiresAt_gte;
  GDateTimeBuilder get expiresAt_gte =>
      _$this._expiresAt_gte ??= new GDateTimeBuilder();
  set expiresAt_gte(GDateTimeBuilder? expiresAt_gte) =>
      _$this._expiresAt_gte = expiresAt_gte;

  GAssetUploadWhereInputBuilder();

  GAssetUploadWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _expiresAt = $v.expiresAt?.toBuilder();
      _expiresAt_not = $v.expiresAt_not?.toBuilder();
      _expiresAt_in = $v.expiresAt_in?.toBuilder();
      _expiresAt_not_in = $v.expiresAt_not_in?.toBuilder();
      _expiresAt_lt = $v.expiresAt_lt?.toBuilder();
      _expiresAt_lte = $v.expiresAt_lte?.toBuilder();
      _expiresAt_gt = $v.expiresAt_gt?.toBuilder();
      _expiresAt_gte = $v.expiresAt_gte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUploadWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUploadWhereInput;
  }

  @override
  void update(void Function(GAssetUploadWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUploadWhereInput build() => _build();

  _$GAssetUploadWhereInput _build() {
    _$GAssetUploadWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUploadWhereInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build(),
              expiresAt: _expiresAt?.build(),
              expiresAt_not: _expiresAt_not?.build(),
              expiresAt_in: _expiresAt_in?.build(),
              expiresAt_not_in: _expiresAt_not_in?.build(),
              expiresAt_lt: _expiresAt_lt?.build(),
              expiresAt_lte: _expiresAt_lte?.build(),
              expiresAt_gt: _expiresAt_gt?.build(),
              expiresAt_gte: _expiresAt_gte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
        _$failedField = 'expiresAt';
        _expiresAt?.build();
        _$failedField = 'expiresAt_not';
        _expiresAt_not?.build();
        _$failedField = 'expiresAt_in';
        _expiresAt_in?.build();
        _$failedField = 'expiresAt_not_in';
        _expiresAt_not_in?.build();
        _$failedField = 'expiresAt_lt';
        _expiresAt_lt?.build();
        _$failedField = 'expiresAt_lte';
        _expiresAt_lte?.build();
        _$failedField = 'expiresAt_gt';
        _expiresAt_gt?.build();
        _$failedField = 'expiresAt_gte';
        _expiresAt_gte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUploadWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUploadWhereStageInput extends GAssetUploadWhereStageInput {
  @override
  final BuiltList<GAssetUploadWhereInput>? AND;
  @override
  final BuiltList<GAssetUploadWhereInput>? OR;
  @override
  final BuiltList<GAssetUploadWhereInput>? NOT;
  @override
  final GAssetUploadStatus? status;
  @override
  final GAssetUploadStatus? status_not;
  @override
  final BuiltList<GAssetUploadStatus?>? status_in;
  @override
  final BuiltList<GAssetUploadStatus?>? status_not_in;
  @override
  final GDateTime? expiresAt;
  @override
  final GDateTime? expiresAt_not;
  @override
  final BuiltList<GDateTime?>? expiresAt_in;
  @override
  final BuiltList<GDateTime?>? expiresAt_not_in;
  @override
  final GDateTime? expiresAt_lt;
  @override
  final GDateTime? expiresAt_lte;
  @override
  final GDateTime? expiresAt_gt;
  @override
  final GDateTime? expiresAt_gte;

  factory _$GAssetUploadWhereStageInput(
          [void Function(GAssetUploadWhereStageInputBuilder)? updates]) =>
      (new GAssetUploadWhereStageInputBuilder()..update(updates))._build();

  _$GAssetUploadWhereStageInput._(
      {this.AND,
      this.OR,
      this.NOT,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in,
      this.expiresAt,
      this.expiresAt_not,
      this.expiresAt_in,
      this.expiresAt_not_in,
      this.expiresAt_lt,
      this.expiresAt_lte,
      this.expiresAt_gt,
      this.expiresAt_gte})
      : super._();

  @override
  GAssetUploadWhereStageInput rebuild(
          void Function(GAssetUploadWhereStageInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUploadWhereStageInputBuilder toBuilder() =>
      new GAssetUploadWhereStageInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUploadWhereStageInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in &&
        expiresAt == other.expiresAt &&
        expiresAt_not == other.expiresAt_not &&
        expiresAt_in == other.expiresAt_in &&
        expiresAt_not_in == other.expiresAt_not_in &&
        expiresAt_lt == other.expiresAt_lt &&
        expiresAt_lte == other.expiresAt_lte &&
        expiresAt_gt == other.expiresAt_gt &&
        expiresAt_gte == other.expiresAt_gte;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jc(_$hash, expiresAt.hashCode);
    _$hash = $jc(_$hash, expiresAt_not.hashCode);
    _$hash = $jc(_$hash, expiresAt_in.hashCode);
    _$hash = $jc(_$hash, expiresAt_not_in.hashCode);
    _$hash = $jc(_$hash, expiresAt_lt.hashCode);
    _$hash = $jc(_$hash, expiresAt_lte.hashCode);
    _$hash = $jc(_$hash, expiresAt_gt.hashCode);
    _$hash = $jc(_$hash, expiresAt_gte.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUploadWhereStageInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in)
          ..add('expiresAt', expiresAt)
          ..add('expiresAt_not', expiresAt_not)
          ..add('expiresAt_in', expiresAt_in)
          ..add('expiresAt_not_in', expiresAt_not_in)
          ..add('expiresAt_lt', expiresAt_lt)
          ..add('expiresAt_lte', expiresAt_lte)
          ..add('expiresAt_gt', expiresAt_gt)
          ..add('expiresAt_gte', expiresAt_gte))
        .toString();
  }
}

class GAssetUploadWhereStageInputBuilder
    implements
        Builder<GAssetUploadWhereStageInput,
            GAssetUploadWhereStageInputBuilder> {
  _$GAssetUploadWhereStageInput? _$v;

  ListBuilder<GAssetUploadWhereInput>? _AND;
  ListBuilder<GAssetUploadWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetUploadWhereInput>();
  set AND(ListBuilder<GAssetUploadWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetUploadWhereInput>? _OR;
  ListBuilder<GAssetUploadWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetUploadWhereInput>();
  set OR(ListBuilder<GAssetUploadWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetUploadWhereInput>? _NOT;
  ListBuilder<GAssetUploadWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetUploadWhereInput>();
  set NOT(ListBuilder<GAssetUploadWhereInput>? NOT) => _$this._NOT = NOT;

  GAssetUploadStatus? _status;
  GAssetUploadStatus? get status => _$this._status;
  set status(GAssetUploadStatus? status) => _$this._status = status;

  GAssetUploadStatus? _status_not;
  GAssetUploadStatus? get status_not => _$this._status_not;
  set status_not(GAssetUploadStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GAssetUploadStatus?>? _status_in;
  ListBuilder<GAssetUploadStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GAssetUploadStatus?>();
  set status_in(ListBuilder<GAssetUploadStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GAssetUploadStatus?>? _status_not_in;
  ListBuilder<GAssetUploadStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GAssetUploadStatus?>();
  set status_not_in(ListBuilder<GAssetUploadStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GDateTimeBuilder? _expiresAt;
  GDateTimeBuilder get expiresAt =>
      _$this._expiresAt ??= new GDateTimeBuilder();
  set expiresAt(GDateTimeBuilder? expiresAt) => _$this._expiresAt = expiresAt;

  GDateTimeBuilder? _expiresAt_not;
  GDateTimeBuilder get expiresAt_not =>
      _$this._expiresAt_not ??= new GDateTimeBuilder();
  set expiresAt_not(GDateTimeBuilder? expiresAt_not) =>
      _$this._expiresAt_not = expiresAt_not;

  ListBuilder<GDateTime?>? _expiresAt_in;
  ListBuilder<GDateTime?> get expiresAt_in =>
      _$this._expiresAt_in ??= new ListBuilder<GDateTime?>();
  set expiresAt_in(ListBuilder<GDateTime?>? expiresAt_in) =>
      _$this._expiresAt_in = expiresAt_in;

  ListBuilder<GDateTime?>? _expiresAt_not_in;
  ListBuilder<GDateTime?> get expiresAt_not_in =>
      _$this._expiresAt_not_in ??= new ListBuilder<GDateTime?>();
  set expiresAt_not_in(ListBuilder<GDateTime?>? expiresAt_not_in) =>
      _$this._expiresAt_not_in = expiresAt_not_in;

  GDateTimeBuilder? _expiresAt_lt;
  GDateTimeBuilder get expiresAt_lt =>
      _$this._expiresAt_lt ??= new GDateTimeBuilder();
  set expiresAt_lt(GDateTimeBuilder? expiresAt_lt) =>
      _$this._expiresAt_lt = expiresAt_lt;

  GDateTimeBuilder? _expiresAt_lte;
  GDateTimeBuilder get expiresAt_lte =>
      _$this._expiresAt_lte ??= new GDateTimeBuilder();
  set expiresAt_lte(GDateTimeBuilder? expiresAt_lte) =>
      _$this._expiresAt_lte = expiresAt_lte;

  GDateTimeBuilder? _expiresAt_gt;
  GDateTimeBuilder get expiresAt_gt =>
      _$this._expiresAt_gt ??= new GDateTimeBuilder();
  set expiresAt_gt(GDateTimeBuilder? expiresAt_gt) =>
      _$this._expiresAt_gt = expiresAt_gt;

  GDateTimeBuilder? _expiresAt_gte;
  GDateTimeBuilder get expiresAt_gte =>
      _$this._expiresAt_gte ??= new GDateTimeBuilder();
  set expiresAt_gte(GDateTimeBuilder? expiresAt_gte) =>
      _$this._expiresAt_gte = expiresAt_gte;

  GAssetUploadWhereStageInputBuilder();

  GAssetUploadWhereStageInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _expiresAt = $v.expiresAt?.toBuilder();
      _expiresAt_not = $v.expiresAt_not?.toBuilder();
      _expiresAt_in = $v.expiresAt_in?.toBuilder();
      _expiresAt_not_in = $v.expiresAt_not_in?.toBuilder();
      _expiresAt_lt = $v.expiresAt_lt?.toBuilder();
      _expiresAt_lte = $v.expiresAt_lte?.toBuilder();
      _expiresAt_gt = $v.expiresAt_gt?.toBuilder();
      _expiresAt_gte = $v.expiresAt_gte?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUploadWhereStageInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUploadWhereStageInput;
  }

  @override
  void update(void Function(GAssetUploadWhereStageInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUploadWhereStageInput build() => _build();

  _$GAssetUploadWhereStageInput _build() {
    _$GAssetUploadWhereStageInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUploadWhereStageInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build(),
              expiresAt: _expiresAt?.build(),
              expiresAt_not: _expiresAt_not?.build(),
              expiresAt_in: _expiresAt_in?.build(),
              expiresAt_not_in: _expiresAt_not_in?.build(),
              expiresAt_lt: _expiresAt_lt?.build(),
              expiresAt_lte: _expiresAt_lte?.build(),
              expiresAt_gt: _expiresAt_gt?.build(),
              expiresAt_gte: _expiresAt_gte?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
        _$failedField = 'expiresAt';
        _expiresAt?.build();
        _$failedField = 'expiresAt_not';
        _expiresAt_not?.build();
        _$failedField = 'expiresAt_in';
        _expiresAt_in?.build();
        _$failedField = 'expiresAt_not_in';
        _expiresAt_not_in?.build();
        _$failedField = 'expiresAt_lt';
        _expiresAt_lt?.build();
        _$failedField = 'expiresAt_lte';
        _expiresAt_lte?.build();
        _$failedField = 'expiresAt_gt';
        _expiresAt_gt?.build();
        _$failedField = 'expiresAt_gte';
        _expiresAt_gte?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUploadWhereStageInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertInput extends GAssetUpsertInput {
  @override
  final GAssetCreateInput create;
  @override
  final GAssetUpdateInput updateIt;

  factory _$GAssetUpsertInput(
          [void Function(GAssetUpsertInputBuilder)? updates]) =>
      (new GAssetUpsertInputBuilder()..update(updates))._build();

  _$GAssetUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, r'GAssetUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, r'GAssetUpsertInput', 'updateIt');
  }

  @override
  GAssetUpsertInput rebuild(void Function(GAssetUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertInputBuilder toBuilder() =>
      new GAssetUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GAssetUpsertInputBuilder
    implements Builder<GAssetUpsertInput, GAssetUpsertInputBuilder> {
  _$GAssetUpsertInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetUpdateInputBuilder? _updateIt;
  GAssetUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateInputBuilder();
  set updateIt(GAssetUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpsertInputBuilder();

  GAssetUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertInput;
  }

  @override
  void update(void Function(GAssetUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpsertInput build() => _build();

  _$GAssetUpsertInput _build() {
    _$GAssetUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertLocalizationInput extends GAssetUpsertLocalizationInput {
  @override
  final GAssetUpdateLocalizationDataInput updateIt;
  @override
  final GAssetCreateLocalizationDataInput create;
  @override
  final GLocale locale;

  factory _$GAssetUpsertLocalizationInput(
          [void Function(GAssetUpsertLocalizationInputBuilder)? updates]) =>
      (new GAssetUpsertLocalizationInputBuilder()..update(updates))._build();

  _$GAssetUpsertLocalizationInput._(
      {required this.updateIt, required this.create, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        updateIt, r'GAssetUpsertLocalizationInput', 'updateIt');
    BuiltValueNullFieldError.checkNotNull(
        create, r'GAssetUpsertLocalizationInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GAssetUpsertLocalizationInput', 'locale');
  }

  @override
  GAssetUpsertLocalizationInput rebuild(
          void Function(GAssetUpsertLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertLocalizationInputBuilder toBuilder() =>
      new GAssetUpsertLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertLocalizationInput &&
        updateIt == other.updateIt &&
        create == other.create &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetUpsertLocalizationInput')
          ..add('updateIt', updateIt)
          ..add('create', create)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpsertLocalizationInputBuilder
    implements
        Builder<GAssetUpsertLocalizationInput,
            GAssetUpsertLocalizationInputBuilder> {
  _$GAssetUpsertLocalizationInput? _$v;

  GAssetUpdateLocalizationDataInputBuilder? _updateIt;
  GAssetUpdateLocalizationDataInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateLocalizationDataInputBuilder();
  set updateIt(GAssetUpdateLocalizationDataInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetCreateLocalizationDataInputBuilder? _create;
  GAssetCreateLocalizationDataInputBuilder get create =>
      _$this._create ??= new GAssetCreateLocalizationDataInputBuilder();
  set create(GAssetCreateLocalizationDataInputBuilder? create) =>
      _$this._create = create;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpsertLocalizationInputBuilder();

  GAssetUpsertLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updateIt = $v.updateIt.toBuilder();
      _create = $v.create.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertLocalizationInput;
  }

  @override
  void update(void Function(GAssetUpsertLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpsertLocalizationInput build() => _build();

  _$GAssetUpsertLocalizationInput _build() {
    _$GAssetUpsertLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertLocalizationInput._(
              updateIt: updateIt.build(),
              create: create.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GAssetUpsertLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updateIt';
        updateIt.build();
        _$failedField = 'create';
        create.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpsertLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertWithNestedWhereUniqueInput
    extends GAssetUpsertWithNestedWhereUniqueInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GAssetUpsertInput data;

  factory _$GAssetUpsertWithNestedWhereUniqueInput(
          [void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GAssetUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GAssetUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GAssetUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GAssetUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GAssetUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GAssetUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GAssetUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GAssetUpsertWithNestedWhereUniqueInput,
            GAssetUpsertWithNestedWhereUniqueInputBuilder> {
  _$GAssetUpsertWithNestedWhereUniqueInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GAssetUpsertInputBuilder? _data;
  GAssetUpsertInputBuilder get data =>
      _$this._data ??= new GAssetUpsertInputBuilder();
  set data(GAssetUpsertInputBuilder? data) => _$this._data = data;

  GAssetUpsertWithNestedWhereUniqueInputBuilder();

  GAssetUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetUpsertWithNestedWhereUniqueInput build() => _build();

  _$GAssetUpsertWithNestedWhereUniqueInput _build() {
    _$GAssetUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereComparatorInput extends GAssetWhereComparatorInput {
  @override
  final bool? outdated_to;

  factory _$GAssetWhereComparatorInput(
          [void Function(GAssetWhereComparatorInputBuilder)? updates]) =>
      (new GAssetWhereComparatorInputBuilder()..update(updates))._build();

  _$GAssetWhereComparatorInput._({this.outdated_to}) : super._();

  @override
  GAssetWhereComparatorInput rebuild(
          void Function(GAssetWhereComparatorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereComparatorInputBuilder toBuilder() =>
      new GAssetWhereComparatorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereComparatorInput &&
        outdated_to == other.outdated_to;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, outdated_to.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetWhereComparatorInput')
          ..add('outdated_to', outdated_to))
        .toString();
  }
}

class GAssetWhereComparatorInputBuilder
    implements
        Builder<GAssetWhereComparatorInput, GAssetWhereComparatorInputBuilder> {
  _$GAssetWhereComparatorInput? _$v;

  bool? _outdated_to;
  bool? get outdated_to => _$this._outdated_to;
  set outdated_to(bool? outdated_to) => _$this._outdated_to = outdated_to;

  GAssetWhereComparatorInputBuilder();

  GAssetWhereComparatorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _outdated_to = $v.outdated_to;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereComparatorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereComparatorInput;
  }

  @override
  void update(void Function(GAssetWhereComparatorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetWhereComparatorInput build() => _build();

  _$GAssetWhereComparatorInput _build() {
    final _$result =
        _$v ?? new _$GAssetWhereComparatorInput._(outdated_to: outdated_to);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereInput extends GAssetWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GAssetWhereInput>? AND;
  @override
  final BuiltList<GAssetWhereInput>? OR;
  @override
  final BuiltList<GAssetWhereInput>? NOT;
  @override
  final GAssetWhereStageInput? documentInStages_every;
  @override
  final GAssetWhereStageInput? documentInStages_some;
  @override
  final GAssetWhereStageInput? documentInStages_none;
  @override
  final String? mimeType;
  @override
  final String? mimeType_not;
  @override
  final BuiltList<String?>? mimeType_in;
  @override
  final BuiltList<String?>? mimeType_not_in;
  @override
  final String? mimeType_contains;
  @override
  final String? mimeType_not_contains;
  @override
  final String? mimeType_starts_with;
  @override
  final String? mimeType_not_starts_with;
  @override
  final String? mimeType_ends_with;
  @override
  final String? mimeType_not_ends_with;
  @override
  final double? size;
  @override
  final double? size_not;
  @override
  final BuiltList<double?>? size_in;
  @override
  final BuiltList<double?>? size_not_in;
  @override
  final double? size_lt;
  @override
  final double? size_lte;
  @override
  final double? size_gt;
  @override
  final double? size_gte;
  @override
  final double? width;
  @override
  final double? width_not;
  @override
  final BuiltList<double?>? width_in;
  @override
  final BuiltList<double?>? width_not_in;
  @override
  final double? width_lt;
  @override
  final double? width_lte;
  @override
  final double? width_gt;
  @override
  final double? width_gte;
  @override
  final double? height;
  @override
  final double? height_not;
  @override
  final BuiltList<double?>? height_in;
  @override
  final BuiltList<double?>? height_not_in;
  @override
  final double? height_lt;
  @override
  final double? height_lte;
  @override
  final double? height_gt;
  @override
  final double? height_gte;
  @override
  final String? fileName;
  @override
  final String? fileName_not;
  @override
  final BuiltList<String?>? fileName_in;
  @override
  final BuiltList<String?>? fileName_not_in;
  @override
  final String? fileName_contains;
  @override
  final String? fileName_not_contains;
  @override
  final String? fileName_starts_with;
  @override
  final String? fileName_not_starts_with;
  @override
  final String? fileName_ends_with;
  @override
  final String? fileName_not_ends_with;
  @override
  final String? handle;
  @override
  final String? handle_not;
  @override
  final BuiltList<String?>? handle_in;
  @override
  final BuiltList<String?>? handle_not_in;
  @override
  final String? handle_contains;
  @override
  final String? handle_not_contains;
  @override
  final String? handle_starts_with;
  @override
  final String? handle_not_starts_with;
  @override
  final String? handle_ends_with;
  @override
  final String? handle_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GArticleWhereInput? headerImageArticle_every;
  @override
  final GArticleWhereInput? headerImageArticle_some;
  @override
  final GArticleWhereInput? headerImageArticle_none;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final GAssetUploadWhereInput? upload;

  factory _$GAssetWhereInput(
          [void Function(GAssetWhereInputBuilder)? updates]) =>
      (new GAssetWhereInputBuilder()..update(updates))._build();

  _$GAssetWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.mimeType,
      this.mimeType_not,
      this.mimeType_in,
      this.mimeType_not_in,
      this.mimeType_contains,
      this.mimeType_not_contains,
      this.mimeType_starts_with,
      this.mimeType_not_starts_with,
      this.mimeType_ends_with,
      this.mimeType_not_ends_with,
      this.size,
      this.size_not,
      this.size_in,
      this.size_not_in,
      this.size_lt,
      this.size_lte,
      this.size_gt,
      this.size_gte,
      this.width,
      this.width_not,
      this.width_in,
      this.width_not_in,
      this.width_lt,
      this.width_lte,
      this.width_gt,
      this.width_gte,
      this.height,
      this.height_not,
      this.height_in,
      this.height_not_in,
      this.height_lt,
      this.height_lte,
      this.height_gt,
      this.height_gte,
      this.fileName,
      this.fileName_not,
      this.fileName_in,
      this.fileName_not_in,
      this.fileName_contains,
      this.fileName_not_contains,
      this.fileName_starts_with,
      this.fileName_not_starts_with,
      this.fileName_ends_with,
      this.fileName_not_ends_with,
      this.handle,
      this.handle_not,
      this.handle_in,
      this.handle_not_in,
      this.handle_contains,
      this.handle_not_contains,
      this.handle_starts_with,
      this.handle_not_starts_with,
      this.handle_ends_with,
      this.handle_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.headerImageArticle_every,
      this.headerImageArticle_some,
      this.headerImageArticle_none,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.upload})
      : super._();

  @override
  GAssetWhereInput rebuild(void Function(GAssetWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereInputBuilder toBuilder() =>
      new GAssetWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        mimeType == other.mimeType &&
        mimeType_not == other.mimeType_not &&
        mimeType_in == other.mimeType_in &&
        mimeType_not_in == other.mimeType_not_in &&
        mimeType_contains == other.mimeType_contains &&
        mimeType_not_contains == other.mimeType_not_contains &&
        mimeType_starts_with == other.mimeType_starts_with &&
        mimeType_not_starts_with == other.mimeType_not_starts_with &&
        mimeType_ends_with == other.mimeType_ends_with &&
        mimeType_not_ends_with == other.mimeType_not_ends_with &&
        size == other.size &&
        size_not == other.size_not &&
        size_in == other.size_in &&
        size_not_in == other.size_not_in &&
        size_lt == other.size_lt &&
        size_lte == other.size_lte &&
        size_gt == other.size_gt &&
        size_gte == other.size_gte &&
        width == other.width &&
        width_not == other.width_not &&
        width_in == other.width_in &&
        width_not_in == other.width_not_in &&
        width_lt == other.width_lt &&
        width_lte == other.width_lte &&
        width_gt == other.width_gt &&
        width_gte == other.width_gte &&
        height == other.height &&
        height_not == other.height_not &&
        height_in == other.height_in &&
        height_not_in == other.height_not_in &&
        height_lt == other.height_lt &&
        height_lte == other.height_lte &&
        height_gt == other.height_gt &&
        height_gte == other.height_gte &&
        fileName == other.fileName &&
        fileName_not == other.fileName_not &&
        fileName_in == other.fileName_in &&
        fileName_not_in == other.fileName_not_in &&
        fileName_contains == other.fileName_contains &&
        fileName_not_contains == other.fileName_not_contains &&
        fileName_starts_with == other.fileName_starts_with &&
        fileName_not_starts_with == other.fileName_not_starts_with &&
        fileName_ends_with == other.fileName_ends_with &&
        fileName_not_ends_with == other.fileName_not_ends_with &&
        handle == other.handle &&
        handle_not == other.handle_not &&
        handle_in == other.handle_in &&
        handle_not_in == other.handle_not_in &&
        handle_contains == other.handle_contains &&
        handle_not_contains == other.handle_not_contains &&
        handle_starts_with == other.handle_starts_with &&
        handle_not_starts_with == other.handle_not_starts_with &&
        handle_ends_with == other.handle_ends_with &&
        handle_not_ends_with == other.handle_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        headerImageArticle_every == other.headerImageArticle_every &&
        headerImageArticle_some == other.headerImageArticle_some &&
        headerImageArticle_none == other.headerImageArticle_none &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        upload == other.upload;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, mimeType.hashCode);
    _$hash = $jc(_$hash, mimeType_not.hashCode);
    _$hash = $jc(_$hash, mimeType_in.hashCode);
    _$hash = $jc(_$hash, mimeType_not_in.hashCode);
    _$hash = $jc(_$hash, mimeType_contains.hashCode);
    _$hash = $jc(_$hash, mimeType_not_contains.hashCode);
    _$hash = $jc(_$hash, mimeType_starts_with.hashCode);
    _$hash = $jc(_$hash, mimeType_not_starts_with.hashCode);
    _$hash = $jc(_$hash, mimeType_ends_with.hashCode);
    _$hash = $jc(_$hash, mimeType_not_ends_with.hashCode);
    _$hash = $jc(_$hash, size.hashCode);
    _$hash = $jc(_$hash, size_not.hashCode);
    _$hash = $jc(_$hash, size_in.hashCode);
    _$hash = $jc(_$hash, size_not_in.hashCode);
    _$hash = $jc(_$hash, size_lt.hashCode);
    _$hash = $jc(_$hash, size_lte.hashCode);
    _$hash = $jc(_$hash, size_gt.hashCode);
    _$hash = $jc(_$hash, size_gte.hashCode);
    _$hash = $jc(_$hash, width.hashCode);
    _$hash = $jc(_$hash, width_not.hashCode);
    _$hash = $jc(_$hash, width_in.hashCode);
    _$hash = $jc(_$hash, width_not_in.hashCode);
    _$hash = $jc(_$hash, width_lt.hashCode);
    _$hash = $jc(_$hash, width_lte.hashCode);
    _$hash = $jc(_$hash, width_gt.hashCode);
    _$hash = $jc(_$hash, width_gte.hashCode);
    _$hash = $jc(_$hash, height.hashCode);
    _$hash = $jc(_$hash, height_not.hashCode);
    _$hash = $jc(_$hash, height_in.hashCode);
    _$hash = $jc(_$hash, height_not_in.hashCode);
    _$hash = $jc(_$hash, height_lt.hashCode);
    _$hash = $jc(_$hash, height_lte.hashCode);
    _$hash = $jc(_$hash, height_gt.hashCode);
    _$hash = $jc(_$hash, height_gte.hashCode);
    _$hash = $jc(_$hash, fileName.hashCode);
    _$hash = $jc(_$hash, fileName_not.hashCode);
    _$hash = $jc(_$hash, fileName_in.hashCode);
    _$hash = $jc(_$hash, fileName_not_in.hashCode);
    _$hash = $jc(_$hash, fileName_contains.hashCode);
    _$hash = $jc(_$hash, fileName_not_contains.hashCode);
    _$hash = $jc(_$hash, fileName_starts_with.hashCode);
    _$hash = $jc(_$hash, fileName_not_starts_with.hashCode);
    _$hash = $jc(_$hash, fileName_ends_with.hashCode);
    _$hash = $jc(_$hash, fileName_not_ends_with.hashCode);
    _$hash = $jc(_$hash, handle.hashCode);
    _$hash = $jc(_$hash, handle_not.hashCode);
    _$hash = $jc(_$hash, handle_in.hashCode);
    _$hash = $jc(_$hash, handle_not_in.hashCode);
    _$hash = $jc(_$hash, handle_contains.hashCode);
    _$hash = $jc(_$hash, handle_not_contains.hashCode);
    _$hash = $jc(_$hash, handle_starts_with.hashCode);
    _$hash = $jc(_$hash, handle_not_starts_with.hashCode);
    _$hash = $jc(_$hash, handle_ends_with.hashCode);
    _$hash = $jc(_$hash, handle_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_every.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_some.hashCode);
    _$hash = $jc(_$hash, headerImageArticle_none.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, upload.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('mimeType', mimeType)
          ..add('mimeType_not', mimeType_not)
          ..add('mimeType_in', mimeType_in)
          ..add('mimeType_not_in', mimeType_not_in)
          ..add('mimeType_contains', mimeType_contains)
          ..add('mimeType_not_contains', mimeType_not_contains)
          ..add('mimeType_starts_with', mimeType_starts_with)
          ..add('mimeType_not_starts_with', mimeType_not_starts_with)
          ..add('mimeType_ends_with', mimeType_ends_with)
          ..add('mimeType_not_ends_with', mimeType_not_ends_with)
          ..add('size', size)
          ..add('size_not', size_not)
          ..add('size_in', size_in)
          ..add('size_not_in', size_not_in)
          ..add('size_lt', size_lt)
          ..add('size_lte', size_lte)
          ..add('size_gt', size_gt)
          ..add('size_gte', size_gte)
          ..add('width', width)
          ..add('width_not', width_not)
          ..add('width_in', width_in)
          ..add('width_not_in', width_not_in)
          ..add('width_lt', width_lt)
          ..add('width_lte', width_lte)
          ..add('width_gt', width_gt)
          ..add('width_gte', width_gte)
          ..add('height', height)
          ..add('height_not', height_not)
          ..add('height_in', height_in)
          ..add('height_not_in', height_not_in)
          ..add('height_lt', height_lt)
          ..add('height_lte', height_lte)
          ..add('height_gt', height_gt)
          ..add('height_gte', height_gte)
          ..add('fileName', fileName)
          ..add('fileName_not', fileName_not)
          ..add('fileName_in', fileName_in)
          ..add('fileName_not_in', fileName_not_in)
          ..add('fileName_contains', fileName_contains)
          ..add('fileName_not_contains', fileName_not_contains)
          ..add('fileName_starts_with', fileName_starts_with)
          ..add('fileName_not_starts_with', fileName_not_starts_with)
          ..add('fileName_ends_with', fileName_ends_with)
          ..add('fileName_not_ends_with', fileName_not_ends_with)
          ..add('handle', handle)
          ..add('handle_not', handle_not)
          ..add('handle_in', handle_in)
          ..add('handle_not_in', handle_not_in)
          ..add('handle_contains', handle_contains)
          ..add('handle_not_contains', handle_not_contains)
          ..add('handle_starts_with', handle_starts_with)
          ..add('handle_not_starts_with', handle_not_starts_with)
          ..add('handle_ends_with', handle_ends_with)
          ..add('handle_not_ends_with', handle_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('headerImageArticle_every', headerImageArticle_every)
          ..add('headerImageArticle_some', headerImageArticle_some)
          ..add('headerImageArticle_none', headerImageArticle_none)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('upload', upload))
        .toString();
  }
}

class GAssetWhereInputBuilder
    implements Builder<GAssetWhereInput, GAssetWhereInputBuilder> {
  _$GAssetWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GAssetWhereInput>? _AND;
  ListBuilder<GAssetWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetWhereInput>();
  set AND(ListBuilder<GAssetWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetWhereInput>? _OR;
  ListBuilder<GAssetWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetWhereInput>();
  set OR(ListBuilder<GAssetWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetWhereInput>? _NOT;
  ListBuilder<GAssetWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetWhereInput>();
  set NOT(ListBuilder<GAssetWhereInput>? NOT) => _$this._NOT = NOT;

  GAssetWhereStageInputBuilder? _documentInStages_every;
  GAssetWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GAssetWhereStageInputBuilder();
  set documentInStages_every(
          GAssetWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GAssetWhereStageInputBuilder? _documentInStages_some;
  GAssetWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GAssetWhereStageInputBuilder();
  set documentInStages_some(
          GAssetWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GAssetWhereStageInputBuilder? _documentInStages_none;
  GAssetWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GAssetWhereStageInputBuilder();
  set documentInStages_none(
          GAssetWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  String? _mimeType_not;
  String? get mimeType_not => _$this._mimeType_not;
  set mimeType_not(String? mimeType_not) => _$this._mimeType_not = mimeType_not;

  ListBuilder<String?>? _mimeType_in;
  ListBuilder<String?> get mimeType_in =>
      _$this._mimeType_in ??= new ListBuilder<String?>();
  set mimeType_in(ListBuilder<String?>? mimeType_in) =>
      _$this._mimeType_in = mimeType_in;

  ListBuilder<String?>? _mimeType_not_in;
  ListBuilder<String?> get mimeType_not_in =>
      _$this._mimeType_not_in ??= new ListBuilder<String?>();
  set mimeType_not_in(ListBuilder<String?>? mimeType_not_in) =>
      _$this._mimeType_not_in = mimeType_not_in;

  String? _mimeType_contains;
  String? get mimeType_contains => _$this._mimeType_contains;
  set mimeType_contains(String? mimeType_contains) =>
      _$this._mimeType_contains = mimeType_contains;

  String? _mimeType_not_contains;
  String? get mimeType_not_contains => _$this._mimeType_not_contains;
  set mimeType_not_contains(String? mimeType_not_contains) =>
      _$this._mimeType_not_contains = mimeType_not_contains;

  String? _mimeType_starts_with;
  String? get mimeType_starts_with => _$this._mimeType_starts_with;
  set mimeType_starts_with(String? mimeType_starts_with) =>
      _$this._mimeType_starts_with = mimeType_starts_with;

  String? _mimeType_not_starts_with;
  String? get mimeType_not_starts_with => _$this._mimeType_not_starts_with;
  set mimeType_not_starts_with(String? mimeType_not_starts_with) =>
      _$this._mimeType_not_starts_with = mimeType_not_starts_with;

  String? _mimeType_ends_with;
  String? get mimeType_ends_with => _$this._mimeType_ends_with;
  set mimeType_ends_with(String? mimeType_ends_with) =>
      _$this._mimeType_ends_with = mimeType_ends_with;

  String? _mimeType_not_ends_with;
  String? get mimeType_not_ends_with => _$this._mimeType_not_ends_with;
  set mimeType_not_ends_with(String? mimeType_not_ends_with) =>
      _$this._mimeType_not_ends_with = mimeType_not_ends_with;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  double? _size_not;
  double? get size_not => _$this._size_not;
  set size_not(double? size_not) => _$this._size_not = size_not;

  ListBuilder<double?>? _size_in;
  ListBuilder<double?> get size_in =>
      _$this._size_in ??= new ListBuilder<double?>();
  set size_in(ListBuilder<double?>? size_in) => _$this._size_in = size_in;

  ListBuilder<double?>? _size_not_in;
  ListBuilder<double?> get size_not_in =>
      _$this._size_not_in ??= new ListBuilder<double?>();
  set size_not_in(ListBuilder<double?>? size_not_in) =>
      _$this._size_not_in = size_not_in;

  double? _size_lt;
  double? get size_lt => _$this._size_lt;
  set size_lt(double? size_lt) => _$this._size_lt = size_lt;

  double? _size_lte;
  double? get size_lte => _$this._size_lte;
  set size_lte(double? size_lte) => _$this._size_lte = size_lte;

  double? _size_gt;
  double? get size_gt => _$this._size_gt;
  set size_gt(double? size_gt) => _$this._size_gt = size_gt;

  double? _size_gte;
  double? get size_gte => _$this._size_gte;
  set size_gte(double? size_gte) => _$this._size_gte = size_gte;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _width_not;
  double? get width_not => _$this._width_not;
  set width_not(double? width_not) => _$this._width_not = width_not;

  ListBuilder<double?>? _width_in;
  ListBuilder<double?> get width_in =>
      _$this._width_in ??= new ListBuilder<double?>();
  set width_in(ListBuilder<double?>? width_in) => _$this._width_in = width_in;

  ListBuilder<double?>? _width_not_in;
  ListBuilder<double?> get width_not_in =>
      _$this._width_not_in ??= new ListBuilder<double?>();
  set width_not_in(ListBuilder<double?>? width_not_in) =>
      _$this._width_not_in = width_not_in;

  double? _width_lt;
  double? get width_lt => _$this._width_lt;
  set width_lt(double? width_lt) => _$this._width_lt = width_lt;

  double? _width_lte;
  double? get width_lte => _$this._width_lte;
  set width_lte(double? width_lte) => _$this._width_lte = width_lte;

  double? _width_gt;
  double? get width_gt => _$this._width_gt;
  set width_gt(double? width_gt) => _$this._width_gt = width_gt;

  double? _width_gte;
  double? get width_gte => _$this._width_gte;
  set width_gte(double? width_gte) => _$this._width_gte = width_gte;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _height_not;
  double? get height_not => _$this._height_not;
  set height_not(double? height_not) => _$this._height_not = height_not;

  ListBuilder<double?>? _height_in;
  ListBuilder<double?> get height_in =>
      _$this._height_in ??= new ListBuilder<double?>();
  set height_in(ListBuilder<double?>? height_in) =>
      _$this._height_in = height_in;

  ListBuilder<double?>? _height_not_in;
  ListBuilder<double?> get height_not_in =>
      _$this._height_not_in ??= new ListBuilder<double?>();
  set height_not_in(ListBuilder<double?>? height_not_in) =>
      _$this._height_not_in = height_not_in;

  double? _height_lt;
  double? get height_lt => _$this._height_lt;
  set height_lt(double? height_lt) => _$this._height_lt = height_lt;

  double? _height_lte;
  double? get height_lte => _$this._height_lte;
  set height_lte(double? height_lte) => _$this._height_lte = height_lte;

  double? _height_gt;
  double? get height_gt => _$this._height_gt;
  set height_gt(double? height_gt) => _$this._height_gt = height_gt;

  double? _height_gte;
  double? get height_gte => _$this._height_gte;
  set height_gte(double? height_gte) => _$this._height_gte = height_gte;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  String? _fileName_not;
  String? get fileName_not => _$this._fileName_not;
  set fileName_not(String? fileName_not) => _$this._fileName_not = fileName_not;

  ListBuilder<String?>? _fileName_in;
  ListBuilder<String?> get fileName_in =>
      _$this._fileName_in ??= new ListBuilder<String?>();
  set fileName_in(ListBuilder<String?>? fileName_in) =>
      _$this._fileName_in = fileName_in;

  ListBuilder<String?>? _fileName_not_in;
  ListBuilder<String?> get fileName_not_in =>
      _$this._fileName_not_in ??= new ListBuilder<String?>();
  set fileName_not_in(ListBuilder<String?>? fileName_not_in) =>
      _$this._fileName_not_in = fileName_not_in;

  String? _fileName_contains;
  String? get fileName_contains => _$this._fileName_contains;
  set fileName_contains(String? fileName_contains) =>
      _$this._fileName_contains = fileName_contains;

  String? _fileName_not_contains;
  String? get fileName_not_contains => _$this._fileName_not_contains;
  set fileName_not_contains(String? fileName_not_contains) =>
      _$this._fileName_not_contains = fileName_not_contains;

  String? _fileName_starts_with;
  String? get fileName_starts_with => _$this._fileName_starts_with;
  set fileName_starts_with(String? fileName_starts_with) =>
      _$this._fileName_starts_with = fileName_starts_with;

  String? _fileName_not_starts_with;
  String? get fileName_not_starts_with => _$this._fileName_not_starts_with;
  set fileName_not_starts_with(String? fileName_not_starts_with) =>
      _$this._fileName_not_starts_with = fileName_not_starts_with;

  String? _fileName_ends_with;
  String? get fileName_ends_with => _$this._fileName_ends_with;
  set fileName_ends_with(String? fileName_ends_with) =>
      _$this._fileName_ends_with = fileName_ends_with;

  String? _fileName_not_ends_with;
  String? get fileName_not_ends_with => _$this._fileName_not_ends_with;
  set fileName_not_ends_with(String? fileName_not_ends_with) =>
      _$this._fileName_not_ends_with = fileName_not_ends_with;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _handle_not;
  String? get handle_not => _$this._handle_not;
  set handle_not(String? handle_not) => _$this._handle_not = handle_not;

  ListBuilder<String?>? _handle_in;
  ListBuilder<String?> get handle_in =>
      _$this._handle_in ??= new ListBuilder<String?>();
  set handle_in(ListBuilder<String?>? handle_in) =>
      _$this._handle_in = handle_in;

  ListBuilder<String?>? _handle_not_in;
  ListBuilder<String?> get handle_not_in =>
      _$this._handle_not_in ??= new ListBuilder<String?>();
  set handle_not_in(ListBuilder<String?>? handle_not_in) =>
      _$this._handle_not_in = handle_not_in;

  String? _handle_contains;
  String? get handle_contains => _$this._handle_contains;
  set handle_contains(String? handle_contains) =>
      _$this._handle_contains = handle_contains;

  String? _handle_not_contains;
  String? get handle_not_contains => _$this._handle_not_contains;
  set handle_not_contains(String? handle_not_contains) =>
      _$this._handle_not_contains = handle_not_contains;

  String? _handle_starts_with;
  String? get handle_starts_with => _$this._handle_starts_with;
  set handle_starts_with(String? handle_starts_with) =>
      _$this._handle_starts_with = handle_starts_with;

  String? _handle_not_starts_with;
  String? get handle_not_starts_with => _$this._handle_not_starts_with;
  set handle_not_starts_with(String? handle_not_starts_with) =>
      _$this._handle_not_starts_with = handle_not_starts_with;

  String? _handle_ends_with;
  String? get handle_ends_with => _$this._handle_ends_with;
  set handle_ends_with(String? handle_ends_with) =>
      _$this._handle_ends_with = handle_ends_with;

  String? _handle_not_ends_with;
  String? get handle_not_ends_with => _$this._handle_not_ends_with;
  set handle_not_ends_with(String? handle_not_ends_with) =>
      _$this._handle_not_ends_with = handle_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GArticleWhereInputBuilder? _headerImageArticle_every;
  GArticleWhereInputBuilder get headerImageArticle_every =>
      _$this._headerImageArticle_every ??= new GArticleWhereInputBuilder();
  set headerImageArticle_every(
          GArticleWhereInputBuilder? headerImageArticle_every) =>
      _$this._headerImageArticle_every = headerImageArticle_every;

  GArticleWhereInputBuilder? _headerImageArticle_some;
  GArticleWhereInputBuilder get headerImageArticle_some =>
      _$this._headerImageArticle_some ??= new GArticleWhereInputBuilder();
  set headerImageArticle_some(
          GArticleWhereInputBuilder? headerImageArticle_some) =>
      _$this._headerImageArticle_some = headerImageArticle_some;

  GArticleWhereInputBuilder? _headerImageArticle_none;
  GArticleWhereInputBuilder get headerImageArticle_none =>
      _$this._headerImageArticle_none ??= new GArticleWhereInputBuilder();
  set headerImageArticle_none(
          GArticleWhereInputBuilder? headerImageArticle_none) =>
      _$this._headerImageArticle_none = headerImageArticle_none;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  GAssetUploadWhereInputBuilder? _upload;
  GAssetUploadWhereInputBuilder get upload =>
      _$this._upload ??= new GAssetUploadWhereInputBuilder();
  set upload(GAssetUploadWhereInputBuilder? upload) => _$this._upload = upload;

  GAssetWhereInputBuilder();

  GAssetWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _mimeType = $v.mimeType;
      _mimeType_not = $v.mimeType_not;
      _mimeType_in = $v.mimeType_in?.toBuilder();
      _mimeType_not_in = $v.mimeType_not_in?.toBuilder();
      _mimeType_contains = $v.mimeType_contains;
      _mimeType_not_contains = $v.mimeType_not_contains;
      _mimeType_starts_with = $v.mimeType_starts_with;
      _mimeType_not_starts_with = $v.mimeType_not_starts_with;
      _mimeType_ends_with = $v.mimeType_ends_with;
      _mimeType_not_ends_with = $v.mimeType_not_ends_with;
      _size = $v.size;
      _size_not = $v.size_not;
      _size_in = $v.size_in?.toBuilder();
      _size_not_in = $v.size_not_in?.toBuilder();
      _size_lt = $v.size_lt;
      _size_lte = $v.size_lte;
      _size_gt = $v.size_gt;
      _size_gte = $v.size_gte;
      _width = $v.width;
      _width_not = $v.width_not;
      _width_in = $v.width_in?.toBuilder();
      _width_not_in = $v.width_not_in?.toBuilder();
      _width_lt = $v.width_lt;
      _width_lte = $v.width_lte;
      _width_gt = $v.width_gt;
      _width_gte = $v.width_gte;
      _height = $v.height;
      _height_not = $v.height_not;
      _height_in = $v.height_in?.toBuilder();
      _height_not_in = $v.height_not_in?.toBuilder();
      _height_lt = $v.height_lt;
      _height_lte = $v.height_lte;
      _height_gt = $v.height_gt;
      _height_gte = $v.height_gte;
      _fileName = $v.fileName;
      _fileName_not = $v.fileName_not;
      _fileName_in = $v.fileName_in?.toBuilder();
      _fileName_not_in = $v.fileName_not_in?.toBuilder();
      _fileName_contains = $v.fileName_contains;
      _fileName_not_contains = $v.fileName_not_contains;
      _fileName_starts_with = $v.fileName_starts_with;
      _fileName_not_starts_with = $v.fileName_not_starts_with;
      _fileName_ends_with = $v.fileName_ends_with;
      _fileName_not_ends_with = $v.fileName_not_ends_with;
      _handle = $v.handle;
      _handle_not = $v.handle_not;
      _handle_in = $v.handle_in?.toBuilder();
      _handle_not_in = $v.handle_not_in?.toBuilder();
      _handle_contains = $v.handle_contains;
      _handle_not_contains = $v.handle_not_contains;
      _handle_starts_with = $v.handle_starts_with;
      _handle_not_starts_with = $v.handle_not_starts_with;
      _handle_ends_with = $v.handle_ends_with;
      _handle_not_ends_with = $v.handle_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _headerImageArticle_every = $v.headerImageArticle_every?.toBuilder();
      _headerImageArticle_some = $v.headerImageArticle_some?.toBuilder();
      _headerImageArticle_none = $v.headerImageArticle_none?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _upload = $v.upload?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereInput;
  }

  @override
  void update(void Function(GAssetWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetWhereInput build() => _build();

  _$GAssetWhereInput _build() {
    _$GAssetWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              mimeType: mimeType,
              mimeType_not: mimeType_not,
              mimeType_in: _mimeType_in?.build(),
              mimeType_not_in: _mimeType_not_in?.build(),
              mimeType_contains: mimeType_contains,
              mimeType_not_contains: mimeType_not_contains,
              mimeType_starts_with: mimeType_starts_with,
              mimeType_not_starts_with: mimeType_not_starts_with,
              mimeType_ends_with: mimeType_ends_with,
              mimeType_not_ends_with: mimeType_not_ends_with,
              size: size,
              size_not: size_not,
              size_in: _size_in?.build(),
              size_not_in: _size_not_in?.build(),
              size_lt: size_lt,
              size_lte: size_lte,
              size_gt: size_gt,
              size_gte: size_gte,
              width: width,
              width_not: width_not,
              width_in: _width_in?.build(),
              width_not_in: _width_not_in?.build(),
              width_lt: width_lt,
              width_lte: width_lte,
              width_gt: width_gt,
              width_gte: width_gte,
              height: height,
              height_not: height_not,
              height_in: _height_in?.build(),
              height_not_in: _height_not_in?.build(),
              height_lt: height_lt,
              height_lte: height_lte,
              height_gt: height_gt,
              height_gte: height_gte,
              fileName: fileName,
              fileName_not: fileName_not,
              fileName_in: _fileName_in?.build(),
              fileName_not_in: _fileName_not_in?.build(),
              fileName_contains: fileName_contains,
              fileName_not_contains: fileName_not_contains,
              fileName_starts_with: fileName_starts_with,
              fileName_not_starts_with: fileName_not_starts_with,
              fileName_ends_with: fileName_ends_with,
              fileName_not_ends_with: fileName_not_ends_with,
              handle: handle,
              handle_not: handle_not,
              handle_in: _handle_in?.build(),
              handle_not_in: _handle_not_in?.build(),
              handle_contains: handle_contains,
              handle_not_contains: handle_not_contains,
              handle_starts_with: handle_starts_with,
              handle_not_starts_with: handle_not_starts_with,
              handle_ends_with: handle_ends_with,
              handle_not_ends_with: handle_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              headerImageArticle_every: _headerImageArticle_every?.build(),
              headerImageArticle_some: _headerImageArticle_some?.build(),
              headerImageArticle_none: _headerImageArticle_none?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              upload: _upload?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();

        _$failedField = 'mimeType_in';
        _mimeType_in?.build();
        _$failedField = 'mimeType_not_in';
        _mimeType_not_in?.build();

        _$failedField = 'size_in';
        _size_in?.build();
        _$failedField = 'size_not_in';
        _size_not_in?.build();

        _$failedField = 'width_in';
        _width_in?.build();
        _$failedField = 'width_not_in';
        _width_not_in?.build();

        _$failedField = 'height_in';
        _height_in?.build();
        _$failedField = 'height_not_in';
        _height_not_in?.build();

        _$failedField = 'fileName_in';
        _fileName_in?.build();
        _$failedField = 'fileName_not_in';
        _fileName_not_in?.build();

        _$failedField = 'handle_in';
        _handle_in?.build();
        _$failedField = 'handle_not_in';
        _handle_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'headerImageArticle_every';
        _headerImageArticle_every?.build();
        _$failedField = 'headerImageArticle_some';
        _headerImageArticle_some?.build();
        _$failedField = 'headerImageArticle_none';
        _headerImageArticle_none?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();
        _$failedField = 'upload';
        _upload?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereStageInput extends GAssetWhereStageInput {
  @override
  final BuiltList<GAssetWhereStageInput>? AND;
  @override
  final BuiltList<GAssetWhereStageInput>? OR;
  @override
  final BuiltList<GAssetWhereStageInput>? NOT;
  @override
  final GStage? stage;
  @override
  final GAssetWhereComparatorInput? compareWithParent;

  factory _$GAssetWhereStageInput(
          [void Function(GAssetWhereStageInputBuilder)? updates]) =>
      (new GAssetWhereStageInputBuilder()..update(updates))._build();

  _$GAssetWhereStageInput._(
      {this.AND, this.OR, this.NOT, this.stage, this.compareWithParent})
      : super._();

  @override
  GAssetWhereStageInput rebuild(
          void Function(GAssetWhereStageInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereStageInputBuilder toBuilder() =>
      new GAssetWhereStageInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereStageInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        stage == other.stage &&
        compareWithParent == other.compareWithParent;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, compareWithParent.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetWhereStageInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('stage', stage)
          ..add('compareWithParent', compareWithParent))
        .toString();
  }
}

class GAssetWhereStageInputBuilder
    implements Builder<GAssetWhereStageInput, GAssetWhereStageInputBuilder> {
  _$GAssetWhereStageInput? _$v;

  ListBuilder<GAssetWhereStageInput>? _AND;
  ListBuilder<GAssetWhereStageInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetWhereStageInput>();
  set AND(ListBuilder<GAssetWhereStageInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetWhereStageInput>? _OR;
  ListBuilder<GAssetWhereStageInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetWhereStageInput>();
  set OR(ListBuilder<GAssetWhereStageInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetWhereStageInput>? _NOT;
  ListBuilder<GAssetWhereStageInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetWhereStageInput>();
  set NOT(ListBuilder<GAssetWhereStageInput>? NOT) => _$this._NOT = NOT;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  GAssetWhereComparatorInputBuilder? _compareWithParent;
  GAssetWhereComparatorInputBuilder get compareWithParent =>
      _$this._compareWithParent ??= new GAssetWhereComparatorInputBuilder();
  set compareWithParent(GAssetWhereComparatorInputBuilder? compareWithParent) =>
      _$this._compareWithParent = compareWithParent;

  GAssetWhereStageInputBuilder();

  GAssetWhereStageInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _stage = $v.stage;
      _compareWithParent = $v.compareWithParent?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereStageInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereStageInput;
  }

  @override
  void update(void Function(GAssetWhereStageInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetWhereStageInput build() => _build();

  _$GAssetWhereStageInput _build() {
    _$GAssetWhereStageInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetWhereStageInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              stage: stage,
              compareWithParent: _compareWithParent?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'compareWithParent';
        _compareWithParent?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GAssetWhereStageInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereUniqueInput extends GAssetWhereUniqueInput {
  @override
  final String? id;

  factory _$GAssetWhereUniqueInput(
          [void Function(GAssetWhereUniqueInputBuilder)? updates]) =>
      (new GAssetWhereUniqueInputBuilder()..update(updates))._build();

  _$GAssetWhereUniqueInput._({this.id}) : super._();

  @override
  GAssetWhereUniqueInput rebuild(
          void Function(GAssetWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereUniqueInputBuilder toBuilder() =>
      new GAssetWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GAssetWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GAssetWhereUniqueInputBuilder
    implements Builder<GAssetWhereUniqueInput, GAssetWhereUniqueInputBuilder> {
  _$GAssetWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GAssetWhereUniqueInputBuilder();

  GAssetWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereUniqueInput;
  }

  @override
  void update(void Function(GAssetWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GAssetWhereUniqueInput build() => _build();

  _$GAssetWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GAssetWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesConnectInput extends GCategoryArticlesConnectInput {
  @override
  final GArticleConnectInput? Article;

  factory _$GCategoryArticlesConnectInput(
          [void Function(GCategoryArticlesConnectInputBuilder)? updates]) =>
      (new GCategoryArticlesConnectInputBuilder()..update(updates))._build();

  _$GCategoryArticlesConnectInput._({this.Article}) : super._();

  @override
  GCategoryArticlesConnectInput rebuild(
          void Function(GCategoryArticlesConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesConnectInputBuilder toBuilder() =>
      new GCategoryArticlesConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesConnectInput && Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryArticlesConnectInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesConnectInputBuilder
    implements
        Builder<GCategoryArticlesConnectInput,
            GCategoryArticlesConnectInputBuilder> {
  _$GCategoryArticlesConnectInput? _$v;

  GArticleConnectInputBuilder? _Article;
  GArticleConnectInputBuilder get Article =>
      _$this._Article ??= new GArticleConnectInputBuilder();
  set Article(GArticleConnectInputBuilder? Article) =>
      _$this._Article = Article;

  GCategoryArticlesConnectInputBuilder();

  GCategoryArticlesConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesConnectInput;
  }

  @override
  void update(void Function(GCategoryArticlesConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesConnectInput build() => _build();

  _$GCategoryArticlesConnectInput _build() {
    _$GCategoryArticlesConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesConnectInput._(Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesCreateInput extends GCategoryArticlesCreateInput {
  @override
  final GArticleCreateInput? Article;

  factory _$GCategoryArticlesCreateInput(
          [void Function(GCategoryArticlesCreateInputBuilder)? updates]) =>
      (new GCategoryArticlesCreateInputBuilder()..update(updates))._build();

  _$GCategoryArticlesCreateInput._({this.Article}) : super._();

  @override
  GCategoryArticlesCreateInput rebuild(
          void Function(GCategoryArticlesCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesCreateInputBuilder toBuilder() =>
      new GCategoryArticlesCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesCreateInput && Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryArticlesCreateInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesCreateInputBuilder
    implements
        Builder<GCategoryArticlesCreateInput,
            GCategoryArticlesCreateInputBuilder> {
  _$GCategoryArticlesCreateInput? _$v;

  GArticleCreateInputBuilder? _Article;
  GArticleCreateInputBuilder get Article =>
      _$this._Article ??= new GArticleCreateInputBuilder();
  set Article(GArticleCreateInputBuilder? Article) => _$this._Article = Article;

  GCategoryArticlesCreateInputBuilder();

  GCategoryArticlesCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesCreateInput;
  }

  @override
  void update(void Function(GCategoryArticlesCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesCreateInput build() => _build();

  _$GCategoryArticlesCreateInput _build() {
    _$GCategoryArticlesCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesCreateInput._(Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesCreateManyInlineInput
    extends GCategoryArticlesCreateManyInlineInput {
  @override
  final BuiltList<GCategoryArticlesCreateInput>? create;
  @override
  final BuiltList<GCategoryArticlesWhereUniqueInput>? connect;

  factory _$GCategoryArticlesCreateManyInlineInput(
          [void Function(GCategoryArticlesCreateManyInlineInputBuilder)?
              updates]) =>
      (new GCategoryArticlesCreateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GCategoryArticlesCreateManyInlineInput._({this.create, this.connect})
      : super._();

  @override
  GCategoryArticlesCreateManyInlineInput rebuild(
          void Function(GCategoryArticlesCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesCreateManyInlineInputBuilder toBuilder() =>
      new GCategoryArticlesCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryArticlesCreateManyInlineInputBuilder
    implements
        Builder<GCategoryArticlesCreateManyInlineInput,
            GCategoryArticlesCreateManyInlineInputBuilder> {
  _$GCategoryArticlesCreateManyInlineInput? _$v;

  ListBuilder<GCategoryArticlesCreateInput>? _create;
  ListBuilder<GCategoryArticlesCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryArticlesCreateInput>();
  set create(ListBuilder<GCategoryArticlesCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryArticlesWhereUniqueInput>? _connect;
  ListBuilder<GCategoryArticlesWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryArticlesWhereUniqueInput>();
  set connect(ListBuilder<GCategoryArticlesWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GCategoryArticlesCreateManyInlineInputBuilder();

  GCategoryArticlesCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesCreateManyInlineInput build() => _build();

  _$GCategoryArticlesCreateManyInlineInput _build() {
    _$GCategoryArticlesCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesCreateOneInlineInput
    extends GCategoryArticlesCreateOneInlineInput {
  @override
  final GCategoryArticlesCreateInput? create;
  @override
  final GCategoryArticlesWhereUniqueInput? connect;

  factory _$GCategoryArticlesCreateOneInlineInput(
          [void Function(GCategoryArticlesCreateOneInlineInputBuilder)?
              updates]) =>
      (new GCategoryArticlesCreateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GCategoryArticlesCreateOneInlineInput._({this.create, this.connect})
      : super._();

  @override
  GCategoryArticlesCreateOneInlineInput rebuild(
          void Function(GCategoryArticlesCreateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesCreateOneInlineInputBuilder toBuilder() =>
      new GCategoryArticlesCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryArticlesCreateOneInlineInputBuilder
    implements
        Builder<GCategoryArticlesCreateOneInlineInput,
            GCategoryArticlesCreateOneInlineInputBuilder> {
  _$GCategoryArticlesCreateOneInlineInput? _$v;

  GCategoryArticlesCreateInputBuilder? _create;
  GCategoryArticlesCreateInputBuilder get create =>
      _$this._create ??= new GCategoryArticlesCreateInputBuilder();
  set create(GCategoryArticlesCreateInputBuilder? create) =>
      _$this._create = create;

  GCategoryArticlesWhereUniqueInputBuilder? _connect;
  GCategoryArticlesWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryArticlesWhereUniqueInputBuilder();
  set connect(GCategoryArticlesWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GCategoryArticlesCreateOneInlineInputBuilder();

  GCategoryArticlesCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesCreateOneInlineInput build() => _build();

  _$GCategoryArticlesCreateOneInlineInput _build() {
    _$GCategoryArticlesCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpdateInput extends GCategoryArticlesUpdateInput {
  @override
  final GArticleUpdateInput? Article;

  factory _$GCategoryArticlesUpdateInput(
          [void Function(GCategoryArticlesUpdateInputBuilder)? updates]) =>
      (new GCategoryArticlesUpdateInputBuilder()..update(updates))._build();

  _$GCategoryArticlesUpdateInput._({this.Article}) : super._();

  @override
  GCategoryArticlesUpdateInput rebuild(
          void Function(GCategoryArticlesUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpdateInputBuilder toBuilder() =>
      new GCategoryArticlesUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpdateInput && Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryArticlesUpdateInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesUpdateInputBuilder
    implements
        Builder<GCategoryArticlesUpdateInput,
            GCategoryArticlesUpdateInputBuilder> {
  _$GCategoryArticlesUpdateInput? _$v;

  GArticleUpdateInputBuilder? _Article;
  GArticleUpdateInputBuilder get Article =>
      _$this._Article ??= new GArticleUpdateInputBuilder();
  set Article(GArticleUpdateInputBuilder? Article) => _$this._Article = Article;

  GCategoryArticlesUpdateInputBuilder();

  GCategoryArticlesUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpdateInput;
  }

  @override
  void update(void Function(GCategoryArticlesUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpdateInput build() => _build();

  _$GCategoryArticlesUpdateInput _build() {
    _$GCategoryArticlesUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpdateInput._(Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpdateManyInlineInput
    extends GCategoryArticlesUpdateManyInlineInput {
  @override
  final BuiltList<GCategoryArticlesCreateInput>? create;
  @override
  final BuiltList<GCategoryArticlesConnectInput>? connect;
  @override
  final BuiltList<GCategoryArticlesWhereUniqueInput>? set;
  @override
  final BuiltList<GCategoryArticlesUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GCategoryArticlesUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GCategoryArticlesWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GCategoryArticlesWhereUniqueInput>? delete;

  factory _$GCategoryArticlesUpdateManyInlineInput(
          [void Function(GCategoryArticlesUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GCategoryArticlesUpdateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GCategoryArticlesUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryArticlesUpdateManyInlineInput rebuild(
          void Function(GCategoryArticlesUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpdateManyInlineInputBuilder toBuilder() =>
      new GCategoryArticlesUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryArticlesUpdateManyInlineInputBuilder
    implements
        Builder<GCategoryArticlesUpdateManyInlineInput,
            GCategoryArticlesUpdateManyInlineInputBuilder> {
  _$GCategoryArticlesUpdateManyInlineInput? _$v;

  ListBuilder<GCategoryArticlesCreateInput>? _create;
  ListBuilder<GCategoryArticlesCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryArticlesCreateInput>();
  set create(ListBuilder<GCategoryArticlesCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryArticlesConnectInput>? _connect;
  ListBuilder<GCategoryArticlesConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryArticlesConnectInput>();
  set connect(ListBuilder<GCategoryArticlesConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GCategoryArticlesWhereUniqueInput>? _set;
  ListBuilder<GCategoryArticlesWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GCategoryArticlesWhereUniqueInput>();
  set set(ListBuilder<GCategoryArticlesWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GCategoryArticlesUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GCategoryArticlesUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GCategoryArticlesUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GCategoryArticlesUpdateWithNestedWhereUniqueInput>?
              updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GCategoryArticlesUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GCategoryArticlesUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GCategoryArticlesUpsertWithNestedWhereUniqueInput>();
  set upsert(
          ListBuilder<GCategoryArticlesUpsertWithNestedWhereUniqueInput>?
              upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GCategoryArticlesWhereUniqueInput>? _disconnect;
  ListBuilder<GCategoryArticlesWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GCategoryArticlesWhereUniqueInput>();
  set disconnect(ListBuilder<GCategoryArticlesWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GCategoryArticlesWhereUniqueInput>? _delete;
  ListBuilder<GCategoryArticlesWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GCategoryArticlesWhereUniqueInput>();
  set delete(ListBuilder<GCategoryArticlesWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GCategoryArticlesUpdateManyInlineInputBuilder();

  GCategoryArticlesUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpdateManyInlineInput build() => _build();

  _$GCategoryArticlesUpdateManyInlineInput _build() {
    _$GCategoryArticlesUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpdateManyWithNestedWhereInput
    extends GCategoryArticlesUpdateManyWithNestedWhereInput {
  @override
  final GArticleUpdateManyWithNestedWhereInput? Article;

  factory _$GCategoryArticlesUpdateManyWithNestedWhereInput(
          [void Function(
                  GCategoryArticlesUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GCategoryArticlesUpdateManyWithNestedWhereInputBuilder()
            ..update(updates))
          ._build();

  _$GCategoryArticlesUpdateManyWithNestedWhereInput._({this.Article})
      : super._();

  @override
  GCategoryArticlesUpdateManyWithNestedWhereInput rebuild(
          void Function(GCategoryArticlesUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GCategoryArticlesUpdateManyWithNestedWhereInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpdateManyWithNestedWhereInput &&
        Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesUpdateManyWithNestedWhereInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GCategoryArticlesUpdateManyWithNestedWhereInput,
            GCategoryArticlesUpdateManyWithNestedWhereInputBuilder> {
  _$GCategoryArticlesUpdateManyWithNestedWhereInput? _$v;

  GArticleUpdateManyWithNestedWhereInputBuilder? _Article;
  GArticleUpdateManyWithNestedWhereInputBuilder get Article =>
      _$this._Article ??= new GArticleUpdateManyWithNestedWhereInputBuilder();
  set Article(GArticleUpdateManyWithNestedWhereInputBuilder? Article) =>
      _$this._Article = Article;

  GCategoryArticlesUpdateManyWithNestedWhereInputBuilder();

  GCategoryArticlesUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesUpdateManyWithNestedWhereInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpdateManyWithNestedWhereInput build() => _build();

  _$GCategoryArticlesUpdateManyWithNestedWhereInput _build() {
    _$GCategoryArticlesUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpdateManyWithNestedWhereInput._(
              Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpdateOneInlineInput
    extends GCategoryArticlesUpdateOneInlineInput {
  @override
  final GCategoryArticlesCreateInput? create;
  @override
  final GCategoryArticlesUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GCategoryArticlesUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GCategoryArticlesWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GCategoryArticlesUpdateOneInlineInput(
          [void Function(GCategoryArticlesUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GCategoryArticlesUpdateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GCategoryArticlesUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryArticlesUpdateOneInlineInput rebuild(
          void Function(GCategoryArticlesUpdateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpdateOneInlineInputBuilder toBuilder() =>
      new GCategoryArticlesUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryArticlesUpdateOneInlineInputBuilder
    implements
        Builder<GCategoryArticlesUpdateOneInlineInput,
            GCategoryArticlesUpdateOneInlineInputBuilder> {
  _$GCategoryArticlesUpdateOneInlineInput? _$v;

  GCategoryArticlesCreateInputBuilder? _create;
  GCategoryArticlesCreateInputBuilder get create =>
      _$this._create ??= new GCategoryArticlesCreateInputBuilder();
  set create(GCategoryArticlesCreateInputBuilder? create) =>
      _$this._create = create;

  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(
          GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??=
          new GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(
          GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GCategoryArticlesWhereUniqueInputBuilder? _connect;
  GCategoryArticlesWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryArticlesWhereUniqueInputBuilder();
  set connect(GCategoryArticlesWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GCategoryArticlesUpdateOneInlineInputBuilder();

  GCategoryArticlesUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpdateOneInlineInput build() => _build();

  _$GCategoryArticlesUpdateOneInlineInput _build() {
    _$GCategoryArticlesUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpdateWithNestedWhereUniqueInput
    extends GCategoryArticlesUpdateWithNestedWhereUniqueInput {
  @override
  final GArticleUpdateWithNestedWhereUniqueInput? Article;

  factory _$GCategoryArticlesUpdateWithNestedWhereUniqueInput(
          [void Function(
                  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          ._build();

  _$GCategoryArticlesUpdateWithNestedWhereUniqueInput._({this.Article})
      : super._();

  @override
  GCategoryArticlesUpdateWithNestedWhereUniqueInput rebuild(
          void Function(
                  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpdateWithNestedWhereUniqueInput &&
        Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesUpdateWithNestedWhereUniqueInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryArticlesUpdateWithNestedWhereUniqueInput,
            GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder> {
  _$GCategoryArticlesUpdateWithNestedWhereUniqueInput? _$v;

  GArticleUpdateWithNestedWhereUniqueInputBuilder? _Article;
  GArticleUpdateWithNestedWhereUniqueInputBuilder get Article =>
      _$this._Article ??= new GArticleUpdateWithNestedWhereUniqueInputBuilder();
  set Article(GArticleUpdateWithNestedWhereUniqueInputBuilder? Article) =>
      _$this._Article = Article;

  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder();

  GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpdateWithNestedWhereUniqueInput build() => _build();

  _$GCategoryArticlesUpdateWithNestedWhereUniqueInput _build() {
    _$GCategoryArticlesUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpdateWithNestedWhereUniqueInput._(
              Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesUpsertWithNestedWhereUniqueInput
    extends GCategoryArticlesUpsertWithNestedWhereUniqueInput {
  @override
  final GArticleUpsertWithNestedWhereUniqueInput? Article;

  factory _$GCategoryArticlesUpsertWithNestedWhereUniqueInput(
          [void Function(
                  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          ._build();

  _$GCategoryArticlesUpsertWithNestedWhereUniqueInput._({this.Article})
      : super._();

  @override
  GCategoryArticlesUpsertWithNestedWhereUniqueInput rebuild(
          void Function(
                  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesUpsertWithNestedWhereUniqueInput &&
        Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryArticlesUpsertWithNestedWhereUniqueInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryArticlesUpsertWithNestedWhereUniqueInput,
            GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder> {
  _$GCategoryArticlesUpsertWithNestedWhereUniqueInput? _$v;

  GArticleUpsertWithNestedWhereUniqueInputBuilder? _Article;
  GArticleUpsertWithNestedWhereUniqueInputBuilder get Article =>
      _$this._Article ??= new GArticleUpsertWithNestedWhereUniqueInputBuilder();
  set Article(GArticleUpsertWithNestedWhereUniqueInputBuilder? Article) =>
      _$this._Article = Article;

  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder();

  GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesUpsertWithNestedWhereUniqueInput build() => _build();

  _$GCategoryArticlesUpsertWithNestedWhereUniqueInput _build() {
    _$GCategoryArticlesUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesUpsertWithNestedWhereUniqueInput._(
              Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesWhereInput extends GCategoryArticlesWhereInput {
  @override
  final GArticleWhereInput? Article;

  factory _$GCategoryArticlesWhereInput(
          [void Function(GCategoryArticlesWhereInputBuilder)? updates]) =>
      (new GCategoryArticlesWhereInputBuilder()..update(updates))._build();

  _$GCategoryArticlesWhereInput._({this.Article}) : super._();

  @override
  GCategoryArticlesWhereInput rebuild(
          void Function(GCategoryArticlesWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesWhereInputBuilder toBuilder() =>
      new GCategoryArticlesWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesWhereInput && Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryArticlesWhereInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesWhereInputBuilder
    implements
        Builder<GCategoryArticlesWhereInput,
            GCategoryArticlesWhereInputBuilder> {
  _$GCategoryArticlesWhereInput? _$v;

  GArticleWhereInputBuilder? _Article;
  GArticleWhereInputBuilder get Article =>
      _$this._Article ??= new GArticleWhereInputBuilder();
  set Article(GArticleWhereInputBuilder? Article) => _$this._Article = Article;

  GCategoryArticlesWhereInputBuilder();

  GCategoryArticlesWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesWhereInput;
  }

  @override
  void update(void Function(GCategoryArticlesWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesWhereInput build() => _build();

  _$GCategoryArticlesWhereInput _build() {
    _$GCategoryArticlesWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesWhereInput._(Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryArticlesWhereUniqueInput
    extends GCategoryArticlesWhereUniqueInput {
  @override
  final GArticleWhereUniqueInput? Article;

  factory _$GCategoryArticlesWhereUniqueInput(
          [void Function(GCategoryArticlesWhereUniqueInputBuilder)? updates]) =>
      (new GCategoryArticlesWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GCategoryArticlesWhereUniqueInput._({this.Article}) : super._();

  @override
  GCategoryArticlesWhereUniqueInput rebuild(
          void Function(GCategoryArticlesWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryArticlesWhereUniqueInputBuilder toBuilder() =>
      new GCategoryArticlesWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryArticlesWhereUniqueInput &&
        Article == other.Article;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, Article.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryArticlesWhereUniqueInput')
          ..add('Article', Article))
        .toString();
  }
}

class GCategoryArticlesWhereUniqueInputBuilder
    implements
        Builder<GCategoryArticlesWhereUniqueInput,
            GCategoryArticlesWhereUniqueInputBuilder> {
  _$GCategoryArticlesWhereUniqueInput? _$v;

  GArticleWhereUniqueInputBuilder? _Article;
  GArticleWhereUniqueInputBuilder get Article =>
      _$this._Article ??= new GArticleWhereUniqueInputBuilder();
  set Article(GArticleWhereUniqueInputBuilder? Article) =>
      _$this._Article = Article;

  GCategoryArticlesWhereUniqueInputBuilder();

  GCategoryArticlesWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _Article = $v.Article?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryArticlesWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryArticlesWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryArticlesWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryArticlesWhereUniqueInput build() => _build();

  _$GCategoryArticlesWhereUniqueInput _build() {
    _$GCategoryArticlesWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryArticlesWhereUniqueInput._(Article: _Article?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'Article';
        _Article?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryArticlesWhereUniqueInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryConnectInput extends GCategoryConnectInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GCategoryConnectInput(
          [void Function(GCategoryConnectInputBuilder)? updates]) =>
      (new GCategoryConnectInputBuilder()..update(updates))._build();

  _$GCategoryConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GCategoryConnectInput', 'where');
  }

  @override
  GCategoryConnectInput rebuild(
          void Function(GCategoryConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryConnectInputBuilder toBuilder() =>
      new GCategoryConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GCategoryConnectInputBuilder
    implements Builder<GCategoryConnectInput, GCategoryConnectInputBuilder> {
  _$GCategoryConnectInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GCategoryConnectInputBuilder();

  GCategoryConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryConnectInput;
  }

  @override
  void update(void Function(GCategoryConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryConnectInput build() => _build();

  _$GCategoryConnectInput _build() {
    _$GCategoryConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateInput extends GCategoryCreateInput {
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? createdAt;
  @override
  final String? title;
  @override
  final GCategoryArticlesCreateManyInlineInput? articles;

  factory _$GCategoryCreateInput(
          [void Function(GCategoryCreateInputBuilder)? updates]) =>
      (new GCategoryCreateInputBuilder()..update(updates))._build();

  _$GCategoryCreateInput._(
      {this.updatedAt, this.createdAt, this.title, this.articles})
      : super._();

  @override
  GCategoryCreateInput rebuild(
          void Function(GCategoryCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateInputBuilder toBuilder() =>
      new GCategoryCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateInput &&
        updatedAt == other.updatedAt &&
        createdAt == other.createdAt &&
        title == other.title &&
        articles == other.articles;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, articles.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryCreateInput')
          ..add('updatedAt', updatedAt)
          ..add('createdAt', createdAt)
          ..add('title', title)
          ..add('articles', articles))
        .toString();
  }
}

class GCategoryCreateInputBuilder
    implements Builder<GCategoryCreateInput, GCategoryCreateInputBuilder> {
  _$GCategoryCreateInput? _$v;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GCategoryArticlesCreateManyInlineInputBuilder? _articles;
  GCategoryArticlesCreateManyInlineInputBuilder get articles =>
      _$this._articles ??= new GCategoryArticlesCreateManyInlineInputBuilder();
  set articles(GCategoryArticlesCreateManyInlineInputBuilder? articles) =>
      _$this._articles = articles;

  GCategoryCreateInputBuilder();

  GCategoryCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updatedAt = $v.updatedAt?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _title = $v.title;
      _articles = $v.articles?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateInput;
  }

  @override
  void update(void Function(GCategoryCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryCreateInput build() => _build();

  _$GCategoryCreateInput _build() {
    _$GCategoryCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateInput._(
              updatedAt: _updatedAt?.build(),
              createdAt: _createdAt?.build(),
              title: title,
              articles: _articles?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();

        _$failedField = 'articles';
        _articles?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateManyInlineInput extends GCategoryCreateManyInlineInput {
  @override
  final BuiltList<GCategoryCreateInput>? create;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? connect;

  factory _$GCategoryCreateManyInlineInput(
          [void Function(GCategoryCreateManyInlineInputBuilder)? updates]) =>
      (new GCategoryCreateManyInlineInputBuilder()..update(updates))._build();

  _$GCategoryCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GCategoryCreateManyInlineInput rebuild(
          void Function(GCategoryCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateManyInlineInputBuilder toBuilder() =>
      new GCategoryCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryCreateManyInlineInputBuilder
    implements
        Builder<GCategoryCreateManyInlineInput,
            GCategoryCreateManyInlineInputBuilder> {
  _$GCategoryCreateManyInlineInput? _$v;

  ListBuilder<GCategoryCreateInput>? _create;
  ListBuilder<GCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryCreateInput>();
  set create(ListBuilder<GCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryWhereUniqueInput>? _connect;
  ListBuilder<GCategoryWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set connect(ListBuilder<GCategoryWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GCategoryCreateManyInlineInputBuilder();

  GCategoryCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateManyInlineInput;
  }

  @override
  void update(void Function(GCategoryCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryCreateManyInlineInput build() => _build();

  _$GCategoryCreateManyInlineInput _build() {
    _$GCategoryCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateOneInlineInput extends GCategoryCreateOneInlineInput {
  @override
  final GCategoryCreateInput? create;
  @override
  final GCategoryWhereUniqueInput? connect;

  factory _$GCategoryCreateOneInlineInput(
          [void Function(GCategoryCreateOneInlineInputBuilder)? updates]) =>
      (new GCategoryCreateOneInlineInputBuilder()..update(updates))._build();

  _$GCategoryCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GCategoryCreateOneInlineInput rebuild(
          void Function(GCategoryCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateOneInlineInputBuilder toBuilder() =>
      new GCategoryCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryCreateOneInlineInputBuilder
    implements
        Builder<GCategoryCreateOneInlineInput,
            GCategoryCreateOneInlineInputBuilder> {
  _$GCategoryCreateOneInlineInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryWhereUniqueInputBuilder? _connect;
  GCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryWhereUniqueInputBuilder();
  set connect(GCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GCategoryCreateOneInlineInputBuilder();

  GCategoryCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateOneInlineInput;
  }

  @override
  void update(void Function(GCategoryCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryCreateOneInlineInput build() => _build();

  _$GCategoryCreateOneInlineInput _build() {
    _$GCategoryCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryManyWhereInput extends GCategoryManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GCategoryWhereInput>? AND;
  @override
  final BuiltList<GCategoryWhereInput>? OR;
  @override
  final BuiltList<GCategoryWhereInput>? NOT;
  @override
  final GCategoryWhereStageInput? documentInStages_every;
  @override
  final GCategoryWhereStageInput? documentInStages_some;
  @override
  final GCategoryWhereStageInput? documentInStages_none;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final bool? articles_empty;
  @override
  final GCategoryArticlesWhereInput? articles_some;

  factory _$GCategoryManyWhereInput(
          [void Function(GCategoryManyWhereInputBuilder)? updates]) =>
      (new GCategoryManyWhereInputBuilder()..update(updates))._build();

  _$GCategoryManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.articles_empty,
      this.articles_some})
      : super._();

  @override
  GCategoryManyWhereInput rebuild(
          void Function(GCategoryManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryManyWhereInputBuilder toBuilder() =>
      new GCategoryManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        articles_empty == other.articles_empty &&
        articles_some == other.articles_some;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, articles_empty.hashCode);
    _$hash = $jc(_$hash, articles_some.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('articles_empty', articles_empty)
          ..add('articles_some', articles_some))
        .toString();
  }
}

class GCategoryManyWhereInputBuilder
    implements
        Builder<GCategoryManyWhereInput, GCategoryManyWhereInputBuilder> {
  _$GCategoryManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GCategoryWhereInput>? _AND;
  ListBuilder<GCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GCategoryWhereInput>();
  set AND(ListBuilder<GCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GCategoryWhereInput>? _OR;
  ListBuilder<GCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GCategoryWhereInput>();
  set OR(ListBuilder<GCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GCategoryWhereInput>? _NOT;
  ListBuilder<GCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GCategoryWhereInput>();
  set NOT(ListBuilder<GCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  GCategoryWhereStageInputBuilder? _documentInStages_every;
  GCategoryWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_every(
          GCategoryWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GCategoryWhereStageInputBuilder? _documentInStages_some;
  GCategoryWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_some(
          GCategoryWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GCategoryWhereStageInputBuilder? _documentInStages_none;
  GCategoryWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_none(
          GCategoryWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  bool? _articles_empty;
  bool? get articles_empty => _$this._articles_empty;
  set articles_empty(bool? articles_empty) =>
      _$this._articles_empty = articles_empty;

  GCategoryArticlesWhereInputBuilder? _articles_some;
  GCategoryArticlesWhereInputBuilder get articles_some =>
      _$this._articles_some ??= new GCategoryArticlesWhereInputBuilder();
  set articles_some(GCategoryArticlesWhereInputBuilder? articles_some) =>
      _$this._articles_some = articles_some;

  GCategoryManyWhereInputBuilder();

  GCategoryManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _articles_empty = $v.articles_empty;
      _articles_some = $v.articles_some?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryManyWhereInput;
  }

  @override
  void update(void Function(GCategoryManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryManyWhereInput build() => _build();

  _$GCategoryManyWhereInput _build() {
    _$GCategoryManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              articles_empty: articles_empty,
              articles_some: _articles_some?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();
        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();

        _$failedField = 'articles_some';
        _articles_some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateInput extends GCategoryUpdateInput {
  @override
  final String? title;
  @override
  final GCategoryArticlesUpdateManyInlineInput? articles;

  factory _$GCategoryUpdateInput(
          [void Function(GCategoryUpdateInputBuilder)? updates]) =>
      (new GCategoryUpdateInputBuilder()..update(updates))._build();

  _$GCategoryUpdateInput._({this.title, this.articles}) : super._();

  @override
  GCategoryUpdateInput rebuild(
          void Function(GCategoryUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateInputBuilder toBuilder() =>
      new GCategoryUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateInput &&
        title == other.title &&
        articles == other.articles;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, articles.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryUpdateInput')
          ..add('title', title)
          ..add('articles', articles))
        .toString();
  }
}

class GCategoryUpdateInputBuilder
    implements Builder<GCategoryUpdateInput, GCategoryUpdateInputBuilder> {
  _$GCategoryUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GCategoryArticlesUpdateManyInlineInputBuilder? _articles;
  GCategoryArticlesUpdateManyInlineInputBuilder get articles =>
      _$this._articles ??= new GCategoryArticlesUpdateManyInlineInputBuilder();
  set articles(GCategoryArticlesUpdateManyInlineInputBuilder? articles) =>
      _$this._articles = articles;

  GCategoryUpdateInputBuilder();

  GCategoryUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _articles = $v.articles?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateInput;
  }

  @override
  void update(void Function(GCategoryUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateInput build() => _build();

  _$GCategoryUpdateInput _build() {
    _$GCategoryUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateInput._(
              title: title, articles: _articles?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'articles';
        _articles?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyInlineInput extends GCategoryUpdateManyInlineInput {
  @override
  final BuiltList<GCategoryCreateInput>? create;
  @override
  final BuiltList<GCategoryConnectInput>? connect;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? set;
  @override
  final BuiltList<GCategoryUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GCategoryUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? delete;

  factory _$GCategoryUpdateManyInlineInput(
          [void Function(GCategoryUpdateManyInlineInputBuilder)? updates]) =>
      (new GCategoryUpdateManyInlineInputBuilder()..update(updates))._build();

  _$GCategoryUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryUpdateManyInlineInput rebuild(
          void Function(GCategoryUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyInlineInputBuilder toBuilder() =>
      new GCategoryUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryUpdateManyInlineInputBuilder
    implements
        Builder<GCategoryUpdateManyInlineInput,
            GCategoryUpdateManyInlineInputBuilder> {
  _$GCategoryUpdateManyInlineInput? _$v;

  ListBuilder<GCategoryCreateInput>? _create;
  ListBuilder<GCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryCreateInput>();
  set create(ListBuilder<GCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryConnectInput>? _connect;
  ListBuilder<GCategoryConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryConnectInput>();
  set connect(ListBuilder<GCategoryConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GCategoryWhereUniqueInput>? _set;
  ListBuilder<GCategoryWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set set(ListBuilder<GCategoryWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GCategoryWhereUniqueInput>? _disconnect;
  ListBuilder<GCategoryWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set disconnect(ListBuilder<GCategoryWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GCategoryWhereUniqueInput>? _delete;
  ListBuilder<GCategoryWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set delete(ListBuilder<GCategoryWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GCategoryUpdateManyInlineInputBuilder();

  GCategoryUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyInlineInput;
  }

  @override
  void update(void Function(GCategoryUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateManyInlineInput build() => _build();

  _$GCategoryUpdateManyInlineInput _build() {
    _$GCategoryUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyInput extends GCategoryUpdateManyInput {
  @override
  final String? title;

  factory _$GCategoryUpdateManyInput(
          [void Function(GCategoryUpdateManyInputBuilder)? updates]) =>
      (new GCategoryUpdateManyInputBuilder()..update(updates))._build();

  _$GCategoryUpdateManyInput._({this.title}) : super._();

  @override
  GCategoryUpdateManyInput rebuild(
          void Function(GCategoryUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyInputBuilder toBuilder() =>
      new GCategoryUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyInput && title == other.title;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryUpdateManyInput')
          ..add('title', title))
        .toString();
  }
}

class GCategoryUpdateManyInputBuilder
    implements
        Builder<GCategoryUpdateManyInput, GCategoryUpdateManyInputBuilder> {
  _$GCategoryUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GCategoryUpdateManyInputBuilder();

  GCategoryUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyInput;
  }

  @override
  void update(void Function(GCategoryUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateManyInput build() => _build();

  _$GCategoryUpdateManyInput _build() {
    final _$result = _$v ?? new _$GCategoryUpdateManyInput._(title: title);
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyWithNestedWhereInput
    extends GCategoryUpdateManyWithNestedWhereInput {
  @override
  final GCategoryWhereInput where;
  @override
  final GCategoryUpdateManyInput data;

  factory _$GCategoryUpdateManyWithNestedWhereInput(
          [void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GCategoryUpdateManyWithNestedWhereInputBuilder()..update(updates))
          ._build();

  _$GCategoryUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GCategoryUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GCategoryUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GCategoryUpdateManyWithNestedWhereInput rebuild(
          void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GCategoryUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GCategoryUpdateManyWithNestedWhereInput,
            GCategoryUpdateManyWithNestedWhereInputBuilder> {
  _$GCategoryUpdateManyWithNestedWhereInput? _$v;

  GCategoryWhereInputBuilder? _where;
  GCategoryWhereInputBuilder get where =>
      _$this._where ??= new GCategoryWhereInputBuilder();
  set where(GCategoryWhereInputBuilder? where) => _$this._where = where;

  GCategoryUpdateManyInputBuilder? _data;
  GCategoryUpdateManyInputBuilder get data =>
      _$this._data ??= new GCategoryUpdateManyInputBuilder();
  set data(GCategoryUpdateManyInputBuilder? data) => _$this._data = data;

  GCategoryUpdateManyWithNestedWhereInputBuilder();

  GCategoryUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateManyWithNestedWhereInput build() => _build();

  _$GCategoryUpdateManyWithNestedWhereInput _build() {
    _$GCategoryUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateOneInlineInput extends GCategoryUpdateOneInlineInput {
  @override
  final GCategoryCreateInput? create;
  @override
  final GCategoryUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GCategoryUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GCategoryWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GCategoryUpdateOneInlineInput(
          [void Function(GCategoryUpdateOneInlineInputBuilder)? updates]) =>
      (new GCategoryUpdateOneInlineInputBuilder()..update(updates))._build();

  _$GCategoryUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryUpdateOneInlineInput rebuild(
          void Function(GCategoryUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateOneInlineInputBuilder toBuilder() =>
      new GCategoryUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryUpdateOneInlineInputBuilder
    implements
        Builder<GCategoryUpdateOneInlineInput,
            GCategoryUpdateOneInlineInputBuilder> {
  _$GCategoryUpdateOneInlineInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GCategoryUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GCategoryUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GCategoryUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GCategoryUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GCategoryUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GCategoryUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GCategoryWhereUniqueInputBuilder? _connect;
  GCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryWhereUniqueInputBuilder();
  set connect(GCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GCategoryUpdateOneInlineInputBuilder();

  GCategoryUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateOneInlineInput;
  }

  @override
  void update(void Function(GCategoryUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateOneInlineInput build() => _build();

  _$GCategoryUpdateOneInlineInput _build() {
    _$GCategoryUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateWithNestedWhereUniqueInput
    extends GCategoryUpdateWithNestedWhereUniqueInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GCategoryUpdateInput data;

  factory _$GCategoryUpdateWithNestedWhereUniqueInput(
          [void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GCategoryUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GCategoryUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GCategoryUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GCategoryUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryUpdateWithNestedWhereUniqueInput,
            GCategoryUpdateWithNestedWhereUniqueInputBuilder> {
  _$GCategoryUpdateWithNestedWhereUniqueInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GCategoryUpdateInputBuilder? _data;
  GCategoryUpdateInputBuilder get data =>
      _$this._data ??= new GCategoryUpdateInputBuilder();
  set data(GCategoryUpdateInputBuilder? data) => _$this._data = data;

  GCategoryUpdateWithNestedWhereUniqueInputBuilder();

  GCategoryUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpdateWithNestedWhereUniqueInput build() => _build();

  _$GCategoryUpdateWithNestedWhereUniqueInput _build() {
    _$GCategoryUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpsertInput extends GCategoryUpsertInput {
  @override
  final GCategoryCreateInput create;
  @override
  final GCategoryUpdateInput updateIt;

  factory _$GCategoryUpsertInput(
          [void Function(GCategoryUpsertInputBuilder)? updates]) =>
      (new GCategoryUpsertInputBuilder()..update(updates))._build();

  _$GCategoryUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, r'GCategoryUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, r'GCategoryUpsertInput', 'updateIt');
  }

  @override
  GCategoryUpsertInput rebuild(
          void Function(GCategoryUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpsertInputBuilder toBuilder() =>
      new GCategoryUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GCategoryUpsertInputBuilder
    implements Builder<GCategoryUpsertInput, GCategoryUpsertInputBuilder> {
  _$GCategoryUpsertInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryUpdateInputBuilder? _updateIt;
  GCategoryUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GCategoryUpdateInputBuilder();
  set updateIt(GCategoryUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryUpsertInputBuilder();

  GCategoryUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpsertInput;
  }

  @override
  void update(void Function(GCategoryUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpsertInput build() => _build();

  _$GCategoryUpsertInput _build() {
    _$GCategoryUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpsertWithNestedWhereUniqueInput
    extends GCategoryUpsertWithNestedWhereUniqueInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GCategoryUpsertInput data;

  factory _$GCategoryUpsertWithNestedWhereUniqueInput(
          [void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GCategoryUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GCategoryUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GCategoryUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GCategoryUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GCategoryUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryUpsertWithNestedWhereUniqueInput,
            GCategoryUpsertWithNestedWhereUniqueInputBuilder> {
  _$GCategoryUpsertWithNestedWhereUniqueInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GCategoryUpsertInputBuilder? _data;
  GCategoryUpsertInputBuilder get data =>
      _$this._data ??= new GCategoryUpsertInputBuilder();
  set data(GCategoryUpsertInputBuilder? data) => _$this._data = data;

  GCategoryUpsertWithNestedWhereUniqueInputBuilder();

  GCategoryUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryUpsertWithNestedWhereUniqueInput build() => _build();

  _$GCategoryUpsertWithNestedWhereUniqueInput _build() {
    _$GCategoryUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereComparatorInput extends GCategoryWhereComparatorInput {
  @override
  final bool? outdated_to;

  factory _$GCategoryWhereComparatorInput(
          [void Function(GCategoryWhereComparatorInputBuilder)? updates]) =>
      (new GCategoryWhereComparatorInputBuilder()..update(updates))._build();

  _$GCategoryWhereComparatorInput._({this.outdated_to}) : super._();

  @override
  GCategoryWhereComparatorInput rebuild(
          void Function(GCategoryWhereComparatorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereComparatorInputBuilder toBuilder() =>
      new GCategoryWhereComparatorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereComparatorInput &&
        outdated_to == other.outdated_to;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, outdated_to.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryWhereComparatorInput')
          ..add('outdated_to', outdated_to))
        .toString();
  }
}

class GCategoryWhereComparatorInputBuilder
    implements
        Builder<GCategoryWhereComparatorInput,
            GCategoryWhereComparatorInputBuilder> {
  _$GCategoryWhereComparatorInput? _$v;

  bool? _outdated_to;
  bool? get outdated_to => _$this._outdated_to;
  set outdated_to(bool? outdated_to) => _$this._outdated_to = outdated_to;

  GCategoryWhereComparatorInputBuilder();

  GCategoryWhereComparatorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _outdated_to = $v.outdated_to;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereComparatorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereComparatorInput;
  }

  @override
  void update(void Function(GCategoryWhereComparatorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryWhereComparatorInput build() => _build();

  _$GCategoryWhereComparatorInput _build() {
    final _$result =
        _$v ?? new _$GCategoryWhereComparatorInput._(outdated_to: outdated_to);
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereInput extends GCategoryWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GCategoryWhereInput>? AND;
  @override
  final BuiltList<GCategoryWhereInput>? OR;
  @override
  final BuiltList<GCategoryWhereInput>? NOT;
  @override
  final GCategoryWhereStageInput? documentInStages_every;
  @override
  final GCategoryWhereStageInput? documentInStages_some;
  @override
  final GCategoryWhereStageInput? documentInStages_none;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledOperationWhereInput? scheduledIn_every;
  @override
  final GScheduledOperationWhereInput? scheduledIn_some;
  @override
  final GScheduledOperationWhereInput? scheduledIn_none;
  @override
  final bool? articles_empty;
  @override
  final GCategoryArticlesWhereInput? articles_some;

  factory _$GCategoryWhereInput(
          [void Function(GCategoryWhereInputBuilder)? updates]) =>
      (new GCategoryWhereInputBuilder()..update(updates))._build();

  _$GCategoryWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.scheduledIn_every,
      this.scheduledIn_some,
      this.scheduledIn_none,
      this.articles_empty,
      this.articles_some})
      : super._();

  @override
  GCategoryWhereInput rebuild(
          void Function(GCategoryWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereInputBuilder toBuilder() =>
      new GCategoryWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        scheduledIn_every == other.scheduledIn_every &&
        scheduledIn_some == other.scheduledIn_some &&
        scheduledIn_none == other.scheduledIn_none &&
        articles_empty == other.articles_empty &&
        articles_some == other.articles_some;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, scheduledIn_every.hashCode);
    _$hash = $jc(_$hash, scheduledIn_some.hashCode);
    _$hash = $jc(_$hash, scheduledIn_none.hashCode);
    _$hash = $jc(_$hash, articles_empty.hashCode);
    _$hash = $jc(_$hash, articles_some.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('scheduledIn_every', scheduledIn_every)
          ..add('scheduledIn_some', scheduledIn_some)
          ..add('scheduledIn_none', scheduledIn_none)
          ..add('articles_empty', articles_empty)
          ..add('articles_some', articles_some))
        .toString();
  }
}

class GCategoryWhereInputBuilder
    implements Builder<GCategoryWhereInput, GCategoryWhereInputBuilder> {
  _$GCategoryWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GCategoryWhereInput>? _AND;
  ListBuilder<GCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GCategoryWhereInput>();
  set AND(ListBuilder<GCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GCategoryWhereInput>? _OR;
  ListBuilder<GCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GCategoryWhereInput>();
  set OR(ListBuilder<GCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GCategoryWhereInput>? _NOT;
  ListBuilder<GCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GCategoryWhereInput>();
  set NOT(ListBuilder<GCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  GCategoryWhereStageInputBuilder? _documentInStages_every;
  GCategoryWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_every(
          GCategoryWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GCategoryWhereStageInputBuilder? _documentInStages_some;
  GCategoryWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_some(
          GCategoryWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GCategoryWhereStageInputBuilder? _documentInStages_none;
  GCategoryWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GCategoryWhereStageInputBuilder();
  set documentInStages_none(
          GCategoryWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledOperationWhereInputBuilder? _scheduledIn_every;
  GScheduledOperationWhereInputBuilder get scheduledIn_every =>
      _$this._scheduledIn_every ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_every(
          GScheduledOperationWhereInputBuilder? scheduledIn_every) =>
      _$this._scheduledIn_every = scheduledIn_every;

  GScheduledOperationWhereInputBuilder? _scheduledIn_some;
  GScheduledOperationWhereInputBuilder get scheduledIn_some =>
      _$this._scheduledIn_some ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_some(
          GScheduledOperationWhereInputBuilder? scheduledIn_some) =>
      _$this._scheduledIn_some = scheduledIn_some;

  GScheduledOperationWhereInputBuilder? _scheduledIn_none;
  GScheduledOperationWhereInputBuilder get scheduledIn_none =>
      _$this._scheduledIn_none ??= new GScheduledOperationWhereInputBuilder();
  set scheduledIn_none(
          GScheduledOperationWhereInputBuilder? scheduledIn_none) =>
      _$this._scheduledIn_none = scheduledIn_none;

  bool? _articles_empty;
  bool? get articles_empty => _$this._articles_empty;
  set articles_empty(bool? articles_empty) =>
      _$this._articles_empty = articles_empty;

  GCategoryArticlesWhereInputBuilder? _articles_some;
  GCategoryArticlesWhereInputBuilder get articles_some =>
      _$this._articles_some ??= new GCategoryArticlesWhereInputBuilder();
  set articles_some(GCategoryArticlesWhereInputBuilder? articles_some) =>
      _$this._articles_some = articles_some;

  GCategoryWhereInputBuilder();

  GCategoryWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _scheduledIn_every = $v.scheduledIn_every?.toBuilder();
      _scheduledIn_some = $v.scheduledIn_some?.toBuilder();
      _scheduledIn_none = $v.scheduledIn_none?.toBuilder();
      _articles_empty = $v.articles_empty;
      _articles_some = $v.articles_some?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereInput;
  }

  @override
  void update(void Function(GCategoryWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryWhereInput build() => _build();

  _$GCategoryWhereInput _build() {
    _$GCategoryWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              scheduledIn_every: _scheduledIn_every?.build(),
              scheduledIn_some: _scheduledIn_some?.build(),
              scheduledIn_none: _scheduledIn_none?.build(),
              articles_empty: articles_empty,
              articles_some: _articles_some?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();
        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'scheduledIn_every';
        _scheduledIn_every?.build();
        _$failedField = 'scheduledIn_some';
        _scheduledIn_some?.build();
        _$failedField = 'scheduledIn_none';
        _scheduledIn_none?.build();

        _$failedField = 'articles_some';
        _articles_some?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereStageInput extends GCategoryWhereStageInput {
  @override
  final BuiltList<GCategoryWhereStageInput>? AND;
  @override
  final BuiltList<GCategoryWhereStageInput>? OR;
  @override
  final BuiltList<GCategoryWhereStageInput>? NOT;
  @override
  final GStage? stage;
  @override
  final GCategoryWhereComparatorInput? compareWithParent;

  factory _$GCategoryWhereStageInput(
          [void Function(GCategoryWhereStageInputBuilder)? updates]) =>
      (new GCategoryWhereStageInputBuilder()..update(updates))._build();

  _$GCategoryWhereStageInput._(
      {this.AND, this.OR, this.NOT, this.stage, this.compareWithParent})
      : super._();

  @override
  GCategoryWhereStageInput rebuild(
          void Function(GCategoryWhereStageInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereStageInputBuilder toBuilder() =>
      new GCategoryWhereStageInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereStageInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        stage == other.stage &&
        compareWithParent == other.compareWithParent;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, compareWithParent.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryWhereStageInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('stage', stage)
          ..add('compareWithParent', compareWithParent))
        .toString();
  }
}

class GCategoryWhereStageInputBuilder
    implements
        Builder<GCategoryWhereStageInput, GCategoryWhereStageInputBuilder> {
  _$GCategoryWhereStageInput? _$v;

  ListBuilder<GCategoryWhereStageInput>? _AND;
  ListBuilder<GCategoryWhereStageInput> get AND =>
      _$this._AND ??= new ListBuilder<GCategoryWhereStageInput>();
  set AND(ListBuilder<GCategoryWhereStageInput>? AND) => _$this._AND = AND;

  ListBuilder<GCategoryWhereStageInput>? _OR;
  ListBuilder<GCategoryWhereStageInput> get OR =>
      _$this._OR ??= new ListBuilder<GCategoryWhereStageInput>();
  set OR(ListBuilder<GCategoryWhereStageInput>? OR) => _$this._OR = OR;

  ListBuilder<GCategoryWhereStageInput>? _NOT;
  ListBuilder<GCategoryWhereStageInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GCategoryWhereStageInput>();
  set NOT(ListBuilder<GCategoryWhereStageInput>? NOT) => _$this._NOT = NOT;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  GCategoryWhereComparatorInputBuilder? _compareWithParent;
  GCategoryWhereComparatorInputBuilder get compareWithParent =>
      _$this._compareWithParent ??= new GCategoryWhereComparatorInputBuilder();
  set compareWithParent(
          GCategoryWhereComparatorInputBuilder? compareWithParent) =>
      _$this._compareWithParent = compareWithParent;

  GCategoryWhereStageInputBuilder();

  GCategoryWhereStageInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _stage = $v.stage;
      _compareWithParent = $v.compareWithParent?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereStageInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereStageInput;
  }

  @override
  void update(void Function(GCategoryWhereStageInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryWhereStageInput build() => _build();

  _$GCategoryWhereStageInput _build() {
    _$GCategoryWhereStageInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryWhereStageInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              stage: stage,
              compareWithParent: _compareWithParent?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'compareWithParent';
        _compareWithParent?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GCategoryWhereStageInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereUniqueInput extends GCategoryWhereUniqueInput {
  @override
  final String? id;

  factory _$GCategoryWhereUniqueInput(
          [void Function(GCategoryWhereUniqueInputBuilder)? updates]) =>
      (new GCategoryWhereUniqueInputBuilder()..update(updates))._build();

  _$GCategoryWhereUniqueInput._({this.id}) : super._();

  @override
  GCategoryWhereUniqueInput rebuild(
          void Function(GCategoryWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereUniqueInputBuilder toBuilder() =>
      new GCategoryWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GCategoryWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GCategoryWhereUniqueInputBuilder
    implements
        Builder<GCategoryWhereUniqueInput, GCategoryWhereUniqueInputBuilder> {
  _$GCategoryWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GCategoryWhereUniqueInputBuilder();

  GCategoryWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereUniqueInput;
  }

  @override
  void update(void Function(GCategoryWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GCategoryWhereUniqueInput build() => _build();

  _$GCategoryWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GCategoryWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GColorInput extends GColorInput {
  @override
  final GHex? hex;
  @override
  final GRGBAInput? rgba;

  factory _$GColorInput([void Function(GColorInputBuilder)? updates]) =>
      (new GColorInputBuilder()..update(updates))._build();

  _$GColorInput._({this.hex, this.rgba}) : super._();

  @override
  GColorInput rebuild(void Function(GColorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GColorInputBuilder toBuilder() => new GColorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GColorInput && hex == other.hex && rgba == other.rgba;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, hex.hashCode);
    _$hash = $jc(_$hash, rgba.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GColorInput')
          ..add('hex', hex)
          ..add('rgba', rgba))
        .toString();
  }
}

class GColorInputBuilder implements Builder<GColorInput, GColorInputBuilder> {
  _$GColorInput? _$v;

  GHexBuilder? _hex;
  GHexBuilder get hex => _$this._hex ??= new GHexBuilder();
  set hex(GHexBuilder? hex) => _$this._hex = hex;

  GRGBAInputBuilder? _rgba;
  GRGBAInputBuilder get rgba => _$this._rgba ??= new GRGBAInputBuilder();
  set rgba(GRGBAInputBuilder? rgba) => _$this._rgba = rgba;

  GColorInputBuilder();

  GColorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _hex = $v.hex?.toBuilder();
      _rgba = $v.rgba?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GColorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GColorInput;
  }

  @override
  void update(void Function(GColorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GColorInput build() => _build();

  _$GColorInput _build() {
    _$GColorInput _$result;
    try {
      _$result =
          _$v ?? new _$GColorInput._(hex: _hex?.build(), rgba: _rgba?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'hex';
        _hex?.build();
        _$failedField = 'rgba';
        _rgba?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GColorInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GConnectPositionInput extends GConnectPositionInput {
  @override
  final String? after;
  @override
  final String? before;
  @override
  final bool? start;
  @override
  final bool? end;

  factory _$GConnectPositionInput(
          [void Function(GConnectPositionInputBuilder)? updates]) =>
      (new GConnectPositionInputBuilder()..update(updates))._build();

  _$GConnectPositionInput._({this.after, this.before, this.start, this.end})
      : super._();

  @override
  GConnectPositionInput rebuild(
          void Function(GConnectPositionInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GConnectPositionInputBuilder toBuilder() =>
      new GConnectPositionInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GConnectPositionInput &&
        after == other.after &&
        before == other.before &&
        start == other.start &&
        end == other.end;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, after.hashCode);
    _$hash = $jc(_$hash, before.hashCode);
    _$hash = $jc(_$hash, start.hashCode);
    _$hash = $jc(_$hash, end.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GConnectPositionInput')
          ..add('after', after)
          ..add('before', before)
          ..add('start', start)
          ..add('end', end))
        .toString();
  }
}

class GConnectPositionInputBuilder
    implements Builder<GConnectPositionInput, GConnectPositionInputBuilder> {
  _$GConnectPositionInput? _$v;

  String? _after;
  String? get after => _$this._after;
  set after(String? after) => _$this._after = after;

  String? _before;
  String? get before => _$this._before;
  set before(String? before) => _$this._before = before;

  bool? _start;
  bool? get start => _$this._start;
  set start(bool? start) => _$this._start = start;

  bool? _end;
  bool? get end => _$this._end;
  set end(bool? end) => _$this._end = end;

  GConnectPositionInputBuilder();

  GConnectPositionInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _after = $v.after;
      _before = $v.before;
      _start = $v.start;
      _end = $v.end;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GConnectPositionInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GConnectPositionInput;
  }

  @override
  void update(void Function(GConnectPositionInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GConnectPositionInput build() => _build();

  _$GConnectPositionInput _build() {
    final _$result = _$v ??
        new _$GConnectPositionInput._(
            after: after, before: before, start: start, end: end);
    replace(_$result);
    return _$result;
  }
}

class _$GDate extends GDate {
  @override
  final String value;

  factory _$GDate([void Function(GDateBuilder)? updates]) =>
      (new GDateBuilder()..update(updates))._build();

  _$GDate._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GDate', 'value');
  }

  @override
  GDate rebuild(void Function(GDateBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDateBuilder toBuilder() => new GDateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDate && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDate')..add('value', value))
        .toString();
  }
}

class GDateBuilder implements Builder<GDate, GDateBuilder> {
  _$GDate? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GDateBuilder();

  GDateBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDate other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDate;
  }

  @override
  void update(void Function(GDateBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDate build() => _build();

  _$GDate _build() {
    final _$result = _$v ??
        new _$GDate._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GDate', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GDateTime extends GDateTime {
  @override
  final String value;

  factory _$GDateTime([void Function(GDateTimeBuilder)? updates]) =>
      (new GDateTimeBuilder()..update(updates))._build();

  _$GDateTime._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GDateTime', 'value');
  }

  @override
  GDateTime rebuild(void Function(GDateTimeBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDateTimeBuilder toBuilder() => new GDateTimeBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDateTime && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDateTime')..add('value', value))
        .toString();
  }
}

class GDateTimeBuilder implements Builder<GDateTime, GDateTimeBuilder> {
  _$GDateTime? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GDateTimeBuilder();

  GDateTimeBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDateTime other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDateTime;
  }

  @override
  void update(void Function(GDateTimeBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDateTime build() => _build();

  _$GDateTime _build() {
    final _$result = _$v ??
        new _$GDateTime._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GDateTime', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GDocumentOutputInput extends GDocumentOutputInput {
  @override
  final GDocumentFileTypes? format;

  factory _$GDocumentOutputInput(
          [void Function(GDocumentOutputInputBuilder)? updates]) =>
      (new GDocumentOutputInputBuilder()..update(updates))._build();

  _$GDocumentOutputInput._({this.format}) : super._();

  @override
  GDocumentOutputInput rebuild(
          void Function(GDocumentOutputInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDocumentOutputInputBuilder toBuilder() =>
      new GDocumentOutputInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDocumentOutputInput && format == other.format;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, format.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDocumentOutputInput')
          ..add('format', format))
        .toString();
  }
}

class GDocumentOutputInputBuilder
    implements Builder<GDocumentOutputInput, GDocumentOutputInputBuilder> {
  _$GDocumentOutputInput? _$v;

  GDocumentFileTypes? _format;
  GDocumentFileTypes? get format => _$this._format;
  set format(GDocumentFileTypes? format) => _$this._format = format;

  GDocumentOutputInputBuilder();

  GDocumentOutputInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _format = $v.format;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDocumentOutputInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDocumentOutputInput;
  }

  @override
  void update(void Function(GDocumentOutputInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDocumentOutputInput build() => _build();

  _$GDocumentOutputInput _build() {
    final _$result = _$v ?? new _$GDocumentOutputInput._(format: format);
    replace(_$result);
    return _$result;
  }
}

class _$GDocumentTransformationInput extends GDocumentTransformationInput {
  @override
  final GDocumentOutputInput? output;

  factory _$GDocumentTransformationInput(
          [void Function(GDocumentTransformationInputBuilder)? updates]) =>
      (new GDocumentTransformationInputBuilder()..update(updates))._build();

  _$GDocumentTransformationInput._({this.output}) : super._();

  @override
  GDocumentTransformationInput rebuild(
          void Function(GDocumentTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDocumentTransformationInputBuilder toBuilder() =>
      new GDocumentTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDocumentTransformationInput && output == other.output;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, output.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GDocumentTransformationInput')
          ..add('output', output))
        .toString();
  }
}

class GDocumentTransformationInputBuilder
    implements
        Builder<GDocumentTransformationInput,
            GDocumentTransformationInputBuilder> {
  _$GDocumentTransformationInput? _$v;

  GDocumentOutputInputBuilder? _output;
  GDocumentOutputInputBuilder get output =>
      _$this._output ??= new GDocumentOutputInputBuilder();
  set output(GDocumentOutputInputBuilder? output) => _$this._output = output;

  GDocumentTransformationInputBuilder();

  GDocumentTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _output = $v.output?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDocumentTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDocumentTransformationInput;
  }

  @override
  void update(void Function(GDocumentTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GDocumentTransformationInput build() => _build();

  _$GDocumentTransformationInput _build() {
    _$GDocumentTransformationInput _$result;
    try {
      _$result =
          _$v ?? new _$GDocumentTransformationInput._(output: _output?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'output';
        _output?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GDocumentTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GEntityWhereInput extends GEntityWhereInput {
  @override
  final String id;
  @override
  final GEntityTypeName typename;
  @override
  final GStage stage;
  @override
  final GLocale? locale;

  factory _$GEntityWhereInput(
          [void Function(GEntityWhereInputBuilder)? updates]) =>
      (new GEntityWhereInputBuilder()..update(updates))._build();

  _$GEntityWhereInput._(
      {required this.id,
      required this.typename,
      required this.stage,
      this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GEntityWhereInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        typename, r'GEntityWhereInput', 'typename');
    BuiltValueNullFieldError.checkNotNull(stage, r'GEntityWhereInput', 'stage');
  }

  @override
  GEntityWhereInput rebuild(void Function(GEntityWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GEntityWhereInputBuilder toBuilder() =>
      new GEntityWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GEntityWhereInput &&
        id == other.id &&
        typename == other.typename &&
        stage == other.stage &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, typename.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GEntityWhereInput')
          ..add('id', id)
          ..add('typename', typename)
          ..add('stage', stage)
          ..add('locale', locale))
        .toString();
  }
}

class GEntityWhereInputBuilder
    implements Builder<GEntityWhereInput, GEntityWhereInputBuilder> {
  _$GEntityWhereInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GEntityTypeName? _typename;
  GEntityTypeName? get typename => _$this._typename;
  set typename(GEntityTypeName? typename) => _$this._typename = typename;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GEntityWhereInputBuilder();

  GEntityWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _typename = $v.typename;
      _stage = $v.stage;
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GEntityWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GEntityWhereInput;
  }

  @override
  void update(void Function(GEntityWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GEntityWhereInput build() => _build();

  _$GEntityWhereInput _build() {
    final _$result = _$v ??
        new _$GEntityWhereInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GEntityWhereInput', 'id'),
            typename: BuiltValueNullFieldError.checkNotNull(
                typename, r'GEntityWhereInput', 'typename'),
            stage: BuiltValueNullFieldError.checkNotNull(
                stage, r'GEntityWhereInput', 'stage'),
            locale: locale);
    replace(_$result);
    return _$result;
  }
}

class _$GHex extends GHex {
  @override
  final String value;

  factory _$GHex([void Function(GHexBuilder)? updates]) =>
      (new GHexBuilder()..update(updates))._build();

  _$GHex._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GHex', 'value');
  }

  @override
  GHex rebuild(void Function(GHexBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GHexBuilder toBuilder() => new GHexBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GHex && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GHex')..add('value', value))
        .toString();
  }
}

class GHexBuilder implements Builder<GHex, GHexBuilder> {
  _$GHex? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GHexBuilder();

  GHexBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GHex other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GHex;
  }

  @override
  void update(void Function(GHexBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GHex build() => _build();

  _$GHex _build() {
    final _$result = _$v ??
        new _$GHex._(
            value:
                BuiltValueNullFieldError.checkNotNull(value, r'GHex', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageBlurInput extends GImageBlurInput {
  @override
  final int amount;

  factory _$GImageBlurInput([void Function(GImageBlurInputBuilder)? updates]) =>
      (new GImageBlurInputBuilder()..update(updates))._build();

  _$GImageBlurInput._({required this.amount}) : super._() {
    BuiltValueNullFieldError.checkNotNull(amount, r'GImageBlurInput', 'amount');
  }

  @override
  GImageBlurInput rebuild(void Function(GImageBlurInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageBlurInputBuilder toBuilder() =>
      new GImageBlurInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageBlurInput && amount == other.amount;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageBlurInput')
          ..add('amount', amount))
        .toString();
  }
}

class GImageBlurInputBuilder
    implements Builder<GImageBlurInput, GImageBlurInputBuilder> {
  _$GImageBlurInput? _$v;

  int? _amount;
  int? get amount => _$this._amount;
  set amount(int? amount) => _$this._amount = amount;

  GImageBlurInputBuilder();

  GImageBlurInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _amount = $v.amount;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageBlurInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageBlurInput;
  }

  @override
  void update(void Function(GImageBlurInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageBlurInput build() => _build();

  _$GImageBlurInput _build() {
    final _$result = _$v ??
        new _$GImageBlurInput._(
            amount: BuiltValueNullFieldError.checkNotNull(
                amount, r'GImageBlurInput', 'amount'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageBorderInput extends GImageBorderInput {
  @override
  final int width;
  @override
  final String color;
  @override
  final String background;

  factory _$GImageBorderInput(
          [void Function(GImageBorderInputBuilder)? updates]) =>
      (new GImageBorderInputBuilder()..update(updates))._build();

  _$GImageBorderInput._(
      {required this.width, required this.color, required this.background})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(width, r'GImageBorderInput', 'width');
    BuiltValueNullFieldError.checkNotNull(color, r'GImageBorderInput', 'color');
    BuiltValueNullFieldError.checkNotNull(
        background, r'GImageBorderInput', 'background');
  }

  @override
  GImageBorderInput rebuild(void Function(GImageBorderInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageBorderInputBuilder toBuilder() =>
      new GImageBorderInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageBorderInput &&
        width == other.width &&
        color == other.color &&
        background == other.background;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, width.hashCode);
    _$hash = $jc(_$hash, color.hashCode);
    _$hash = $jc(_$hash, background.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageBorderInput')
          ..add('width', width)
          ..add('color', color)
          ..add('background', background))
        .toString();
  }
}

class GImageBorderInputBuilder
    implements Builder<GImageBorderInput, GImageBorderInputBuilder> {
  _$GImageBorderInput? _$v;

  int? _width;
  int? get width => _$this._width;
  set width(int? width) => _$this._width = width;

  String? _color;
  String? get color => _$this._color;
  set color(String? color) => _$this._color = color;

  String? _background;
  String? get background => _$this._background;
  set background(String? background) => _$this._background = background;

  GImageBorderInputBuilder();

  GImageBorderInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _width = $v.width;
      _color = $v.color;
      _background = $v.background;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageBorderInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageBorderInput;
  }

  @override
  void update(void Function(GImageBorderInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageBorderInput build() => _build();

  _$GImageBorderInput _build() {
    final _$result = _$v ??
        new _$GImageBorderInput._(
            width: BuiltValueNullFieldError.checkNotNull(
                width, r'GImageBorderInput', 'width'),
            color: BuiltValueNullFieldError.checkNotNull(
                color, r'GImageBorderInput', 'color'),
            background: BuiltValueNullFieldError.checkNotNull(
                background, r'GImageBorderInput', 'background'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageCompressInput extends GImageCompressInput {
  @override
  final bool metadata;

  factory _$GImageCompressInput(
          [void Function(GImageCompressInputBuilder)? updates]) =>
      (new GImageCompressInputBuilder()..update(updates))._build();

  _$GImageCompressInput._({required this.metadata}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        metadata, r'GImageCompressInput', 'metadata');
  }

  @override
  GImageCompressInput rebuild(
          void Function(GImageCompressInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageCompressInputBuilder toBuilder() =>
      new GImageCompressInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageCompressInput && metadata == other.metadata;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, metadata.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageCompressInput')
          ..add('metadata', metadata))
        .toString();
  }
}

class GImageCompressInputBuilder
    implements Builder<GImageCompressInput, GImageCompressInputBuilder> {
  _$GImageCompressInput? _$v;

  bool? _metadata;
  bool? get metadata => _$this._metadata;
  set metadata(bool? metadata) => _$this._metadata = metadata;

  GImageCompressInputBuilder();

  GImageCompressInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _metadata = $v.metadata;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageCompressInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageCompressInput;
  }

  @override
  void update(void Function(GImageCompressInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageCompressInput build() => _build();

  _$GImageCompressInput _build() {
    final _$result = _$v ??
        new _$GImageCompressInput._(
            metadata: BuiltValueNullFieldError.checkNotNull(
                metadata, r'GImageCompressInput', 'metadata'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageCropInput extends GImageCropInput {
  @override
  final int x;
  @override
  final int y;
  @override
  final int width;
  @override
  final int height;

  factory _$GImageCropInput([void Function(GImageCropInputBuilder)? updates]) =>
      (new GImageCropInputBuilder()..update(updates))._build();

  _$GImageCropInput._(
      {required this.x,
      required this.y,
      required this.width,
      required this.height})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(x, r'GImageCropInput', 'x');
    BuiltValueNullFieldError.checkNotNull(y, r'GImageCropInput', 'y');
    BuiltValueNullFieldError.checkNotNull(width, r'GImageCropInput', 'width');
    BuiltValueNullFieldError.checkNotNull(height, r'GImageCropInput', 'height');
  }

  @override
  GImageCropInput rebuild(void Function(GImageCropInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageCropInputBuilder toBuilder() =>
      new GImageCropInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageCropInput &&
        x == other.x &&
        y == other.y &&
        width == other.width &&
        height == other.height;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, x.hashCode);
    _$hash = $jc(_$hash, y.hashCode);
    _$hash = $jc(_$hash, width.hashCode);
    _$hash = $jc(_$hash, height.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageCropInput')
          ..add('x', x)
          ..add('y', y)
          ..add('width', width)
          ..add('height', height))
        .toString();
  }
}

class GImageCropInputBuilder
    implements Builder<GImageCropInput, GImageCropInputBuilder> {
  _$GImageCropInput? _$v;

  int? _x;
  int? get x => _$this._x;
  set x(int? x) => _$this._x = x;

  int? _y;
  int? get y => _$this._y;
  set y(int? y) => _$this._y = y;

  int? _width;
  int? get width => _$this._width;
  set width(int? width) => _$this._width = width;

  int? _height;
  int? get height => _$this._height;
  set height(int? height) => _$this._height = height;

  GImageCropInputBuilder();

  GImageCropInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _x = $v.x;
      _y = $v.y;
      _width = $v.width;
      _height = $v.height;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageCropInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageCropInput;
  }

  @override
  void update(void Function(GImageCropInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageCropInput build() => _build();

  _$GImageCropInput _build() {
    final _$result = _$v ??
        new _$GImageCropInput._(
            x: BuiltValueNullFieldError.checkNotNull(
                x, r'GImageCropInput', 'x'),
            y: BuiltValueNullFieldError.checkNotNull(
                y, r'GImageCropInput', 'y'),
            width: BuiltValueNullFieldError.checkNotNull(
                width, r'GImageCropInput', 'width'),
            height: BuiltValueNullFieldError.checkNotNull(
                height, r'GImageCropInput', 'height'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageQualityInput extends GImageQualityInput {
  @override
  final int value;

  factory _$GImageQualityInput(
          [void Function(GImageQualityInputBuilder)? updates]) =>
      (new GImageQualityInputBuilder()..update(updates))._build();

  _$GImageQualityInput._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        value, r'GImageQualityInput', 'value');
  }

  @override
  GImageQualityInput rebuild(
          void Function(GImageQualityInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageQualityInputBuilder toBuilder() =>
      new GImageQualityInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageQualityInput && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageQualityInput')
          ..add('value', value))
        .toString();
  }
}

class GImageQualityInputBuilder
    implements Builder<GImageQualityInput, GImageQualityInputBuilder> {
  _$GImageQualityInput? _$v;

  int? _value;
  int? get value => _$this._value;
  set value(int? value) => _$this._value = value;

  GImageQualityInputBuilder();

  GImageQualityInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageQualityInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageQualityInput;
  }

  @override
  void update(void Function(GImageQualityInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageQualityInput build() => _build();

  _$GImageQualityInput _build() {
    final _$result = _$v ??
        new _$GImageQualityInput._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GImageQualityInput', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageResizeInput extends GImageResizeInput {
  @override
  final int? width;
  @override
  final int? height;
  @override
  final GImageFit? fit;

  factory _$GImageResizeInput(
          [void Function(GImageResizeInputBuilder)? updates]) =>
      (new GImageResizeInputBuilder()..update(updates))._build();

  _$GImageResizeInput._({this.width, this.height, this.fit}) : super._();

  @override
  GImageResizeInput rebuild(void Function(GImageResizeInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageResizeInputBuilder toBuilder() =>
      new GImageResizeInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageResizeInput &&
        width == other.width &&
        height == other.height &&
        fit == other.fit;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, width.hashCode);
    _$hash = $jc(_$hash, height.hashCode);
    _$hash = $jc(_$hash, fit.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageResizeInput')
          ..add('width', width)
          ..add('height', height)
          ..add('fit', fit))
        .toString();
  }
}

class GImageResizeInputBuilder
    implements Builder<GImageResizeInput, GImageResizeInputBuilder> {
  _$GImageResizeInput? _$v;

  int? _width;
  int? get width => _$this._width;
  set width(int? width) => _$this._width = width;

  int? _height;
  int? get height => _$this._height;
  set height(int? height) => _$this._height = height;

  GImageFit? _fit;
  GImageFit? get fit => _$this._fit;
  set fit(GImageFit? fit) => _$this._fit = fit;

  GImageResizeInputBuilder();

  GImageResizeInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _width = $v.width;
      _height = $v.height;
      _fit = $v.fit;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageResizeInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageResizeInput;
  }

  @override
  void update(void Function(GImageResizeInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageResizeInput build() => _build();

  _$GImageResizeInput _build() {
    final _$result = _$v ??
        new _$GImageResizeInput._(width: width, height: height, fit: fit);
    replace(_$result);
    return _$result;
  }
}

class _$GImageSharpenInput extends GImageSharpenInput {
  @override
  final int amount;

  factory _$GImageSharpenInput(
          [void Function(GImageSharpenInputBuilder)? updates]) =>
      (new GImageSharpenInputBuilder()..update(updates))._build();

  _$GImageSharpenInput._({required this.amount}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        amount, r'GImageSharpenInput', 'amount');
  }

  @override
  GImageSharpenInput rebuild(
          void Function(GImageSharpenInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageSharpenInputBuilder toBuilder() =>
      new GImageSharpenInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageSharpenInput && amount == other.amount;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, amount.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageSharpenInput')
          ..add('amount', amount))
        .toString();
  }
}

class GImageSharpenInputBuilder
    implements Builder<GImageSharpenInput, GImageSharpenInputBuilder> {
  _$GImageSharpenInput? _$v;

  int? _amount;
  int? get amount => _$this._amount;
  set amount(int? amount) => _$this._amount = amount;

  GImageSharpenInputBuilder();

  GImageSharpenInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _amount = $v.amount;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageSharpenInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageSharpenInput;
  }

  @override
  void update(void Function(GImageSharpenInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageSharpenInput build() => _build();

  _$GImageSharpenInput _build() {
    final _$result = _$v ??
        new _$GImageSharpenInput._(
            amount: BuiltValueNullFieldError.checkNotNull(
                amount, r'GImageSharpenInput', 'amount'));
    replace(_$result);
    return _$result;
  }
}

class _$GImageTransformationInput extends GImageTransformationInput {
  @override
  final GImageResizeInput? resize;
  @override
  final GImageCompressInput? compress;
  @override
  final GImageBlurInput? blur;
  @override
  final GImageSharpenInput? sharpen;
  @override
  final GImageBorderInput? border;
  @override
  final GImageQualityInput? quality;
  @override
  final GImageCropInput? crop;

  factory _$GImageTransformationInput(
          [void Function(GImageTransformationInputBuilder)? updates]) =>
      (new GImageTransformationInputBuilder()..update(updates))._build();

  _$GImageTransformationInput._(
      {this.resize,
      this.compress,
      this.blur,
      this.sharpen,
      this.border,
      this.quality,
      this.crop})
      : super._();

  @override
  GImageTransformationInput rebuild(
          void Function(GImageTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageTransformationInputBuilder toBuilder() =>
      new GImageTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageTransformationInput &&
        resize == other.resize &&
        compress == other.compress &&
        blur == other.blur &&
        sharpen == other.sharpen &&
        border == other.border &&
        quality == other.quality &&
        crop == other.crop;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, resize.hashCode);
    _$hash = $jc(_$hash, compress.hashCode);
    _$hash = $jc(_$hash, blur.hashCode);
    _$hash = $jc(_$hash, sharpen.hashCode);
    _$hash = $jc(_$hash, border.hashCode);
    _$hash = $jc(_$hash, quality.hashCode);
    _$hash = $jc(_$hash, crop.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GImageTransformationInput')
          ..add('resize', resize)
          ..add('compress', compress)
          ..add('blur', blur)
          ..add('sharpen', sharpen)
          ..add('border', border)
          ..add('quality', quality)
          ..add('crop', crop))
        .toString();
  }
}

class GImageTransformationInputBuilder
    implements
        Builder<GImageTransformationInput, GImageTransformationInputBuilder> {
  _$GImageTransformationInput? _$v;

  GImageResizeInputBuilder? _resize;
  GImageResizeInputBuilder get resize =>
      _$this._resize ??= new GImageResizeInputBuilder();
  set resize(GImageResizeInputBuilder? resize) => _$this._resize = resize;

  GImageCompressInputBuilder? _compress;
  GImageCompressInputBuilder get compress =>
      _$this._compress ??= new GImageCompressInputBuilder();
  set compress(GImageCompressInputBuilder? compress) =>
      _$this._compress = compress;

  GImageBlurInputBuilder? _blur;
  GImageBlurInputBuilder get blur =>
      _$this._blur ??= new GImageBlurInputBuilder();
  set blur(GImageBlurInputBuilder? blur) => _$this._blur = blur;

  GImageSharpenInputBuilder? _sharpen;
  GImageSharpenInputBuilder get sharpen =>
      _$this._sharpen ??= new GImageSharpenInputBuilder();
  set sharpen(GImageSharpenInputBuilder? sharpen) => _$this._sharpen = sharpen;

  GImageBorderInputBuilder? _border;
  GImageBorderInputBuilder get border =>
      _$this._border ??= new GImageBorderInputBuilder();
  set border(GImageBorderInputBuilder? border) => _$this._border = border;

  GImageQualityInputBuilder? _quality;
  GImageQualityInputBuilder get quality =>
      _$this._quality ??= new GImageQualityInputBuilder();
  set quality(GImageQualityInputBuilder? quality) => _$this._quality = quality;

  GImageCropInputBuilder? _crop;
  GImageCropInputBuilder get crop =>
      _$this._crop ??= new GImageCropInputBuilder();
  set crop(GImageCropInputBuilder? crop) => _$this._crop = crop;

  GImageTransformationInputBuilder();

  GImageTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _resize = $v.resize?.toBuilder();
      _compress = $v.compress?.toBuilder();
      _blur = $v.blur?.toBuilder();
      _sharpen = $v.sharpen?.toBuilder();
      _border = $v.border?.toBuilder();
      _quality = $v.quality?.toBuilder();
      _crop = $v.crop?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageTransformationInput;
  }

  @override
  void update(void Function(GImageTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GImageTransformationInput build() => _build();

  _$GImageTransformationInput _build() {
    _$GImageTransformationInput _$result;
    try {
      _$result = _$v ??
          new _$GImageTransformationInput._(
              resize: _resize?.build(),
              compress: _compress?.build(),
              blur: _blur?.build(),
              sharpen: _sharpen?.build(),
              border: _border?.build(),
              quality: _quality?.build(),
              crop: _crop?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'resize';
        _resize?.build();
        _$failedField = 'compress';
        _compress?.build();
        _$failedField = 'blur';
        _blur?.build();
        _$failedField = 'sharpen';
        _sharpen?.build();
        _$failedField = 'border';
        _border?.build();
        _$failedField = 'quality';
        _quality?.build();
        _$failedField = 'crop';
        _crop?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GImageTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GJson extends GJson {
  @override
  final String value;

  factory _$GJson([void Function(GJsonBuilder)? updates]) =>
      (new GJsonBuilder()..update(updates))._build();

  _$GJson._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GJson', 'value');
  }

  @override
  GJson rebuild(void Function(GJsonBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GJsonBuilder toBuilder() => new GJsonBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GJson && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GJson')..add('value', value))
        .toString();
  }
}

class GJsonBuilder implements Builder<GJson, GJsonBuilder> {
  _$GJson? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GJsonBuilder();

  GJsonBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GJson other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GJson;
  }

  @override
  void update(void Function(GJsonBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GJson build() => _build();

  _$GJson _build() {
    final _$result = _$v ??
        new _$GJson._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GJson', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GLocationInput extends GLocationInput {
  @override
  final double latitude;
  @override
  final double longitude;

  factory _$GLocationInput([void Function(GLocationInputBuilder)? updates]) =>
      (new GLocationInputBuilder()..update(updates))._build();

  _$GLocationInput._({required this.latitude, required this.longitude})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        latitude, r'GLocationInput', 'latitude');
    BuiltValueNullFieldError.checkNotNull(
        longitude, r'GLocationInput', 'longitude');
  }

  @override
  GLocationInput rebuild(void Function(GLocationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationInputBuilder toBuilder() =>
      new GLocationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationInput &&
        latitude == other.latitude &&
        longitude == other.longitude;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, latitude.hashCode);
    _$hash = $jc(_$hash, longitude.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLocationInput')
          ..add('latitude', latitude)
          ..add('longitude', longitude))
        .toString();
  }
}

class GLocationInputBuilder
    implements Builder<GLocationInput, GLocationInputBuilder> {
  _$GLocationInput? _$v;

  double? _latitude;
  double? get latitude => _$this._latitude;
  set latitude(double? latitude) => _$this._latitude = latitude;

  double? _longitude;
  double? get longitude => _$this._longitude;
  set longitude(double? longitude) => _$this._longitude = longitude;

  GLocationInputBuilder();

  GLocationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _latitude = $v.latitude;
      _longitude = $v.longitude;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationInput;
  }

  @override
  void update(void Function(GLocationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLocationInput build() => _build();

  _$GLocationInput _build() {
    final _$result = _$v ??
        new _$GLocationInput._(
            latitude: BuiltValueNullFieldError.checkNotNull(
                latitude, r'GLocationInput', 'latitude'),
            longitude: BuiltValueNullFieldError.checkNotNull(
                longitude, r'GLocationInput', 'longitude'));
    replace(_$result);
    return _$result;
  }
}

class _$GLong extends GLong {
  @override
  final String value;

  factory _$GLong([void Function(GLongBuilder)? updates]) =>
      (new GLongBuilder()..update(updates))._build();

  _$GLong._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GLong', 'value');
  }

  @override
  GLong rebuild(void Function(GLongBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLongBuilder toBuilder() => new GLongBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLong && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GLong')..add('value', value))
        .toString();
  }
}

class GLongBuilder implements Builder<GLong, GLongBuilder> {
  _$GLong? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GLongBuilder();

  GLongBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLong other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLong;
  }

  @override
  void update(void Function(GLongBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GLong build() => _build();

  _$GLong _build() {
    final _$result = _$v ??
        new _$GLong._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GLong', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GPublishLocaleInput extends GPublishLocaleInput {
  @override
  final GLocale locale;
  @override
  final BuiltList<GStage> stages;

  factory _$GPublishLocaleInput(
          [void Function(GPublishLocaleInputBuilder)? updates]) =>
      (new GPublishLocaleInputBuilder()..update(updates))._build();

  _$GPublishLocaleInput._({required this.locale, required this.stages})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GPublishLocaleInput', 'locale');
    BuiltValueNullFieldError.checkNotNull(
        stages, r'GPublishLocaleInput', 'stages');
  }

  @override
  GPublishLocaleInput rebuild(
          void Function(GPublishLocaleInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPublishLocaleInputBuilder toBuilder() =>
      new GPublishLocaleInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPublishLocaleInput &&
        locale == other.locale &&
        stages == other.stages;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jc(_$hash, stages.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GPublishLocaleInput')
          ..add('locale', locale)
          ..add('stages', stages))
        .toString();
  }
}

class GPublishLocaleInputBuilder
    implements Builder<GPublishLocaleInput, GPublishLocaleInputBuilder> {
  _$GPublishLocaleInput? _$v;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  ListBuilder<GStage>? _stages;
  ListBuilder<GStage> get stages =>
      _$this._stages ??= new ListBuilder<GStage>();
  set stages(ListBuilder<GStage>? stages) => _$this._stages = stages;

  GPublishLocaleInputBuilder();

  GPublishLocaleInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _locale = $v.locale;
      _stages = $v.stages.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPublishLocaleInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPublishLocaleInput;
  }

  @override
  void update(void Function(GPublishLocaleInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GPublishLocaleInput build() => _build();

  _$GPublishLocaleInput _build() {
    _$GPublishLocaleInput _$result;
    try {
      _$result = _$v ??
          new _$GPublishLocaleInput._(
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GPublishLocaleInput', 'locale'),
              stages: stages.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'stages';
        stages.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GPublishLocaleInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRGBAHue extends GRGBAHue {
  @override
  final String value;

  factory _$GRGBAHue([void Function(GRGBAHueBuilder)? updates]) =>
      (new GRGBAHueBuilder()..update(updates))._build();

  _$GRGBAHue._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GRGBAHue', 'value');
  }

  @override
  GRGBAHue rebuild(void Function(GRGBAHueBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRGBAHueBuilder toBuilder() => new GRGBAHueBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRGBAHue && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRGBAHue')..add('value', value))
        .toString();
  }
}

class GRGBAHueBuilder implements Builder<GRGBAHue, GRGBAHueBuilder> {
  _$GRGBAHue? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GRGBAHueBuilder();

  GRGBAHueBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRGBAHue other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRGBAHue;
  }

  @override
  void update(void Function(GRGBAHueBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRGBAHue build() => _build();

  _$GRGBAHue _build() {
    final _$result = _$v ??
        new _$GRGBAHue._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GRGBAHue', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GRGBAInput extends GRGBAInput {
  @override
  final GRGBAHue r;
  @override
  final GRGBAHue g;
  @override
  final GRGBAHue b;
  @override
  final GRGBATransparency a;

  factory _$GRGBAInput([void Function(GRGBAInputBuilder)? updates]) =>
      (new GRGBAInputBuilder()..update(updates))._build();

  _$GRGBAInput._(
      {required this.r, required this.g, required this.b, required this.a})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(r, r'GRGBAInput', 'r');
    BuiltValueNullFieldError.checkNotNull(g, r'GRGBAInput', 'g');
    BuiltValueNullFieldError.checkNotNull(b, r'GRGBAInput', 'b');
    BuiltValueNullFieldError.checkNotNull(a, r'GRGBAInput', 'a');
  }

  @override
  GRGBAInput rebuild(void Function(GRGBAInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRGBAInputBuilder toBuilder() => new GRGBAInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRGBAInput &&
        r == other.r &&
        g == other.g &&
        b == other.b &&
        a == other.a;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, r.hashCode);
    _$hash = $jc(_$hash, g.hashCode);
    _$hash = $jc(_$hash, b.hashCode);
    _$hash = $jc(_$hash, a.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRGBAInput')
          ..add('r', r)
          ..add('g', g)
          ..add('b', b)
          ..add('a', a))
        .toString();
  }
}

class GRGBAInputBuilder implements Builder<GRGBAInput, GRGBAInputBuilder> {
  _$GRGBAInput? _$v;

  GRGBAHueBuilder? _r;
  GRGBAHueBuilder get r => _$this._r ??= new GRGBAHueBuilder();
  set r(GRGBAHueBuilder? r) => _$this._r = r;

  GRGBAHueBuilder? _g;
  GRGBAHueBuilder get g => _$this._g ??= new GRGBAHueBuilder();
  set g(GRGBAHueBuilder? g) => _$this._g = g;

  GRGBAHueBuilder? _b;
  GRGBAHueBuilder get b => _$this._b ??= new GRGBAHueBuilder();
  set b(GRGBAHueBuilder? b) => _$this._b = b;

  GRGBATransparencyBuilder? _a;
  GRGBATransparencyBuilder get a =>
      _$this._a ??= new GRGBATransparencyBuilder();
  set a(GRGBATransparencyBuilder? a) => _$this._a = a;

  GRGBAInputBuilder();

  GRGBAInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _r = $v.r.toBuilder();
      _g = $v.g.toBuilder();
      _b = $v.b.toBuilder();
      _a = $v.a.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRGBAInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRGBAInput;
  }

  @override
  void update(void Function(GRGBAInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRGBAInput build() => _build();

  _$GRGBAInput _build() {
    _$GRGBAInput _$result;
    try {
      _$result = _$v ??
          new _$GRGBAInput._(
              r: r.build(), g: g.build(), b: b.build(), a: a.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'r';
        r.build();
        _$failedField = 'g';
        g.build();
        _$failedField = 'b';
        b.build();
        _$failedField = 'a';
        a.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GRGBAInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRGBATransparency extends GRGBATransparency {
  @override
  final String value;

  factory _$GRGBATransparency(
          [void Function(GRGBATransparencyBuilder)? updates]) =>
      (new GRGBATransparencyBuilder()..update(updates))._build();

  _$GRGBATransparency._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GRGBATransparency', 'value');
  }

  @override
  GRGBATransparency rebuild(void Function(GRGBATransparencyBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRGBATransparencyBuilder toBuilder() =>
      new GRGBATransparencyBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRGBATransparency && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRGBATransparency')
          ..add('value', value))
        .toString();
  }
}

class GRGBATransparencyBuilder
    implements Builder<GRGBATransparency, GRGBATransparencyBuilder> {
  _$GRGBATransparency? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GRGBATransparencyBuilder();

  GRGBATransparencyBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRGBATransparency other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRGBATransparency;
  }

  @override
  void update(void Function(GRGBATransparencyBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRGBATransparency build() => _build();

  _$GRGBATransparency _build() {
    final _$result = _$v ??
        new _$GRGBATransparency._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GRGBATransparency', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GRichTextAST extends GRichTextAST {
  @override
  final String value;

  factory _$GRichTextAST([void Function(GRichTextASTBuilder)? updates]) =>
      (new GRichTextASTBuilder()..update(updates))._build();

  _$GRichTextAST._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'GRichTextAST', 'value');
  }

  @override
  GRichTextAST rebuild(void Function(GRichTextASTBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRichTextASTBuilder toBuilder() => new GRichTextASTBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRichTextAST && value == other.value;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, value.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GRichTextAST')..add('value', value))
        .toString();
  }
}

class GRichTextASTBuilder
    implements Builder<GRichTextAST, GRichTextASTBuilder> {
  _$GRichTextAST? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GRichTextASTBuilder();

  GRichTextASTBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRichTextAST other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRichTextAST;
  }

  @override
  void update(void Function(GRichTextASTBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GRichTextAST build() => _build();

  _$GRichTextAST _build() {
    final _$result = _$v ??
        new _$GRichTextAST._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'GRichTextAST', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationConnectInput
    extends GScheduledOperationConnectInput {
  @override
  final GScheduledOperationWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GScheduledOperationConnectInput(
          [void Function(GScheduledOperationConnectInputBuilder)? updates]) =>
      (new GScheduledOperationConnectInputBuilder()..update(updates))._build();

  _$GScheduledOperationConnectInput._({required this.where, this.position})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GScheduledOperationConnectInput', 'where');
  }

  @override
  GScheduledOperationConnectInput rebuild(
          void Function(GScheduledOperationConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationConnectInputBuilder toBuilder() =>
      new GScheduledOperationConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledOperationConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GScheduledOperationConnectInputBuilder
    implements
        Builder<GScheduledOperationConnectInput,
            GScheduledOperationConnectInputBuilder> {
  _$GScheduledOperationConnectInput? _$v;

  GScheduledOperationWhereUniqueInputBuilder? _where;
  GScheduledOperationWhereUniqueInputBuilder get where =>
      _$this._where ??= new GScheduledOperationWhereUniqueInputBuilder();
  set where(GScheduledOperationWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GScheduledOperationConnectInputBuilder();

  GScheduledOperationConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationConnectInput;
  }

  @override
  void update(void Function(GScheduledOperationConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationConnectInput build() => _build();

  _$GScheduledOperationConnectInput _build() {
    _$GScheduledOperationConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationCreateManyInlineInput
    extends GScheduledOperationCreateManyInlineInput {
  @override
  final BuiltList<GScheduledOperationWhereUniqueInput>? connect;

  factory _$GScheduledOperationCreateManyInlineInput(
          [void Function(GScheduledOperationCreateManyInlineInputBuilder)?
              updates]) =>
      (new GScheduledOperationCreateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationCreateManyInlineInput._({this.connect}) : super._();

  @override
  GScheduledOperationCreateManyInlineInput rebuild(
          void Function(GScheduledOperationCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationCreateManyInlineInputBuilder toBuilder() =>
      new GScheduledOperationCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationCreateManyInlineInput &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledOperationCreateManyInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GScheduledOperationCreateManyInlineInputBuilder
    implements
        Builder<GScheduledOperationCreateManyInlineInput,
            GScheduledOperationCreateManyInlineInputBuilder> {
  _$GScheduledOperationCreateManyInlineInput? _$v;

  ListBuilder<GScheduledOperationWhereUniqueInput>? _connect;
  ListBuilder<GScheduledOperationWhereUniqueInput> get connect =>
      _$this._connect ??=
          new ListBuilder<GScheduledOperationWhereUniqueInput>();
  set connect(ListBuilder<GScheduledOperationWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GScheduledOperationCreateManyInlineInputBuilder();

  GScheduledOperationCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GScheduledOperationCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationCreateManyInlineInput build() => _build();

  _$GScheduledOperationCreateManyInlineInput _build() {
    _$GScheduledOperationCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationCreateManyInlineInput._(
              connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationCreateOneInlineInput
    extends GScheduledOperationCreateOneInlineInput {
  @override
  final GScheduledOperationWhereUniqueInput? connect;

  factory _$GScheduledOperationCreateOneInlineInput(
          [void Function(GScheduledOperationCreateOneInlineInputBuilder)?
              updates]) =>
      (new GScheduledOperationCreateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationCreateOneInlineInput._({this.connect}) : super._();

  @override
  GScheduledOperationCreateOneInlineInput rebuild(
          void Function(GScheduledOperationCreateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationCreateOneInlineInputBuilder toBuilder() =>
      new GScheduledOperationCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationCreateOneInlineInput &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledOperationCreateOneInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GScheduledOperationCreateOneInlineInputBuilder
    implements
        Builder<GScheduledOperationCreateOneInlineInput,
            GScheduledOperationCreateOneInlineInputBuilder> {
  _$GScheduledOperationCreateOneInlineInput? _$v;

  GScheduledOperationWhereUniqueInputBuilder? _connect;
  GScheduledOperationWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GScheduledOperationWhereUniqueInputBuilder();
  set connect(GScheduledOperationWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GScheduledOperationCreateOneInlineInputBuilder();

  GScheduledOperationCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GScheduledOperationCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationCreateOneInlineInput build() => _build();

  _$GScheduledOperationCreateOneInlineInput _build() {
    _$GScheduledOperationCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationCreateOneInlineInput._(
              connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationManyWhereInput
    extends GScheduledOperationManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GScheduledOperationWhereInput>? AND;
  @override
  final BuiltList<GScheduledOperationWhereInput>? OR;
  @override
  final BuiltList<GScheduledOperationWhereInput>? NOT;
  @override
  final String? rawPayload_json_path_exists;
  @override
  final GJson? rawPayload_value_recursive;
  @override
  final String? errorMessage;
  @override
  final String? errorMessage_not;
  @override
  final BuiltList<String?>? errorMessage_in;
  @override
  final BuiltList<String?>? errorMessage_not_in;
  @override
  final String? errorMessage_contains;
  @override
  final String? errorMessage_not_contains;
  @override
  final String? errorMessage_starts_with;
  @override
  final String? errorMessage_not_starts_with;
  @override
  final String? errorMessage_ends_with;
  @override
  final String? errorMessage_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String?>? description_in;
  @override
  final BuiltList<String?>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GScheduledReleaseWhereInput? release;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledOperationStatus? status;
  @override
  final GScheduledOperationStatus? status_not;
  @override
  final BuiltList<GScheduledOperationStatus?>? status_in;
  @override
  final BuiltList<GScheduledOperationStatus?>? status_not_in;

  factory _$GScheduledOperationManyWhereInput(
          [void Function(GScheduledOperationManyWhereInputBuilder)? updates]) =>
      (new GScheduledOperationManyWhereInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.rawPayload_json_path_exists,
      this.rawPayload_value_recursive,
      this.errorMessage,
      this.errorMessage_not,
      this.errorMessage_in,
      this.errorMessage_not_in,
      this.errorMessage_contains,
      this.errorMessage_not_contains,
      this.errorMessage_starts_with,
      this.errorMessage_not_starts_with,
      this.errorMessage_ends_with,
      this.errorMessage_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.release,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in})
      : super._();

  @override
  GScheduledOperationManyWhereInput rebuild(
          void Function(GScheduledOperationManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationManyWhereInputBuilder toBuilder() =>
      new GScheduledOperationManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        rawPayload_json_path_exists == other.rawPayload_json_path_exists &&
        rawPayload_value_recursive == other.rawPayload_value_recursive &&
        errorMessage == other.errorMessage &&
        errorMessage_not == other.errorMessage_not &&
        errorMessage_in == other.errorMessage_in &&
        errorMessage_not_in == other.errorMessage_not_in &&
        errorMessage_contains == other.errorMessage_contains &&
        errorMessage_not_contains == other.errorMessage_not_contains &&
        errorMessage_starts_with == other.errorMessage_starts_with &&
        errorMessage_not_starts_with == other.errorMessage_not_starts_with &&
        errorMessage_ends_with == other.errorMessage_ends_with &&
        errorMessage_not_ends_with == other.errorMessage_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        release == other.release &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, rawPayload_json_path_exists.hashCode);
    _$hash = $jc(_$hash, rawPayload_value_recursive.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, errorMessage_not.hashCode);
    _$hash = $jc(_$hash, errorMessage_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_ends_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_ends_with.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, description_not.hashCode);
    _$hash = $jc(_$hash, description_in.hashCode);
    _$hash = $jc(_$hash, description_not_in.hashCode);
    _$hash = $jc(_$hash, description_contains.hashCode);
    _$hash = $jc(_$hash, description_not_contains.hashCode);
    _$hash = $jc(_$hash, description_starts_with.hashCode);
    _$hash = $jc(_$hash, description_not_starts_with.hashCode);
    _$hash = $jc(_$hash, description_ends_with.hashCode);
    _$hash = $jc(_$hash, description_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, release.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledOperationManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('rawPayload_json_path_exists', rawPayload_json_path_exists)
          ..add('rawPayload_value_recursive', rawPayload_value_recursive)
          ..add('errorMessage', errorMessage)
          ..add('errorMessage_not', errorMessage_not)
          ..add('errorMessage_in', errorMessage_in)
          ..add('errorMessage_not_in', errorMessage_not_in)
          ..add('errorMessage_contains', errorMessage_contains)
          ..add('errorMessage_not_contains', errorMessage_not_contains)
          ..add('errorMessage_starts_with', errorMessage_starts_with)
          ..add('errorMessage_not_starts_with', errorMessage_not_starts_with)
          ..add('errorMessage_ends_with', errorMessage_ends_with)
          ..add('errorMessage_not_ends_with', errorMessage_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('release', release)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in))
        .toString();
  }
}

class GScheduledOperationManyWhereInputBuilder
    implements
        Builder<GScheduledOperationManyWhereInput,
            GScheduledOperationManyWhereInputBuilder> {
  _$GScheduledOperationManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GScheduledOperationWhereInput>? _AND;
  ListBuilder<GScheduledOperationWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GScheduledOperationWhereInput>();
  set AND(ListBuilder<GScheduledOperationWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GScheduledOperationWhereInput>? _OR;
  ListBuilder<GScheduledOperationWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GScheduledOperationWhereInput>();
  set OR(ListBuilder<GScheduledOperationWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GScheduledOperationWhereInput>? _NOT;
  ListBuilder<GScheduledOperationWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GScheduledOperationWhereInput>();
  set NOT(ListBuilder<GScheduledOperationWhereInput>? NOT) => _$this._NOT = NOT;

  String? _rawPayload_json_path_exists;
  String? get rawPayload_json_path_exists =>
      _$this._rawPayload_json_path_exists;
  set rawPayload_json_path_exists(String? rawPayload_json_path_exists) =>
      _$this._rawPayload_json_path_exists = rawPayload_json_path_exists;

  GJsonBuilder? _rawPayload_value_recursive;
  GJsonBuilder get rawPayload_value_recursive =>
      _$this._rawPayload_value_recursive ??= new GJsonBuilder();
  set rawPayload_value_recursive(GJsonBuilder? rawPayload_value_recursive) =>
      _$this._rawPayload_value_recursive = rawPayload_value_recursive;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _errorMessage_not;
  String? get errorMessage_not => _$this._errorMessage_not;
  set errorMessage_not(String? errorMessage_not) =>
      _$this._errorMessage_not = errorMessage_not;

  ListBuilder<String?>? _errorMessage_in;
  ListBuilder<String?> get errorMessage_in =>
      _$this._errorMessage_in ??= new ListBuilder<String?>();
  set errorMessage_in(ListBuilder<String?>? errorMessage_in) =>
      _$this._errorMessage_in = errorMessage_in;

  ListBuilder<String?>? _errorMessage_not_in;
  ListBuilder<String?> get errorMessage_not_in =>
      _$this._errorMessage_not_in ??= new ListBuilder<String?>();
  set errorMessage_not_in(ListBuilder<String?>? errorMessage_not_in) =>
      _$this._errorMessage_not_in = errorMessage_not_in;

  String? _errorMessage_contains;
  String? get errorMessage_contains => _$this._errorMessage_contains;
  set errorMessage_contains(String? errorMessage_contains) =>
      _$this._errorMessage_contains = errorMessage_contains;

  String? _errorMessage_not_contains;
  String? get errorMessage_not_contains => _$this._errorMessage_not_contains;
  set errorMessage_not_contains(String? errorMessage_not_contains) =>
      _$this._errorMessage_not_contains = errorMessage_not_contains;

  String? _errorMessage_starts_with;
  String? get errorMessage_starts_with => _$this._errorMessage_starts_with;
  set errorMessage_starts_with(String? errorMessage_starts_with) =>
      _$this._errorMessage_starts_with = errorMessage_starts_with;

  String? _errorMessage_not_starts_with;
  String? get errorMessage_not_starts_with =>
      _$this._errorMessage_not_starts_with;
  set errorMessage_not_starts_with(String? errorMessage_not_starts_with) =>
      _$this._errorMessage_not_starts_with = errorMessage_not_starts_with;

  String? _errorMessage_ends_with;
  String? get errorMessage_ends_with => _$this._errorMessage_ends_with;
  set errorMessage_ends_with(String? errorMessage_ends_with) =>
      _$this._errorMessage_ends_with = errorMessage_ends_with;

  String? _errorMessage_not_ends_with;
  String? get errorMessage_not_ends_with => _$this._errorMessage_not_ends_with;
  set errorMessage_not_ends_with(String? errorMessage_not_ends_with) =>
      _$this._errorMessage_not_ends_with = errorMessage_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String?>? _description_in;
  ListBuilder<String?> get description_in =>
      _$this._description_in ??= new ListBuilder<String?>();
  set description_in(ListBuilder<String?>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String?>? _description_not_in;
  ListBuilder<String?> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String?>();
  set description_not_in(ListBuilder<String?>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GScheduledReleaseWhereInputBuilder? _release;
  GScheduledReleaseWhereInputBuilder get release =>
      _$this._release ??= new GScheduledReleaseWhereInputBuilder();
  set release(GScheduledReleaseWhereInputBuilder? release) =>
      _$this._release = release;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledOperationStatus? _status;
  GScheduledOperationStatus? get status => _$this._status;
  set status(GScheduledOperationStatus? status) => _$this._status = status;

  GScheduledOperationStatus? _status_not;
  GScheduledOperationStatus? get status_not => _$this._status_not;
  set status_not(GScheduledOperationStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GScheduledOperationStatus?>? _status_in;
  ListBuilder<GScheduledOperationStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GScheduledOperationStatus?>();
  set status_in(ListBuilder<GScheduledOperationStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GScheduledOperationStatus?>? _status_not_in;
  ListBuilder<GScheduledOperationStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GScheduledOperationStatus?>();
  set status_not_in(ListBuilder<GScheduledOperationStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GScheduledOperationManyWhereInputBuilder();

  GScheduledOperationManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _rawPayload_json_path_exists = $v.rawPayload_json_path_exists;
      _rawPayload_value_recursive = $v.rawPayload_value_recursive?.toBuilder();
      _errorMessage = $v.errorMessage;
      _errorMessage_not = $v.errorMessage_not;
      _errorMessage_in = $v.errorMessage_in?.toBuilder();
      _errorMessage_not_in = $v.errorMessage_not_in?.toBuilder();
      _errorMessage_contains = $v.errorMessage_contains;
      _errorMessage_not_contains = $v.errorMessage_not_contains;
      _errorMessage_starts_with = $v.errorMessage_starts_with;
      _errorMessage_not_starts_with = $v.errorMessage_not_starts_with;
      _errorMessage_ends_with = $v.errorMessage_ends_with;
      _errorMessage_not_ends_with = $v.errorMessage_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _release = $v.release?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationManyWhereInput;
  }

  @override
  void update(
      void Function(GScheduledOperationManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationManyWhereInput build() => _build();

  _$GScheduledOperationManyWhereInput _build() {
    _$GScheduledOperationManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              rawPayload_json_path_exists: rawPayload_json_path_exists,
              rawPayload_value_recursive: _rawPayload_value_recursive?.build(),
              errorMessage: errorMessage,
              errorMessage_not: errorMessage_not,
              errorMessage_in: _errorMessage_in?.build(),
              errorMessage_not_in: _errorMessage_not_in?.build(),
              errorMessage_contains: errorMessage_contains,
              errorMessage_not_contains: errorMessage_not_contains,
              errorMessage_starts_with: errorMessage_starts_with,
              errorMessage_not_starts_with: errorMessage_not_starts_with,
              errorMessage_ends_with: errorMessage_ends_with,
              errorMessage_not_ends_with: errorMessage_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              release: _release?.build(),
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'rawPayload_value_recursive';
        _rawPayload_value_recursive?.build();

        _$failedField = 'errorMessage_in';
        _errorMessage_in?.build();
        _$failedField = 'errorMessage_not_in';
        _errorMessage_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'release';
        _release?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationUpdateManyInlineInput
    extends GScheduledOperationUpdateManyInlineInput {
  @override
  final BuiltList<GScheduledOperationConnectInput>? connect;
  @override
  final BuiltList<GScheduledOperationWhereUniqueInput>? set;
  @override
  final BuiltList<GScheduledOperationWhereUniqueInput>? disconnect;

  factory _$GScheduledOperationUpdateManyInlineInput(
          [void Function(GScheduledOperationUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GScheduledOperationUpdateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationUpdateManyInlineInput._(
      {this.connect, this.set, this.disconnect})
      : super._();

  @override
  GScheduledOperationUpdateManyInlineInput rebuild(
          void Function(GScheduledOperationUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationUpdateManyInlineInputBuilder toBuilder() =>
      new GScheduledOperationUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationUpdateManyInlineInput &&
        connect == other.connect &&
        set == other.set &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledOperationUpdateManyInlineInput')
          ..add('connect', connect)
          ..add('set', set)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GScheduledOperationUpdateManyInlineInputBuilder
    implements
        Builder<GScheduledOperationUpdateManyInlineInput,
            GScheduledOperationUpdateManyInlineInputBuilder> {
  _$GScheduledOperationUpdateManyInlineInput? _$v;

  ListBuilder<GScheduledOperationConnectInput>? _connect;
  ListBuilder<GScheduledOperationConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GScheduledOperationConnectInput>();
  set connect(ListBuilder<GScheduledOperationConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GScheduledOperationWhereUniqueInput>? _set;
  ListBuilder<GScheduledOperationWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GScheduledOperationWhereUniqueInput>();
  set set(ListBuilder<GScheduledOperationWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GScheduledOperationWhereUniqueInput>? _disconnect;
  ListBuilder<GScheduledOperationWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GScheduledOperationWhereUniqueInput>();
  set disconnect(
          ListBuilder<GScheduledOperationWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  GScheduledOperationUpdateManyInlineInputBuilder();

  GScheduledOperationUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GScheduledOperationUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationUpdateManyInlineInput build() => _build();

  _$GScheduledOperationUpdateManyInlineInput _build() {
    _$GScheduledOperationUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationUpdateManyInlineInput._(
              connect: _connect?.build(),
              set: _set?.build(),
              disconnect: _disconnect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationUpdateOneInlineInput
    extends GScheduledOperationUpdateOneInlineInput {
  @override
  final GScheduledOperationWhereUniqueInput? connect;
  @override
  final bool? disconnect;

  factory _$GScheduledOperationUpdateOneInlineInput(
          [void Function(GScheduledOperationUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GScheduledOperationUpdateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationUpdateOneInlineInput._({this.connect, this.disconnect})
      : super._();

  @override
  GScheduledOperationUpdateOneInlineInput rebuild(
          void Function(GScheduledOperationUpdateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationUpdateOneInlineInputBuilder toBuilder() =>
      new GScheduledOperationUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationUpdateOneInlineInput &&
        connect == other.connect &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledOperationUpdateOneInlineInput')
          ..add('connect', connect)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GScheduledOperationUpdateOneInlineInputBuilder
    implements
        Builder<GScheduledOperationUpdateOneInlineInput,
            GScheduledOperationUpdateOneInlineInputBuilder> {
  _$GScheduledOperationUpdateOneInlineInput? _$v;

  GScheduledOperationWhereUniqueInputBuilder? _connect;
  GScheduledOperationWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GScheduledOperationWhereUniqueInputBuilder();
  set connect(GScheduledOperationWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  GScheduledOperationUpdateOneInlineInputBuilder();

  GScheduledOperationUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GScheduledOperationUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationUpdateOneInlineInput build() => _build();

  _$GScheduledOperationUpdateOneInlineInput _build() {
    _$GScheduledOperationUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationUpdateOneInlineInput._(
              connect: _connect?.build(), disconnect: disconnect);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationWhereInput extends GScheduledOperationWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GScheduledOperationWhereInput>? AND;
  @override
  final BuiltList<GScheduledOperationWhereInput>? OR;
  @override
  final BuiltList<GScheduledOperationWhereInput>? NOT;
  @override
  final String? rawPayload_json_path_exists;
  @override
  final GJson? rawPayload_value_recursive;
  @override
  final String? errorMessage;
  @override
  final String? errorMessage_not;
  @override
  final BuiltList<String?>? errorMessage_in;
  @override
  final BuiltList<String?>? errorMessage_not_in;
  @override
  final String? errorMessage_contains;
  @override
  final String? errorMessage_not_contains;
  @override
  final String? errorMessage_starts_with;
  @override
  final String? errorMessage_not_starts_with;
  @override
  final String? errorMessage_ends_with;
  @override
  final String? errorMessage_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String?>? description_in;
  @override
  final BuiltList<String?>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GScheduledReleaseWhereInput? release;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledOperationStatus? status;
  @override
  final GScheduledOperationStatus? status_not;
  @override
  final BuiltList<GScheduledOperationStatus?>? status_in;
  @override
  final BuiltList<GScheduledOperationStatus?>? status_not_in;

  factory _$GScheduledOperationWhereInput(
          [void Function(GScheduledOperationWhereInputBuilder)? updates]) =>
      (new GScheduledOperationWhereInputBuilder()..update(updates))._build();

  _$GScheduledOperationWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.rawPayload_json_path_exists,
      this.rawPayload_value_recursive,
      this.errorMessage,
      this.errorMessage_not,
      this.errorMessage_in,
      this.errorMessage_not_in,
      this.errorMessage_contains,
      this.errorMessage_not_contains,
      this.errorMessage_starts_with,
      this.errorMessage_not_starts_with,
      this.errorMessage_ends_with,
      this.errorMessage_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.release,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in})
      : super._();

  @override
  GScheduledOperationWhereInput rebuild(
          void Function(GScheduledOperationWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationWhereInputBuilder toBuilder() =>
      new GScheduledOperationWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        rawPayload_json_path_exists == other.rawPayload_json_path_exists &&
        rawPayload_value_recursive == other.rawPayload_value_recursive &&
        errorMessage == other.errorMessage &&
        errorMessage_not == other.errorMessage_not &&
        errorMessage_in == other.errorMessage_in &&
        errorMessage_not_in == other.errorMessage_not_in &&
        errorMessage_contains == other.errorMessage_contains &&
        errorMessage_not_contains == other.errorMessage_not_contains &&
        errorMessage_starts_with == other.errorMessage_starts_with &&
        errorMessage_not_starts_with == other.errorMessage_not_starts_with &&
        errorMessage_ends_with == other.errorMessage_ends_with &&
        errorMessage_not_ends_with == other.errorMessage_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        release == other.release &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, rawPayload_json_path_exists.hashCode);
    _$hash = $jc(_$hash, rawPayload_value_recursive.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, errorMessage_not.hashCode);
    _$hash = $jc(_$hash, errorMessage_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_ends_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_ends_with.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, description_not.hashCode);
    _$hash = $jc(_$hash, description_in.hashCode);
    _$hash = $jc(_$hash, description_not_in.hashCode);
    _$hash = $jc(_$hash, description_contains.hashCode);
    _$hash = $jc(_$hash, description_not_contains.hashCode);
    _$hash = $jc(_$hash, description_starts_with.hashCode);
    _$hash = $jc(_$hash, description_not_starts_with.hashCode);
    _$hash = $jc(_$hash, description_ends_with.hashCode);
    _$hash = $jc(_$hash, description_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, release.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledOperationWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('rawPayload_json_path_exists', rawPayload_json_path_exists)
          ..add('rawPayload_value_recursive', rawPayload_value_recursive)
          ..add('errorMessage', errorMessage)
          ..add('errorMessage_not', errorMessage_not)
          ..add('errorMessage_in', errorMessage_in)
          ..add('errorMessage_not_in', errorMessage_not_in)
          ..add('errorMessage_contains', errorMessage_contains)
          ..add('errorMessage_not_contains', errorMessage_not_contains)
          ..add('errorMessage_starts_with', errorMessage_starts_with)
          ..add('errorMessage_not_starts_with', errorMessage_not_starts_with)
          ..add('errorMessage_ends_with', errorMessage_ends_with)
          ..add('errorMessage_not_ends_with', errorMessage_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('release', release)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in))
        .toString();
  }
}

class GScheduledOperationWhereInputBuilder
    implements
        Builder<GScheduledOperationWhereInput,
            GScheduledOperationWhereInputBuilder> {
  _$GScheduledOperationWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GScheduledOperationWhereInput>? _AND;
  ListBuilder<GScheduledOperationWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GScheduledOperationWhereInput>();
  set AND(ListBuilder<GScheduledOperationWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GScheduledOperationWhereInput>? _OR;
  ListBuilder<GScheduledOperationWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GScheduledOperationWhereInput>();
  set OR(ListBuilder<GScheduledOperationWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GScheduledOperationWhereInput>? _NOT;
  ListBuilder<GScheduledOperationWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GScheduledOperationWhereInput>();
  set NOT(ListBuilder<GScheduledOperationWhereInput>? NOT) => _$this._NOT = NOT;

  String? _rawPayload_json_path_exists;
  String? get rawPayload_json_path_exists =>
      _$this._rawPayload_json_path_exists;
  set rawPayload_json_path_exists(String? rawPayload_json_path_exists) =>
      _$this._rawPayload_json_path_exists = rawPayload_json_path_exists;

  GJsonBuilder? _rawPayload_value_recursive;
  GJsonBuilder get rawPayload_value_recursive =>
      _$this._rawPayload_value_recursive ??= new GJsonBuilder();
  set rawPayload_value_recursive(GJsonBuilder? rawPayload_value_recursive) =>
      _$this._rawPayload_value_recursive = rawPayload_value_recursive;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _errorMessage_not;
  String? get errorMessage_not => _$this._errorMessage_not;
  set errorMessage_not(String? errorMessage_not) =>
      _$this._errorMessage_not = errorMessage_not;

  ListBuilder<String?>? _errorMessage_in;
  ListBuilder<String?> get errorMessage_in =>
      _$this._errorMessage_in ??= new ListBuilder<String?>();
  set errorMessage_in(ListBuilder<String?>? errorMessage_in) =>
      _$this._errorMessage_in = errorMessage_in;

  ListBuilder<String?>? _errorMessage_not_in;
  ListBuilder<String?> get errorMessage_not_in =>
      _$this._errorMessage_not_in ??= new ListBuilder<String?>();
  set errorMessage_not_in(ListBuilder<String?>? errorMessage_not_in) =>
      _$this._errorMessage_not_in = errorMessage_not_in;

  String? _errorMessage_contains;
  String? get errorMessage_contains => _$this._errorMessage_contains;
  set errorMessage_contains(String? errorMessage_contains) =>
      _$this._errorMessage_contains = errorMessage_contains;

  String? _errorMessage_not_contains;
  String? get errorMessage_not_contains => _$this._errorMessage_not_contains;
  set errorMessage_not_contains(String? errorMessage_not_contains) =>
      _$this._errorMessage_not_contains = errorMessage_not_contains;

  String? _errorMessage_starts_with;
  String? get errorMessage_starts_with => _$this._errorMessage_starts_with;
  set errorMessage_starts_with(String? errorMessage_starts_with) =>
      _$this._errorMessage_starts_with = errorMessage_starts_with;

  String? _errorMessage_not_starts_with;
  String? get errorMessage_not_starts_with =>
      _$this._errorMessage_not_starts_with;
  set errorMessage_not_starts_with(String? errorMessage_not_starts_with) =>
      _$this._errorMessage_not_starts_with = errorMessage_not_starts_with;

  String? _errorMessage_ends_with;
  String? get errorMessage_ends_with => _$this._errorMessage_ends_with;
  set errorMessage_ends_with(String? errorMessage_ends_with) =>
      _$this._errorMessage_ends_with = errorMessage_ends_with;

  String? _errorMessage_not_ends_with;
  String? get errorMessage_not_ends_with => _$this._errorMessage_not_ends_with;
  set errorMessage_not_ends_with(String? errorMessage_not_ends_with) =>
      _$this._errorMessage_not_ends_with = errorMessage_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String?>? _description_in;
  ListBuilder<String?> get description_in =>
      _$this._description_in ??= new ListBuilder<String?>();
  set description_in(ListBuilder<String?>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String?>? _description_not_in;
  ListBuilder<String?> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String?>();
  set description_not_in(ListBuilder<String?>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GScheduledReleaseWhereInputBuilder? _release;
  GScheduledReleaseWhereInputBuilder get release =>
      _$this._release ??= new GScheduledReleaseWhereInputBuilder();
  set release(GScheduledReleaseWhereInputBuilder? release) =>
      _$this._release = release;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledOperationStatus? _status;
  GScheduledOperationStatus? get status => _$this._status;
  set status(GScheduledOperationStatus? status) => _$this._status = status;

  GScheduledOperationStatus? _status_not;
  GScheduledOperationStatus? get status_not => _$this._status_not;
  set status_not(GScheduledOperationStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GScheduledOperationStatus?>? _status_in;
  ListBuilder<GScheduledOperationStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GScheduledOperationStatus?>();
  set status_in(ListBuilder<GScheduledOperationStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GScheduledOperationStatus?>? _status_not_in;
  ListBuilder<GScheduledOperationStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GScheduledOperationStatus?>();
  set status_not_in(ListBuilder<GScheduledOperationStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GScheduledOperationWhereInputBuilder();

  GScheduledOperationWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _rawPayload_json_path_exists = $v.rawPayload_json_path_exists;
      _rawPayload_value_recursive = $v.rawPayload_value_recursive?.toBuilder();
      _errorMessage = $v.errorMessage;
      _errorMessage_not = $v.errorMessage_not;
      _errorMessage_in = $v.errorMessage_in?.toBuilder();
      _errorMessage_not_in = $v.errorMessage_not_in?.toBuilder();
      _errorMessage_contains = $v.errorMessage_contains;
      _errorMessage_not_contains = $v.errorMessage_not_contains;
      _errorMessage_starts_with = $v.errorMessage_starts_with;
      _errorMessage_not_starts_with = $v.errorMessage_not_starts_with;
      _errorMessage_ends_with = $v.errorMessage_ends_with;
      _errorMessage_not_ends_with = $v.errorMessage_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _release = $v.release?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationWhereInput;
  }

  @override
  void update(void Function(GScheduledOperationWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationWhereInput build() => _build();

  _$GScheduledOperationWhereInput _build() {
    _$GScheduledOperationWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledOperationWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              rawPayload_json_path_exists: rawPayload_json_path_exists,
              rawPayload_value_recursive: _rawPayload_value_recursive?.build(),
              errorMessage: errorMessage,
              errorMessage_not: errorMessage_not,
              errorMessage_in: _errorMessage_in?.build(),
              errorMessage_not_in: _errorMessage_not_in?.build(),
              errorMessage_contains: errorMessage_contains,
              errorMessage_not_contains: errorMessage_not_contains,
              errorMessage_starts_with: errorMessage_starts_with,
              errorMessage_not_starts_with: errorMessage_not_starts_with,
              errorMessage_ends_with: errorMessage_ends_with,
              errorMessage_not_ends_with: errorMessage_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              release: _release?.build(),
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'rawPayload_value_recursive';
        _rawPayload_value_recursive?.build();

        _$failedField = 'errorMessage_in';
        _errorMessage_in?.build();
        _$failedField = 'errorMessage_not_in';
        _errorMessage_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'release';
        _release?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledOperationWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledOperationWhereUniqueInput
    extends GScheduledOperationWhereUniqueInput {
  @override
  final String? id;

  factory _$GScheduledOperationWhereUniqueInput(
          [void Function(GScheduledOperationWhereUniqueInputBuilder)?
              updates]) =>
      (new GScheduledOperationWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GScheduledOperationWhereUniqueInput._({this.id}) : super._();

  @override
  GScheduledOperationWhereUniqueInput rebuild(
          void Function(GScheduledOperationWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledOperationWhereUniqueInputBuilder toBuilder() =>
      new GScheduledOperationWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledOperationWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledOperationWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GScheduledOperationWhereUniqueInputBuilder
    implements
        Builder<GScheduledOperationWhereUniqueInput,
            GScheduledOperationWhereUniqueInputBuilder> {
  _$GScheduledOperationWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GScheduledOperationWhereUniqueInputBuilder();

  GScheduledOperationWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledOperationWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledOperationWhereUniqueInput;
  }

  @override
  void update(
      void Function(GScheduledOperationWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledOperationWhereUniqueInput build() => _build();

  _$GScheduledOperationWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GScheduledOperationWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseConnectInput extends GScheduledReleaseConnectInput {
  @override
  final GScheduledReleaseWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GScheduledReleaseConnectInput(
          [void Function(GScheduledReleaseConnectInputBuilder)? updates]) =>
      (new GScheduledReleaseConnectInputBuilder()..update(updates))._build();

  _$GScheduledReleaseConnectInput._({required this.where, this.position})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GScheduledReleaseConnectInput', 'where');
  }

  @override
  GScheduledReleaseConnectInput rebuild(
          void Function(GScheduledReleaseConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseConnectInputBuilder toBuilder() =>
      new GScheduledReleaseConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GScheduledReleaseConnectInputBuilder
    implements
        Builder<GScheduledReleaseConnectInput,
            GScheduledReleaseConnectInputBuilder> {
  _$GScheduledReleaseConnectInput? _$v;

  GScheduledReleaseWhereUniqueInputBuilder? _where;
  GScheduledReleaseWhereUniqueInputBuilder get where =>
      _$this._where ??= new GScheduledReleaseWhereUniqueInputBuilder();
  set where(GScheduledReleaseWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GScheduledReleaseConnectInputBuilder();

  GScheduledReleaseConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseConnectInput;
  }

  @override
  void update(void Function(GScheduledReleaseConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseConnectInput build() => _build();

  _$GScheduledReleaseConnectInput _build() {
    _$GScheduledReleaseConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseCreateInput extends GScheduledReleaseCreateInput {
  @override
  final GDateTime? releaseAt;
  @override
  final bool? isActive;
  @override
  final String? errorMessage;
  @override
  final String? description;
  @override
  final String? title;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? createdAt;

  factory _$GScheduledReleaseCreateInput(
          [void Function(GScheduledReleaseCreateInputBuilder)? updates]) =>
      (new GScheduledReleaseCreateInputBuilder()..update(updates))._build();

  _$GScheduledReleaseCreateInput._(
      {this.releaseAt,
      this.isActive,
      this.errorMessage,
      this.description,
      this.title,
      this.updatedAt,
      this.createdAt})
      : super._();

  @override
  GScheduledReleaseCreateInput rebuild(
          void Function(GScheduledReleaseCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseCreateInputBuilder toBuilder() =>
      new GScheduledReleaseCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseCreateInput &&
        releaseAt == other.releaseAt &&
        isActive == other.isActive &&
        errorMessage == other.errorMessage &&
        description == other.description &&
        title == other.title &&
        updatedAt == other.updatedAt &&
        createdAt == other.createdAt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, releaseAt.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseCreateInput')
          ..add('releaseAt', releaseAt)
          ..add('isActive', isActive)
          ..add('errorMessage', errorMessage)
          ..add('description', description)
          ..add('title', title)
          ..add('updatedAt', updatedAt)
          ..add('createdAt', createdAt))
        .toString();
  }
}

class GScheduledReleaseCreateInputBuilder
    implements
        Builder<GScheduledReleaseCreateInput,
            GScheduledReleaseCreateInputBuilder> {
  _$GScheduledReleaseCreateInput? _$v;

  GDateTimeBuilder? _releaseAt;
  GDateTimeBuilder get releaseAt =>
      _$this._releaseAt ??= new GDateTimeBuilder();
  set releaseAt(GDateTimeBuilder? releaseAt) => _$this._releaseAt = releaseAt;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GScheduledReleaseCreateInputBuilder();

  GScheduledReleaseCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _releaseAt = $v.releaseAt?.toBuilder();
      _isActive = $v.isActive;
      _errorMessage = $v.errorMessage;
      _description = $v.description;
      _title = $v.title;
      _updatedAt = $v.updatedAt?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseCreateInput;
  }

  @override
  void update(void Function(GScheduledReleaseCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseCreateInput build() => _build();

  _$GScheduledReleaseCreateInput _build() {
    _$GScheduledReleaseCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseCreateInput._(
              releaseAt: _releaseAt?.build(),
              isActive: isActive,
              errorMessage: errorMessage,
              description: description,
              title: title,
              updatedAt: _updatedAt?.build(),
              createdAt: _createdAt?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'releaseAt';
        _releaseAt?.build();

        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseCreateManyInlineInput
    extends GScheduledReleaseCreateManyInlineInput {
  @override
  final BuiltList<GScheduledReleaseCreateInput>? create;
  @override
  final BuiltList<GScheduledReleaseWhereUniqueInput>? connect;

  factory _$GScheduledReleaseCreateManyInlineInput(
          [void Function(GScheduledReleaseCreateManyInlineInputBuilder)?
              updates]) =>
      (new GScheduledReleaseCreateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledReleaseCreateManyInlineInput._({this.create, this.connect})
      : super._();

  @override
  GScheduledReleaseCreateManyInlineInput rebuild(
          void Function(GScheduledReleaseCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseCreateManyInlineInputBuilder toBuilder() =>
      new GScheduledReleaseCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GScheduledReleaseCreateManyInlineInputBuilder
    implements
        Builder<GScheduledReleaseCreateManyInlineInput,
            GScheduledReleaseCreateManyInlineInputBuilder> {
  _$GScheduledReleaseCreateManyInlineInput? _$v;

  ListBuilder<GScheduledReleaseCreateInput>? _create;
  ListBuilder<GScheduledReleaseCreateInput> get create =>
      _$this._create ??= new ListBuilder<GScheduledReleaseCreateInput>();
  set create(ListBuilder<GScheduledReleaseCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GScheduledReleaseWhereUniqueInput>? _connect;
  ListBuilder<GScheduledReleaseWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GScheduledReleaseWhereUniqueInput>();
  set connect(ListBuilder<GScheduledReleaseWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GScheduledReleaseCreateManyInlineInputBuilder();

  GScheduledReleaseCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseCreateManyInlineInput build() => _build();

  _$GScheduledReleaseCreateManyInlineInput _build() {
    _$GScheduledReleaseCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseCreateOneInlineInput
    extends GScheduledReleaseCreateOneInlineInput {
  @override
  final GScheduledReleaseCreateInput? create;
  @override
  final GScheduledReleaseWhereUniqueInput? connect;

  factory _$GScheduledReleaseCreateOneInlineInput(
          [void Function(GScheduledReleaseCreateOneInlineInputBuilder)?
              updates]) =>
      (new GScheduledReleaseCreateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledReleaseCreateOneInlineInput._({this.create, this.connect})
      : super._();

  @override
  GScheduledReleaseCreateOneInlineInput rebuild(
          void Function(GScheduledReleaseCreateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseCreateOneInlineInputBuilder toBuilder() =>
      new GScheduledReleaseCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GScheduledReleaseCreateOneInlineInputBuilder
    implements
        Builder<GScheduledReleaseCreateOneInlineInput,
            GScheduledReleaseCreateOneInlineInputBuilder> {
  _$GScheduledReleaseCreateOneInlineInput? _$v;

  GScheduledReleaseCreateInputBuilder? _create;
  GScheduledReleaseCreateInputBuilder get create =>
      _$this._create ??= new GScheduledReleaseCreateInputBuilder();
  set create(GScheduledReleaseCreateInputBuilder? create) =>
      _$this._create = create;

  GScheduledReleaseWhereUniqueInputBuilder? _connect;
  GScheduledReleaseWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GScheduledReleaseWhereUniqueInputBuilder();
  set connect(GScheduledReleaseWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GScheduledReleaseCreateOneInlineInputBuilder();

  GScheduledReleaseCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseCreateOneInlineInput build() => _build();

  _$GScheduledReleaseCreateOneInlineInput _build() {
    _$GScheduledReleaseCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseManyWhereInput
    extends GScheduledReleaseManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? AND;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? OR;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? NOT;
  @override
  final GDateTime? releaseAt;
  @override
  final GDateTime? releaseAt_not;
  @override
  final BuiltList<GDateTime?>? releaseAt_in;
  @override
  final BuiltList<GDateTime?>? releaseAt_not_in;
  @override
  final GDateTime? releaseAt_lt;
  @override
  final GDateTime? releaseAt_lte;
  @override
  final GDateTime? releaseAt_gt;
  @override
  final GDateTime? releaseAt_gte;
  @override
  final bool? isImplicit;
  @override
  final bool? isImplicit_not;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final String? errorMessage;
  @override
  final String? errorMessage_not;
  @override
  final BuiltList<String?>? errorMessage_in;
  @override
  final BuiltList<String?>? errorMessage_not_in;
  @override
  final String? errorMessage_contains;
  @override
  final String? errorMessage_not_contains;
  @override
  final String? errorMessage_starts_with;
  @override
  final String? errorMessage_not_starts_with;
  @override
  final String? errorMessage_ends_with;
  @override
  final String? errorMessage_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String?>? description_in;
  @override
  final BuiltList<String?>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GScheduledOperationWhereInput? operations_every;
  @override
  final GScheduledOperationWhereInput? operations_some;
  @override
  final GScheduledOperationWhereInput? operations_none;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledReleaseStatus? status;
  @override
  final GScheduledReleaseStatus? status_not;
  @override
  final BuiltList<GScheduledReleaseStatus?>? status_in;
  @override
  final BuiltList<GScheduledReleaseStatus?>? status_not_in;

  factory _$GScheduledReleaseManyWhereInput(
          [void Function(GScheduledReleaseManyWhereInputBuilder)? updates]) =>
      (new GScheduledReleaseManyWhereInputBuilder()..update(updates))._build();

  _$GScheduledReleaseManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.releaseAt,
      this.releaseAt_not,
      this.releaseAt_in,
      this.releaseAt_not_in,
      this.releaseAt_lt,
      this.releaseAt_lte,
      this.releaseAt_gt,
      this.releaseAt_gte,
      this.isImplicit,
      this.isImplicit_not,
      this.isActive,
      this.isActive_not,
      this.errorMessage,
      this.errorMessage_not,
      this.errorMessage_in,
      this.errorMessage_not_in,
      this.errorMessage_contains,
      this.errorMessage_not_contains,
      this.errorMessage_starts_with,
      this.errorMessage_not_starts_with,
      this.errorMessage_ends_with,
      this.errorMessage_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.operations_every,
      this.operations_some,
      this.operations_none,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in})
      : super._();

  @override
  GScheduledReleaseManyWhereInput rebuild(
          void Function(GScheduledReleaseManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseManyWhereInputBuilder toBuilder() =>
      new GScheduledReleaseManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        releaseAt == other.releaseAt &&
        releaseAt_not == other.releaseAt_not &&
        releaseAt_in == other.releaseAt_in &&
        releaseAt_not_in == other.releaseAt_not_in &&
        releaseAt_lt == other.releaseAt_lt &&
        releaseAt_lte == other.releaseAt_lte &&
        releaseAt_gt == other.releaseAt_gt &&
        releaseAt_gte == other.releaseAt_gte &&
        isImplicit == other.isImplicit &&
        isImplicit_not == other.isImplicit_not &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        errorMessage == other.errorMessage &&
        errorMessage_not == other.errorMessage_not &&
        errorMessage_in == other.errorMessage_in &&
        errorMessage_not_in == other.errorMessage_not_in &&
        errorMessage_contains == other.errorMessage_contains &&
        errorMessage_not_contains == other.errorMessage_not_contains &&
        errorMessage_starts_with == other.errorMessage_starts_with &&
        errorMessage_not_starts_with == other.errorMessage_not_starts_with &&
        errorMessage_ends_with == other.errorMessage_ends_with &&
        errorMessage_not_ends_with == other.errorMessage_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        operations_every == other.operations_every &&
        operations_some == other.operations_some &&
        operations_none == other.operations_none &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, releaseAt.hashCode);
    _$hash = $jc(_$hash, releaseAt_not.hashCode);
    _$hash = $jc(_$hash, releaseAt_in.hashCode);
    _$hash = $jc(_$hash, releaseAt_not_in.hashCode);
    _$hash = $jc(_$hash, releaseAt_lt.hashCode);
    _$hash = $jc(_$hash, releaseAt_lte.hashCode);
    _$hash = $jc(_$hash, releaseAt_gt.hashCode);
    _$hash = $jc(_$hash, releaseAt_gte.hashCode);
    _$hash = $jc(_$hash, isImplicit.hashCode);
    _$hash = $jc(_$hash, isImplicit_not.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, isActive_not.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, errorMessage_not.hashCode);
    _$hash = $jc(_$hash, errorMessage_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_ends_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_ends_with.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, description_not.hashCode);
    _$hash = $jc(_$hash, description_in.hashCode);
    _$hash = $jc(_$hash, description_not_in.hashCode);
    _$hash = $jc(_$hash, description_contains.hashCode);
    _$hash = $jc(_$hash, description_not_contains.hashCode);
    _$hash = $jc(_$hash, description_starts_with.hashCode);
    _$hash = $jc(_$hash, description_not_starts_with.hashCode);
    _$hash = $jc(_$hash, description_ends_with.hashCode);
    _$hash = $jc(_$hash, description_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, operations_every.hashCode);
    _$hash = $jc(_$hash, operations_some.hashCode);
    _$hash = $jc(_$hash, operations_none.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('releaseAt', releaseAt)
          ..add('releaseAt_not', releaseAt_not)
          ..add('releaseAt_in', releaseAt_in)
          ..add('releaseAt_not_in', releaseAt_not_in)
          ..add('releaseAt_lt', releaseAt_lt)
          ..add('releaseAt_lte', releaseAt_lte)
          ..add('releaseAt_gt', releaseAt_gt)
          ..add('releaseAt_gte', releaseAt_gte)
          ..add('isImplicit', isImplicit)
          ..add('isImplicit_not', isImplicit_not)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('errorMessage', errorMessage)
          ..add('errorMessage_not', errorMessage_not)
          ..add('errorMessage_in', errorMessage_in)
          ..add('errorMessage_not_in', errorMessage_not_in)
          ..add('errorMessage_contains', errorMessage_contains)
          ..add('errorMessage_not_contains', errorMessage_not_contains)
          ..add('errorMessage_starts_with', errorMessage_starts_with)
          ..add('errorMessage_not_starts_with', errorMessage_not_starts_with)
          ..add('errorMessage_ends_with', errorMessage_ends_with)
          ..add('errorMessage_not_ends_with', errorMessage_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('operations_every', operations_every)
          ..add('operations_some', operations_some)
          ..add('operations_none', operations_none)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in))
        .toString();
  }
}

class GScheduledReleaseManyWhereInputBuilder
    implements
        Builder<GScheduledReleaseManyWhereInput,
            GScheduledReleaseManyWhereInputBuilder> {
  _$GScheduledReleaseManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GScheduledReleaseWhereInput>? _AND;
  ListBuilder<GScheduledReleaseWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set AND(ListBuilder<GScheduledReleaseWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GScheduledReleaseWhereInput>? _OR;
  ListBuilder<GScheduledReleaseWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set OR(ListBuilder<GScheduledReleaseWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GScheduledReleaseWhereInput>? _NOT;
  ListBuilder<GScheduledReleaseWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set NOT(ListBuilder<GScheduledReleaseWhereInput>? NOT) => _$this._NOT = NOT;

  GDateTimeBuilder? _releaseAt;
  GDateTimeBuilder get releaseAt =>
      _$this._releaseAt ??= new GDateTimeBuilder();
  set releaseAt(GDateTimeBuilder? releaseAt) => _$this._releaseAt = releaseAt;

  GDateTimeBuilder? _releaseAt_not;
  GDateTimeBuilder get releaseAt_not =>
      _$this._releaseAt_not ??= new GDateTimeBuilder();
  set releaseAt_not(GDateTimeBuilder? releaseAt_not) =>
      _$this._releaseAt_not = releaseAt_not;

  ListBuilder<GDateTime?>? _releaseAt_in;
  ListBuilder<GDateTime?> get releaseAt_in =>
      _$this._releaseAt_in ??= new ListBuilder<GDateTime?>();
  set releaseAt_in(ListBuilder<GDateTime?>? releaseAt_in) =>
      _$this._releaseAt_in = releaseAt_in;

  ListBuilder<GDateTime?>? _releaseAt_not_in;
  ListBuilder<GDateTime?> get releaseAt_not_in =>
      _$this._releaseAt_not_in ??= new ListBuilder<GDateTime?>();
  set releaseAt_not_in(ListBuilder<GDateTime?>? releaseAt_not_in) =>
      _$this._releaseAt_not_in = releaseAt_not_in;

  GDateTimeBuilder? _releaseAt_lt;
  GDateTimeBuilder get releaseAt_lt =>
      _$this._releaseAt_lt ??= new GDateTimeBuilder();
  set releaseAt_lt(GDateTimeBuilder? releaseAt_lt) =>
      _$this._releaseAt_lt = releaseAt_lt;

  GDateTimeBuilder? _releaseAt_lte;
  GDateTimeBuilder get releaseAt_lte =>
      _$this._releaseAt_lte ??= new GDateTimeBuilder();
  set releaseAt_lte(GDateTimeBuilder? releaseAt_lte) =>
      _$this._releaseAt_lte = releaseAt_lte;

  GDateTimeBuilder? _releaseAt_gt;
  GDateTimeBuilder get releaseAt_gt =>
      _$this._releaseAt_gt ??= new GDateTimeBuilder();
  set releaseAt_gt(GDateTimeBuilder? releaseAt_gt) =>
      _$this._releaseAt_gt = releaseAt_gt;

  GDateTimeBuilder? _releaseAt_gte;
  GDateTimeBuilder get releaseAt_gte =>
      _$this._releaseAt_gte ??= new GDateTimeBuilder();
  set releaseAt_gte(GDateTimeBuilder? releaseAt_gte) =>
      _$this._releaseAt_gte = releaseAt_gte;

  bool? _isImplicit;
  bool? get isImplicit => _$this._isImplicit;
  set isImplicit(bool? isImplicit) => _$this._isImplicit = isImplicit;

  bool? _isImplicit_not;
  bool? get isImplicit_not => _$this._isImplicit_not;
  set isImplicit_not(bool? isImplicit_not) =>
      _$this._isImplicit_not = isImplicit_not;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _errorMessage_not;
  String? get errorMessage_not => _$this._errorMessage_not;
  set errorMessage_not(String? errorMessage_not) =>
      _$this._errorMessage_not = errorMessage_not;

  ListBuilder<String?>? _errorMessage_in;
  ListBuilder<String?> get errorMessage_in =>
      _$this._errorMessage_in ??= new ListBuilder<String?>();
  set errorMessage_in(ListBuilder<String?>? errorMessage_in) =>
      _$this._errorMessage_in = errorMessage_in;

  ListBuilder<String?>? _errorMessage_not_in;
  ListBuilder<String?> get errorMessage_not_in =>
      _$this._errorMessage_not_in ??= new ListBuilder<String?>();
  set errorMessage_not_in(ListBuilder<String?>? errorMessage_not_in) =>
      _$this._errorMessage_not_in = errorMessage_not_in;

  String? _errorMessage_contains;
  String? get errorMessage_contains => _$this._errorMessage_contains;
  set errorMessage_contains(String? errorMessage_contains) =>
      _$this._errorMessage_contains = errorMessage_contains;

  String? _errorMessage_not_contains;
  String? get errorMessage_not_contains => _$this._errorMessage_not_contains;
  set errorMessage_not_contains(String? errorMessage_not_contains) =>
      _$this._errorMessage_not_contains = errorMessage_not_contains;

  String? _errorMessage_starts_with;
  String? get errorMessage_starts_with => _$this._errorMessage_starts_with;
  set errorMessage_starts_with(String? errorMessage_starts_with) =>
      _$this._errorMessage_starts_with = errorMessage_starts_with;

  String? _errorMessage_not_starts_with;
  String? get errorMessage_not_starts_with =>
      _$this._errorMessage_not_starts_with;
  set errorMessage_not_starts_with(String? errorMessage_not_starts_with) =>
      _$this._errorMessage_not_starts_with = errorMessage_not_starts_with;

  String? _errorMessage_ends_with;
  String? get errorMessage_ends_with => _$this._errorMessage_ends_with;
  set errorMessage_ends_with(String? errorMessage_ends_with) =>
      _$this._errorMessage_ends_with = errorMessage_ends_with;

  String? _errorMessage_not_ends_with;
  String? get errorMessage_not_ends_with => _$this._errorMessage_not_ends_with;
  set errorMessage_not_ends_with(String? errorMessage_not_ends_with) =>
      _$this._errorMessage_not_ends_with = errorMessage_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String?>? _description_in;
  ListBuilder<String?> get description_in =>
      _$this._description_in ??= new ListBuilder<String?>();
  set description_in(ListBuilder<String?>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String?>? _description_not_in;
  ListBuilder<String?> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String?>();
  set description_not_in(ListBuilder<String?>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GScheduledOperationWhereInputBuilder? _operations_every;
  GScheduledOperationWhereInputBuilder get operations_every =>
      _$this._operations_every ??= new GScheduledOperationWhereInputBuilder();
  set operations_every(
          GScheduledOperationWhereInputBuilder? operations_every) =>
      _$this._operations_every = operations_every;

  GScheduledOperationWhereInputBuilder? _operations_some;
  GScheduledOperationWhereInputBuilder get operations_some =>
      _$this._operations_some ??= new GScheduledOperationWhereInputBuilder();
  set operations_some(GScheduledOperationWhereInputBuilder? operations_some) =>
      _$this._operations_some = operations_some;

  GScheduledOperationWhereInputBuilder? _operations_none;
  GScheduledOperationWhereInputBuilder get operations_none =>
      _$this._operations_none ??= new GScheduledOperationWhereInputBuilder();
  set operations_none(GScheduledOperationWhereInputBuilder? operations_none) =>
      _$this._operations_none = operations_none;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledReleaseStatus? _status;
  GScheduledReleaseStatus? get status => _$this._status;
  set status(GScheduledReleaseStatus? status) => _$this._status = status;

  GScheduledReleaseStatus? _status_not;
  GScheduledReleaseStatus? get status_not => _$this._status_not;
  set status_not(GScheduledReleaseStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GScheduledReleaseStatus?>? _status_in;
  ListBuilder<GScheduledReleaseStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GScheduledReleaseStatus?>();
  set status_in(ListBuilder<GScheduledReleaseStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GScheduledReleaseStatus?>? _status_not_in;
  ListBuilder<GScheduledReleaseStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GScheduledReleaseStatus?>();
  set status_not_in(ListBuilder<GScheduledReleaseStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GScheduledReleaseManyWhereInputBuilder();

  GScheduledReleaseManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _releaseAt = $v.releaseAt?.toBuilder();
      _releaseAt_not = $v.releaseAt_not?.toBuilder();
      _releaseAt_in = $v.releaseAt_in?.toBuilder();
      _releaseAt_not_in = $v.releaseAt_not_in?.toBuilder();
      _releaseAt_lt = $v.releaseAt_lt?.toBuilder();
      _releaseAt_lte = $v.releaseAt_lte?.toBuilder();
      _releaseAt_gt = $v.releaseAt_gt?.toBuilder();
      _releaseAt_gte = $v.releaseAt_gte?.toBuilder();
      _isImplicit = $v.isImplicit;
      _isImplicit_not = $v.isImplicit_not;
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _errorMessage = $v.errorMessage;
      _errorMessage_not = $v.errorMessage_not;
      _errorMessage_in = $v.errorMessage_in?.toBuilder();
      _errorMessage_not_in = $v.errorMessage_not_in?.toBuilder();
      _errorMessage_contains = $v.errorMessage_contains;
      _errorMessage_not_contains = $v.errorMessage_not_contains;
      _errorMessage_starts_with = $v.errorMessage_starts_with;
      _errorMessage_not_starts_with = $v.errorMessage_not_starts_with;
      _errorMessage_ends_with = $v.errorMessage_ends_with;
      _errorMessage_not_ends_with = $v.errorMessage_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _operations_every = $v.operations_every?.toBuilder();
      _operations_some = $v.operations_some?.toBuilder();
      _operations_none = $v.operations_none?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseManyWhereInput;
  }

  @override
  void update(void Function(GScheduledReleaseManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseManyWhereInput build() => _build();

  _$GScheduledReleaseManyWhereInput _build() {
    _$GScheduledReleaseManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              releaseAt: _releaseAt?.build(),
              releaseAt_not: _releaseAt_not?.build(),
              releaseAt_in: _releaseAt_in?.build(),
              releaseAt_not_in: _releaseAt_not_in?.build(),
              releaseAt_lt: _releaseAt_lt?.build(),
              releaseAt_lte: _releaseAt_lte?.build(),
              releaseAt_gt: _releaseAt_gt?.build(),
              releaseAt_gte: _releaseAt_gte?.build(),
              isImplicit: isImplicit,
              isImplicit_not: isImplicit_not,
              isActive: isActive,
              isActive_not: isActive_not,
              errorMessage: errorMessage,
              errorMessage_not: errorMessage_not,
              errorMessage_in: _errorMessage_in?.build(),
              errorMessage_not_in: _errorMessage_not_in?.build(),
              errorMessage_contains: errorMessage_contains,
              errorMessage_not_contains: errorMessage_not_contains,
              errorMessage_starts_with: errorMessage_starts_with,
              errorMessage_not_starts_with: errorMessage_not_starts_with,
              errorMessage_ends_with: errorMessage_ends_with,
              errorMessage_not_ends_with: errorMessage_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              operations_every: _operations_every?.build(),
              operations_some: _operations_some?.build(),
              operations_none: _operations_none?.build(),
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'releaseAt';
        _releaseAt?.build();
        _$failedField = 'releaseAt_not';
        _releaseAt_not?.build();
        _$failedField = 'releaseAt_in';
        _releaseAt_in?.build();
        _$failedField = 'releaseAt_not_in';
        _releaseAt_not_in?.build();
        _$failedField = 'releaseAt_lt';
        _releaseAt_lt?.build();
        _$failedField = 'releaseAt_lte';
        _releaseAt_lte?.build();
        _$failedField = 'releaseAt_gt';
        _releaseAt_gt?.build();
        _$failedField = 'releaseAt_gte';
        _releaseAt_gte?.build();

        _$failedField = 'errorMessage_in';
        _errorMessage_in?.build();
        _$failedField = 'errorMessage_not_in';
        _errorMessage_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'operations_every';
        _operations_every?.build();
        _$failedField = 'operations_some';
        _operations_some?.build();
        _$failedField = 'operations_none';
        _operations_none?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateInput extends GScheduledReleaseUpdateInput {
  @override
  final GDateTime? releaseAt;
  @override
  final bool? isActive;
  @override
  final String? errorMessage;
  @override
  final String? description;
  @override
  final String? title;

  factory _$GScheduledReleaseUpdateInput(
          [void Function(GScheduledReleaseUpdateInputBuilder)? updates]) =>
      (new GScheduledReleaseUpdateInputBuilder()..update(updates))._build();

  _$GScheduledReleaseUpdateInput._(
      {this.releaseAt,
      this.isActive,
      this.errorMessage,
      this.description,
      this.title})
      : super._();

  @override
  GScheduledReleaseUpdateInput rebuild(
          void Function(GScheduledReleaseUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateInput &&
        releaseAt == other.releaseAt &&
        isActive == other.isActive &&
        errorMessage == other.errorMessage &&
        description == other.description &&
        title == other.title;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, releaseAt.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseUpdateInput')
          ..add('releaseAt', releaseAt)
          ..add('isActive', isActive)
          ..add('errorMessage', errorMessage)
          ..add('description', description)
          ..add('title', title))
        .toString();
  }
}

class GScheduledReleaseUpdateInputBuilder
    implements
        Builder<GScheduledReleaseUpdateInput,
            GScheduledReleaseUpdateInputBuilder> {
  _$GScheduledReleaseUpdateInput? _$v;

  GDateTimeBuilder? _releaseAt;
  GDateTimeBuilder get releaseAt =>
      _$this._releaseAt ??= new GDateTimeBuilder();
  set releaseAt(GDateTimeBuilder? releaseAt) => _$this._releaseAt = releaseAt;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GScheduledReleaseUpdateInputBuilder();

  GScheduledReleaseUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _releaseAt = $v.releaseAt?.toBuilder();
      _isActive = $v.isActive;
      _errorMessage = $v.errorMessage;
      _description = $v.description;
      _title = $v.title;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateInput;
  }

  @override
  void update(void Function(GScheduledReleaseUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateInput build() => _build();

  _$GScheduledReleaseUpdateInput _build() {
    _$GScheduledReleaseUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateInput._(
              releaseAt: _releaseAt?.build(),
              isActive: isActive,
              errorMessage: errorMessage,
              description: description,
              title: title);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'releaseAt';
        _releaseAt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateManyInlineInput
    extends GScheduledReleaseUpdateManyInlineInput {
  @override
  final BuiltList<GScheduledReleaseCreateInput>? create;
  @override
  final BuiltList<GScheduledReleaseConnectInput>? connect;
  @override
  final BuiltList<GScheduledReleaseWhereUniqueInput>? set;
  @override
  final BuiltList<GScheduledReleaseUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GScheduledReleaseUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GScheduledReleaseWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GScheduledReleaseWhereUniqueInput>? delete;

  factory _$GScheduledReleaseUpdateManyInlineInput(
          [void Function(GScheduledReleaseUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GScheduledReleaseUpdateManyInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledReleaseUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GScheduledReleaseUpdateManyInlineInput rebuild(
          void Function(GScheduledReleaseUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateManyInlineInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GScheduledReleaseUpdateManyInlineInputBuilder
    implements
        Builder<GScheduledReleaseUpdateManyInlineInput,
            GScheduledReleaseUpdateManyInlineInputBuilder> {
  _$GScheduledReleaseUpdateManyInlineInput? _$v;

  ListBuilder<GScheduledReleaseCreateInput>? _create;
  ListBuilder<GScheduledReleaseCreateInput> get create =>
      _$this._create ??= new ListBuilder<GScheduledReleaseCreateInput>();
  set create(ListBuilder<GScheduledReleaseCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GScheduledReleaseConnectInput>? _connect;
  ListBuilder<GScheduledReleaseConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GScheduledReleaseConnectInput>();
  set connect(ListBuilder<GScheduledReleaseConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GScheduledReleaseWhereUniqueInput>? _set;
  ListBuilder<GScheduledReleaseWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GScheduledReleaseWhereUniqueInput>();
  set set(ListBuilder<GScheduledReleaseWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GScheduledReleaseUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GScheduledReleaseUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GScheduledReleaseUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GScheduledReleaseUpdateWithNestedWhereUniqueInput>?
              updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GScheduledReleaseUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GScheduledReleaseUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GScheduledReleaseUpsertWithNestedWhereUniqueInput>();
  set upsert(
          ListBuilder<GScheduledReleaseUpsertWithNestedWhereUniqueInput>?
              upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GScheduledReleaseWhereUniqueInput>? _disconnect;
  ListBuilder<GScheduledReleaseWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GScheduledReleaseWhereUniqueInput>();
  set disconnect(ListBuilder<GScheduledReleaseWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GScheduledReleaseWhereUniqueInput>? _delete;
  ListBuilder<GScheduledReleaseWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GScheduledReleaseWhereUniqueInput>();
  set delete(ListBuilder<GScheduledReleaseWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GScheduledReleaseUpdateManyInlineInputBuilder();

  GScheduledReleaseUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateManyInlineInput build() => _build();

  _$GScheduledReleaseUpdateManyInlineInput _build() {
    _$GScheduledReleaseUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateManyInput
    extends GScheduledReleaseUpdateManyInput {
  @override
  final GDateTime? releaseAt;
  @override
  final bool? isActive;
  @override
  final String? errorMessage;
  @override
  final String? description;
  @override
  final String? title;

  factory _$GScheduledReleaseUpdateManyInput(
          [void Function(GScheduledReleaseUpdateManyInputBuilder)? updates]) =>
      (new GScheduledReleaseUpdateManyInputBuilder()..update(updates))._build();

  _$GScheduledReleaseUpdateManyInput._(
      {this.releaseAt,
      this.isActive,
      this.errorMessage,
      this.description,
      this.title})
      : super._();

  @override
  GScheduledReleaseUpdateManyInput rebuild(
          void Function(GScheduledReleaseUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateManyInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateManyInput &&
        releaseAt == other.releaseAt &&
        isActive == other.isActive &&
        errorMessage == other.errorMessage &&
        description == other.description &&
        title == other.title;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, releaseAt.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseUpdateManyInput')
          ..add('releaseAt', releaseAt)
          ..add('isActive', isActive)
          ..add('errorMessage', errorMessage)
          ..add('description', description)
          ..add('title', title))
        .toString();
  }
}

class GScheduledReleaseUpdateManyInputBuilder
    implements
        Builder<GScheduledReleaseUpdateManyInput,
            GScheduledReleaseUpdateManyInputBuilder> {
  _$GScheduledReleaseUpdateManyInput? _$v;

  GDateTimeBuilder? _releaseAt;
  GDateTimeBuilder get releaseAt =>
      _$this._releaseAt ??= new GDateTimeBuilder();
  set releaseAt(GDateTimeBuilder? releaseAt) => _$this._releaseAt = releaseAt;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GScheduledReleaseUpdateManyInputBuilder();

  GScheduledReleaseUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _releaseAt = $v.releaseAt?.toBuilder();
      _isActive = $v.isActive;
      _errorMessage = $v.errorMessage;
      _description = $v.description;
      _title = $v.title;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateManyInput;
  }

  @override
  void update(void Function(GScheduledReleaseUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateManyInput build() => _build();

  _$GScheduledReleaseUpdateManyInput _build() {
    _$GScheduledReleaseUpdateManyInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateManyInput._(
              releaseAt: _releaseAt?.build(),
              isActive: isActive,
              errorMessage: errorMessage,
              description: description,
              title: title);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'releaseAt';
        _releaseAt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateManyInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateManyWithNestedWhereInput
    extends GScheduledReleaseUpdateManyWithNestedWhereInput {
  @override
  final GScheduledReleaseWhereInput where;
  @override
  final GScheduledReleaseUpdateManyInput data;

  factory _$GScheduledReleaseUpdateManyWithNestedWhereInput(
          [void Function(
                  GScheduledReleaseUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GScheduledReleaseUpdateManyWithNestedWhereInputBuilder()
            ..update(updates))
          ._build();

  _$GScheduledReleaseUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GScheduledReleaseUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GScheduledReleaseUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GScheduledReleaseUpdateManyWithNestedWhereInput rebuild(
          void Function(GScheduledReleaseUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateManyWithNestedWhereInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GScheduledReleaseUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GScheduledReleaseUpdateManyWithNestedWhereInput,
            GScheduledReleaseUpdateManyWithNestedWhereInputBuilder> {
  _$GScheduledReleaseUpdateManyWithNestedWhereInput? _$v;

  GScheduledReleaseWhereInputBuilder? _where;
  GScheduledReleaseWhereInputBuilder get where =>
      _$this._where ??= new GScheduledReleaseWhereInputBuilder();
  set where(GScheduledReleaseWhereInputBuilder? where) => _$this._where = where;

  GScheduledReleaseUpdateManyInputBuilder? _data;
  GScheduledReleaseUpdateManyInputBuilder get data =>
      _$this._data ??= new GScheduledReleaseUpdateManyInputBuilder();
  set data(GScheduledReleaseUpdateManyInputBuilder? data) =>
      _$this._data = data;

  GScheduledReleaseUpdateManyWithNestedWhereInputBuilder();

  GScheduledReleaseUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseUpdateManyWithNestedWhereInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateManyWithNestedWhereInput build() => _build();

  _$GScheduledReleaseUpdateManyWithNestedWhereInput _build() {
    _$GScheduledReleaseUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateOneInlineInput
    extends GScheduledReleaseUpdateOneInlineInput {
  @override
  final GScheduledReleaseCreateInput? create;
  @override
  final GScheduledReleaseUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GScheduledReleaseUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GScheduledReleaseWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GScheduledReleaseUpdateOneInlineInput(
          [void Function(GScheduledReleaseUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GScheduledReleaseUpdateOneInlineInputBuilder()..update(updates))
          ._build();

  _$GScheduledReleaseUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GScheduledReleaseUpdateOneInlineInput rebuild(
          void Function(GScheduledReleaseUpdateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateOneInlineInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jc(_$hash, upsert.hashCode);
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jc(_$hash, delete.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GScheduledReleaseUpdateOneInlineInputBuilder
    implements
        Builder<GScheduledReleaseUpdateOneInlineInput,
            GScheduledReleaseUpdateOneInlineInputBuilder> {
  _$GScheduledReleaseUpdateOneInlineInput? _$v;

  GScheduledReleaseCreateInputBuilder? _create;
  GScheduledReleaseCreateInputBuilder get create =>
      _$this._create ??= new GScheduledReleaseCreateInputBuilder();
  set create(GScheduledReleaseCreateInputBuilder? create) =>
      _$this._create = create;

  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(
          GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??=
          new GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(
          GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GScheduledReleaseWhereUniqueInputBuilder? _connect;
  GScheduledReleaseWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GScheduledReleaseWhereUniqueInputBuilder();
  set connect(GScheduledReleaseWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GScheduledReleaseUpdateOneInlineInputBuilder();

  GScheduledReleaseUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateOneInlineInput build() => _build();

  _$GScheduledReleaseUpdateOneInlineInput _build() {
    _$GScheduledReleaseUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpdateWithNestedWhereUniqueInput
    extends GScheduledReleaseUpdateWithNestedWhereUniqueInput {
  @override
  final GScheduledReleaseWhereUniqueInput where;
  @override
  final GScheduledReleaseUpdateInput data;

  factory _$GScheduledReleaseUpdateWithNestedWhereUniqueInput(
          [void Function(
                  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          ._build();

  _$GScheduledReleaseUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GScheduledReleaseUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GScheduledReleaseUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GScheduledReleaseUpdateWithNestedWhereUniqueInput rebuild(
          void Function(
                  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GScheduledReleaseUpdateWithNestedWhereUniqueInput,
            GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder> {
  _$GScheduledReleaseUpdateWithNestedWhereUniqueInput? _$v;

  GScheduledReleaseWhereUniqueInputBuilder? _where;
  GScheduledReleaseWhereUniqueInputBuilder get where =>
      _$this._where ??= new GScheduledReleaseWhereUniqueInputBuilder();
  set where(GScheduledReleaseWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GScheduledReleaseUpdateInputBuilder? _data;
  GScheduledReleaseUpdateInputBuilder get data =>
      _$this._data ??= new GScheduledReleaseUpdateInputBuilder();
  set data(GScheduledReleaseUpdateInputBuilder? data) => _$this._data = data;

  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder();

  GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpdateWithNestedWhereUniqueInput build() => _build();

  _$GScheduledReleaseUpdateWithNestedWhereUniqueInput _build() {
    _$GScheduledReleaseUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpsertInput extends GScheduledReleaseUpsertInput {
  @override
  final GScheduledReleaseCreateInput create;
  @override
  final GScheduledReleaseUpdateInput updateIt;

  factory _$GScheduledReleaseUpsertInput(
          [void Function(GScheduledReleaseUpsertInputBuilder)? updates]) =>
      (new GScheduledReleaseUpsertInputBuilder()..update(updates))._build();

  _$GScheduledReleaseUpsertInput._(
      {required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, r'GScheduledReleaseUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, r'GScheduledReleaseUpsertInput', 'updateIt');
  }

  @override
  GScheduledReleaseUpsertInput rebuild(
          void Function(GScheduledReleaseUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpsertInputBuilder toBuilder() =>
      new GScheduledReleaseUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, create.hashCode);
    _$hash = $jc(_$hash, updateIt.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GScheduledReleaseUpsertInputBuilder
    implements
        Builder<GScheduledReleaseUpsertInput,
            GScheduledReleaseUpsertInputBuilder> {
  _$GScheduledReleaseUpsertInput? _$v;

  GScheduledReleaseCreateInputBuilder? _create;
  GScheduledReleaseCreateInputBuilder get create =>
      _$this._create ??= new GScheduledReleaseCreateInputBuilder();
  set create(GScheduledReleaseCreateInputBuilder? create) =>
      _$this._create = create;

  GScheduledReleaseUpdateInputBuilder? _updateIt;
  GScheduledReleaseUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GScheduledReleaseUpdateInputBuilder();
  set updateIt(GScheduledReleaseUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GScheduledReleaseUpsertInputBuilder();

  GScheduledReleaseUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpsertInput;
  }

  @override
  void update(void Function(GScheduledReleaseUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpsertInput build() => _build();

  _$GScheduledReleaseUpsertInput _build() {
    _$GScheduledReleaseUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseUpsertWithNestedWhereUniqueInput
    extends GScheduledReleaseUpsertWithNestedWhereUniqueInput {
  @override
  final GScheduledReleaseWhereUniqueInput where;
  @override
  final GScheduledReleaseUpsertInput data;

  factory _$GScheduledReleaseUpsertWithNestedWhereUniqueInput(
          [void Function(
                  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          ._build();

  _$GScheduledReleaseUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'GScheduledReleaseUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, r'GScheduledReleaseUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GScheduledReleaseUpsertWithNestedWhereUniqueInput rebuild(
          void Function(
                  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, data.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'GScheduledReleaseUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GScheduledReleaseUpsertWithNestedWhereUniqueInput,
            GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder> {
  _$GScheduledReleaseUpsertWithNestedWhereUniqueInput? _$v;

  GScheduledReleaseWhereUniqueInputBuilder? _where;
  GScheduledReleaseWhereUniqueInputBuilder get where =>
      _$this._where ??= new GScheduledReleaseWhereUniqueInputBuilder();
  set where(GScheduledReleaseWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GScheduledReleaseUpsertInputBuilder? _data;
  GScheduledReleaseUpsertInputBuilder get data =>
      _$this._data ??= new GScheduledReleaseUpsertInputBuilder();
  set data(GScheduledReleaseUpsertInputBuilder? data) => _$this._data = data;

  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder();

  GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseUpsertWithNestedWhereUniqueInput build() => _build();

  _$GScheduledReleaseUpsertWithNestedWhereUniqueInput _build() {
    _$GScheduledReleaseUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseWhereInput extends GScheduledReleaseWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? AND;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? OR;
  @override
  final BuiltList<GScheduledReleaseWhereInput>? NOT;
  @override
  final GDateTime? releaseAt;
  @override
  final GDateTime? releaseAt_not;
  @override
  final BuiltList<GDateTime?>? releaseAt_in;
  @override
  final BuiltList<GDateTime?>? releaseAt_not_in;
  @override
  final GDateTime? releaseAt_lt;
  @override
  final GDateTime? releaseAt_lte;
  @override
  final GDateTime? releaseAt_gt;
  @override
  final GDateTime? releaseAt_gte;
  @override
  final bool? isImplicit;
  @override
  final bool? isImplicit_not;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final String? errorMessage;
  @override
  final String? errorMessage_not;
  @override
  final BuiltList<String?>? errorMessage_in;
  @override
  final BuiltList<String?>? errorMessage_not_in;
  @override
  final String? errorMessage_contains;
  @override
  final String? errorMessage_not_contains;
  @override
  final String? errorMessage_starts_with;
  @override
  final String? errorMessage_not_starts_with;
  @override
  final String? errorMessage_ends_with;
  @override
  final String? errorMessage_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String?>? description_in;
  @override
  final BuiltList<String?>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String?>? title_in;
  @override
  final BuiltList<String?>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GScheduledOperationWhereInput? operations_every;
  @override
  final GScheduledOperationWhereInput? operations_some;
  @override
  final GScheduledOperationWhereInput? operations_none;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GScheduledReleaseStatus? status;
  @override
  final GScheduledReleaseStatus? status_not;
  @override
  final BuiltList<GScheduledReleaseStatus?>? status_in;
  @override
  final BuiltList<GScheduledReleaseStatus?>? status_not_in;

  factory _$GScheduledReleaseWhereInput(
          [void Function(GScheduledReleaseWhereInputBuilder)? updates]) =>
      (new GScheduledReleaseWhereInputBuilder()..update(updates))._build();

  _$GScheduledReleaseWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.releaseAt,
      this.releaseAt_not,
      this.releaseAt_in,
      this.releaseAt_not_in,
      this.releaseAt_lt,
      this.releaseAt_lte,
      this.releaseAt_gt,
      this.releaseAt_gte,
      this.isImplicit,
      this.isImplicit_not,
      this.isActive,
      this.isActive_not,
      this.errorMessage,
      this.errorMessage_not,
      this.errorMessage_in,
      this.errorMessage_not_in,
      this.errorMessage_contains,
      this.errorMessage_not_contains,
      this.errorMessage_starts_with,
      this.errorMessage_not_starts_with,
      this.errorMessage_ends_with,
      this.errorMessage_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.operations_every,
      this.operations_some,
      this.operations_none,
      this.publishedBy,
      this.updatedBy,
      this.createdBy,
      this.status,
      this.status_not,
      this.status_in,
      this.status_not_in})
      : super._();

  @override
  GScheduledReleaseWhereInput rebuild(
          void Function(GScheduledReleaseWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseWhereInputBuilder toBuilder() =>
      new GScheduledReleaseWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        releaseAt == other.releaseAt &&
        releaseAt_not == other.releaseAt_not &&
        releaseAt_in == other.releaseAt_in &&
        releaseAt_not_in == other.releaseAt_not_in &&
        releaseAt_lt == other.releaseAt_lt &&
        releaseAt_lte == other.releaseAt_lte &&
        releaseAt_gt == other.releaseAt_gt &&
        releaseAt_gte == other.releaseAt_gte &&
        isImplicit == other.isImplicit &&
        isImplicit_not == other.isImplicit_not &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        errorMessage == other.errorMessage &&
        errorMessage_not == other.errorMessage_not &&
        errorMessage_in == other.errorMessage_in &&
        errorMessage_not_in == other.errorMessage_not_in &&
        errorMessage_contains == other.errorMessage_contains &&
        errorMessage_not_contains == other.errorMessage_not_contains &&
        errorMessage_starts_with == other.errorMessage_starts_with &&
        errorMessage_not_starts_with == other.errorMessage_not_starts_with &&
        errorMessage_ends_with == other.errorMessage_ends_with &&
        errorMessage_not_ends_with == other.errorMessage_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        operations_every == other.operations_every &&
        operations_some == other.operations_some &&
        operations_none == other.operations_none &&
        publishedBy == other.publishedBy &&
        updatedBy == other.updatedBy &&
        createdBy == other.createdBy &&
        status == other.status &&
        status_not == other.status_not &&
        status_in == other.status_in &&
        status_not_in == other.status_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, releaseAt.hashCode);
    _$hash = $jc(_$hash, releaseAt_not.hashCode);
    _$hash = $jc(_$hash, releaseAt_in.hashCode);
    _$hash = $jc(_$hash, releaseAt_not_in.hashCode);
    _$hash = $jc(_$hash, releaseAt_lt.hashCode);
    _$hash = $jc(_$hash, releaseAt_lte.hashCode);
    _$hash = $jc(_$hash, releaseAt_gt.hashCode);
    _$hash = $jc(_$hash, releaseAt_gte.hashCode);
    _$hash = $jc(_$hash, isImplicit.hashCode);
    _$hash = $jc(_$hash, isImplicit_not.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, isActive_not.hashCode);
    _$hash = $jc(_$hash, errorMessage.hashCode);
    _$hash = $jc(_$hash, errorMessage_not.hashCode);
    _$hash = $jc(_$hash, errorMessage_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_in.hashCode);
    _$hash = $jc(_$hash, errorMessage_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_contains.hashCode);
    _$hash = $jc(_$hash, errorMessage_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_starts_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_ends_with.hashCode);
    _$hash = $jc(_$hash, errorMessage_not_ends_with.hashCode);
    _$hash = $jc(_$hash, description.hashCode);
    _$hash = $jc(_$hash, description_not.hashCode);
    _$hash = $jc(_$hash, description_in.hashCode);
    _$hash = $jc(_$hash, description_not_in.hashCode);
    _$hash = $jc(_$hash, description_contains.hashCode);
    _$hash = $jc(_$hash, description_not_contains.hashCode);
    _$hash = $jc(_$hash, description_starts_with.hashCode);
    _$hash = $jc(_$hash, description_not_starts_with.hashCode);
    _$hash = $jc(_$hash, description_ends_with.hashCode);
    _$hash = $jc(_$hash, description_not_ends_with.hashCode);
    _$hash = $jc(_$hash, title.hashCode);
    _$hash = $jc(_$hash, title_not.hashCode);
    _$hash = $jc(_$hash, title_in.hashCode);
    _$hash = $jc(_$hash, title_not_in.hashCode);
    _$hash = $jc(_$hash, title_contains.hashCode);
    _$hash = $jc(_$hash, title_not_contains.hashCode);
    _$hash = $jc(_$hash, title_starts_with.hashCode);
    _$hash = $jc(_$hash, title_not_starts_with.hashCode);
    _$hash = $jc(_$hash, title_ends_with.hashCode);
    _$hash = $jc(_$hash, title_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, operations_every.hashCode);
    _$hash = $jc(_$hash, operations_some.hashCode);
    _$hash = $jc(_$hash, operations_none.hashCode);
    _$hash = $jc(_$hash, publishedBy.hashCode);
    _$hash = $jc(_$hash, updatedBy.hashCode);
    _$hash = $jc(_$hash, createdBy.hashCode);
    _$hash = $jc(_$hash, status.hashCode);
    _$hash = $jc(_$hash, status_not.hashCode);
    _$hash = $jc(_$hash, status_in.hashCode);
    _$hash = $jc(_$hash, status_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('releaseAt', releaseAt)
          ..add('releaseAt_not', releaseAt_not)
          ..add('releaseAt_in', releaseAt_in)
          ..add('releaseAt_not_in', releaseAt_not_in)
          ..add('releaseAt_lt', releaseAt_lt)
          ..add('releaseAt_lte', releaseAt_lte)
          ..add('releaseAt_gt', releaseAt_gt)
          ..add('releaseAt_gte', releaseAt_gte)
          ..add('isImplicit', isImplicit)
          ..add('isImplicit_not', isImplicit_not)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('errorMessage', errorMessage)
          ..add('errorMessage_not', errorMessage_not)
          ..add('errorMessage_in', errorMessage_in)
          ..add('errorMessage_not_in', errorMessage_not_in)
          ..add('errorMessage_contains', errorMessage_contains)
          ..add('errorMessage_not_contains', errorMessage_not_contains)
          ..add('errorMessage_starts_with', errorMessage_starts_with)
          ..add('errorMessage_not_starts_with', errorMessage_not_starts_with)
          ..add('errorMessage_ends_with', errorMessage_ends_with)
          ..add('errorMessage_not_ends_with', errorMessage_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('operations_every', operations_every)
          ..add('operations_some', operations_some)
          ..add('operations_none', operations_none)
          ..add('publishedBy', publishedBy)
          ..add('updatedBy', updatedBy)
          ..add('createdBy', createdBy)
          ..add('status', status)
          ..add('status_not', status_not)
          ..add('status_in', status_in)
          ..add('status_not_in', status_not_in))
        .toString();
  }
}

class GScheduledReleaseWhereInputBuilder
    implements
        Builder<GScheduledReleaseWhereInput,
            GScheduledReleaseWhereInputBuilder> {
  _$GScheduledReleaseWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GScheduledReleaseWhereInput>? _AND;
  ListBuilder<GScheduledReleaseWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set AND(ListBuilder<GScheduledReleaseWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GScheduledReleaseWhereInput>? _OR;
  ListBuilder<GScheduledReleaseWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set OR(ListBuilder<GScheduledReleaseWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GScheduledReleaseWhereInput>? _NOT;
  ListBuilder<GScheduledReleaseWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GScheduledReleaseWhereInput>();
  set NOT(ListBuilder<GScheduledReleaseWhereInput>? NOT) => _$this._NOT = NOT;

  GDateTimeBuilder? _releaseAt;
  GDateTimeBuilder get releaseAt =>
      _$this._releaseAt ??= new GDateTimeBuilder();
  set releaseAt(GDateTimeBuilder? releaseAt) => _$this._releaseAt = releaseAt;

  GDateTimeBuilder? _releaseAt_not;
  GDateTimeBuilder get releaseAt_not =>
      _$this._releaseAt_not ??= new GDateTimeBuilder();
  set releaseAt_not(GDateTimeBuilder? releaseAt_not) =>
      _$this._releaseAt_not = releaseAt_not;

  ListBuilder<GDateTime?>? _releaseAt_in;
  ListBuilder<GDateTime?> get releaseAt_in =>
      _$this._releaseAt_in ??= new ListBuilder<GDateTime?>();
  set releaseAt_in(ListBuilder<GDateTime?>? releaseAt_in) =>
      _$this._releaseAt_in = releaseAt_in;

  ListBuilder<GDateTime?>? _releaseAt_not_in;
  ListBuilder<GDateTime?> get releaseAt_not_in =>
      _$this._releaseAt_not_in ??= new ListBuilder<GDateTime?>();
  set releaseAt_not_in(ListBuilder<GDateTime?>? releaseAt_not_in) =>
      _$this._releaseAt_not_in = releaseAt_not_in;

  GDateTimeBuilder? _releaseAt_lt;
  GDateTimeBuilder get releaseAt_lt =>
      _$this._releaseAt_lt ??= new GDateTimeBuilder();
  set releaseAt_lt(GDateTimeBuilder? releaseAt_lt) =>
      _$this._releaseAt_lt = releaseAt_lt;

  GDateTimeBuilder? _releaseAt_lte;
  GDateTimeBuilder get releaseAt_lte =>
      _$this._releaseAt_lte ??= new GDateTimeBuilder();
  set releaseAt_lte(GDateTimeBuilder? releaseAt_lte) =>
      _$this._releaseAt_lte = releaseAt_lte;

  GDateTimeBuilder? _releaseAt_gt;
  GDateTimeBuilder get releaseAt_gt =>
      _$this._releaseAt_gt ??= new GDateTimeBuilder();
  set releaseAt_gt(GDateTimeBuilder? releaseAt_gt) =>
      _$this._releaseAt_gt = releaseAt_gt;

  GDateTimeBuilder? _releaseAt_gte;
  GDateTimeBuilder get releaseAt_gte =>
      _$this._releaseAt_gte ??= new GDateTimeBuilder();
  set releaseAt_gte(GDateTimeBuilder? releaseAt_gte) =>
      _$this._releaseAt_gte = releaseAt_gte;

  bool? _isImplicit;
  bool? get isImplicit => _$this._isImplicit;
  set isImplicit(bool? isImplicit) => _$this._isImplicit = isImplicit;

  bool? _isImplicit_not;
  bool? get isImplicit_not => _$this._isImplicit_not;
  set isImplicit_not(bool? isImplicit_not) =>
      _$this._isImplicit_not = isImplicit_not;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  String? _errorMessage;
  String? get errorMessage => _$this._errorMessage;
  set errorMessage(String? errorMessage) => _$this._errorMessage = errorMessage;

  String? _errorMessage_not;
  String? get errorMessage_not => _$this._errorMessage_not;
  set errorMessage_not(String? errorMessage_not) =>
      _$this._errorMessage_not = errorMessage_not;

  ListBuilder<String?>? _errorMessage_in;
  ListBuilder<String?> get errorMessage_in =>
      _$this._errorMessage_in ??= new ListBuilder<String?>();
  set errorMessage_in(ListBuilder<String?>? errorMessage_in) =>
      _$this._errorMessage_in = errorMessage_in;

  ListBuilder<String?>? _errorMessage_not_in;
  ListBuilder<String?> get errorMessage_not_in =>
      _$this._errorMessage_not_in ??= new ListBuilder<String?>();
  set errorMessage_not_in(ListBuilder<String?>? errorMessage_not_in) =>
      _$this._errorMessage_not_in = errorMessage_not_in;

  String? _errorMessage_contains;
  String? get errorMessage_contains => _$this._errorMessage_contains;
  set errorMessage_contains(String? errorMessage_contains) =>
      _$this._errorMessage_contains = errorMessage_contains;

  String? _errorMessage_not_contains;
  String? get errorMessage_not_contains => _$this._errorMessage_not_contains;
  set errorMessage_not_contains(String? errorMessage_not_contains) =>
      _$this._errorMessage_not_contains = errorMessage_not_contains;

  String? _errorMessage_starts_with;
  String? get errorMessage_starts_with => _$this._errorMessage_starts_with;
  set errorMessage_starts_with(String? errorMessage_starts_with) =>
      _$this._errorMessage_starts_with = errorMessage_starts_with;

  String? _errorMessage_not_starts_with;
  String? get errorMessage_not_starts_with =>
      _$this._errorMessage_not_starts_with;
  set errorMessage_not_starts_with(String? errorMessage_not_starts_with) =>
      _$this._errorMessage_not_starts_with = errorMessage_not_starts_with;

  String? _errorMessage_ends_with;
  String? get errorMessage_ends_with => _$this._errorMessage_ends_with;
  set errorMessage_ends_with(String? errorMessage_ends_with) =>
      _$this._errorMessage_ends_with = errorMessage_ends_with;

  String? _errorMessage_not_ends_with;
  String? get errorMessage_not_ends_with => _$this._errorMessage_not_ends_with;
  set errorMessage_not_ends_with(String? errorMessage_not_ends_with) =>
      _$this._errorMessage_not_ends_with = errorMessage_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String?>? _description_in;
  ListBuilder<String?> get description_in =>
      _$this._description_in ??= new ListBuilder<String?>();
  set description_in(ListBuilder<String?>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String?>? _description_not_in;
  ListBuilder<String?> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String?>();
  set description_not_in(ListBuilder<String?>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String?>? _title_in;
  ListBuilder<String?> get title_in =>
      _$this._title_in ??= new ListBuilder<String?>();
  set title_in(ListBuilder<String?>? title_in) => _$this._title_in = title_in;

  ListBuilder<String?>? _title_not_in;
  ListBuilder<String?> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String?>();
  set title_not_in(ListBuilder<String?>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GScheduledOperationWhereInputBuilder? _operations_every;
  GScheduledOperationWhereInputBuilder get operations_every =>
      _$this._operations_every ??= new GScheduledOperationWhereInputBuilder();
  set operations_every(
          GScheduledOperationWhereInputBuilder? operations_every) =>
      _$this._operations_every = operations_every;

  GScheduledOperationWhereInputBuilder? _operations_some;
  GScheduledOperationWhereInputBuilder get operations_some =>
      _$this._operations_some ??= new GScheduledOperationWhereInputBuilder();
  set operations_some(GScheduledOperationWhereInputBuilder? operations_some) =>
      _$this._operations_some = operations_some;

  GScheduledOperationWhereInputBuilder? _operations_none;
  GScheduledOperationWhereInputBuilder get operations_none =>
      _$this._operations_none ??= new GScheduledOperationWhereInputBuilder();
  set operations_none(GScheduledOperationWhereInputBuilder? operations_none) =>
      _$this._operations_none = operations_none;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GScheduledReleaseStatus? _status;
  GScheduledReleaseStatus? get status => _$this._status;
  set status(GScheduledReleaseStatus? status) => _$this._status = status;

  GScheduledReleaseStatus? _status_not;
  GScheduledReleaseStatus? get status_not => _$this._status_not;
  set status_not(GScheduledReleaseStatus? status_not) =>
      _$this._status_not = status_not;

  ListBuilder<GScheduledReleaseStatus?>? _status_in;
  ListBuilder<GScheduledReleaseStatus?> get status_in =>
      _$this._status_in ??= new ListBuilder<GScheduledReleaseStatus?>();
  set status_in(ListBuilder<GScheduledReleaseStatus?>? status_in) =>
      _$this._status_in = status_in;

  ListBuilder<GScheduledReleaseStatus?>? _status_not_in;
  ListBuilder<GScheduledReleaseStatus?> get status_not_in =>
      _$this._status_not_in ??= new ListBuilder<GScheduledReleaseStatus?>();
  set status_not_in(ListBuilder<GScheduledReleaseStatus?>? status_not_in) =>
      _$this._status_not_in = status_not_in;

  GScheduledReleaseWhereInputBuilder();

  GScheduledReleaseWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _releaseAt = $v.releaseAt?.toBuilder();
      _releaseAt_not = $v.releaseAt_not?.toBuilder();
      _releaseAt_in = $v.releaseAt_in?.toBuilder();
      _releaseAt_not_in = $v.releaseAt_not_in?.toBuilder();
      _releaseAt_lt = $v.releaseAt_lt?.toBuilder();
      _releaseAt_lte = $v.releaseAt_lte?.toBuilder();
      _releaseAt_gt = $v.releaseAt_gt?.toBuilder();
      _releaseAt_gte = $v.releaseAt_gte?.toBuilder();
      _isImplicit = $v.isImplicit;
      _isImplicit_not = $v.isImplicit_not;
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _errorMessage = $v.errorMessage;
      _errorMessage_not = $v.errorMessage_not;
      _errorMessage_in = $v.errorMessage_in?.toBuilder();
      _errorMessage_not_in = $v.errorMessage_not_in?.toBuilder();
      _errorMessage_contains = $v.errorMessage_contains;
      _errorMessage_not_contains = $v.errorMessage_not_contains;
      _errorMessage_starts_with = $v.errorMessage_starts_with;
      _errorMessage_not_starts_with = $v.errorMessage_not_starts_with;
      _errorMessage_ends_with = $v.errorMessage_ends_with;
      _errorMessage_not_ends_with = $v.errorMessage_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _operations_every = $v.operations_every?.toBuilder();
      _operations_some = $v.operations_some?.toBuilder();
      _operations_none = $v.operations_none?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _createdBy = $v.createdBy?.toBuilder();
      _status = $v.status;
      _status_not = $v.status_not;
      _status_in = $v.status_in?.toBuilder();
      _status_not_in = $v.status_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseWhereInput;
  }

  @override
  void update(void Function(GScheduledReleaseWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseWhereInput build() => _build();

  _$GScheduledReleaseWhereInput _build() {
    _$GScheduledReleaseWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GScheduledReleaseWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              releaseAt: _releaseAt?.build(),
              releaseAt_not: _releaseAt_not?.build(),
              releaseAt_in: _releaseAt_in?.build(),
              releaseAt_not_in: _releaseAt_not_in?.build(),
              releaseAt_lt: _releaseAt_lt?.build(),
              releaseAt_lte: _releaseAt_lte?.build(),
              releaseAt_gt: _releaseAt_gt?.build(),
              releaseAt_gte: _releaseAt_gte?.build(),
              isImplicit: isImplicit,
              isImplicit_not: isImplicit_not,
              isActive: isActive,
              isActive_not: isActive_not,
              errorMessage: errorMessage,
              errorMessage_not: errorMessage_not,
              errorMessage_in: _errorMessage_in?.build(),
              errorMessage_not_in: _errorMessage_not_in?.build(),
              errorMessage_contains: errorMessage_contains,
              errorMessage_not_contains: errorMessage_not_contains,
              errorMessage_starts_with: errorMessage_starts_with,
              errorMessage_not_starts_with: errorMessage_not_starts_with,
              errorMessage_ends_with: errorMessage_ends_with,
              errorMessage_not_ends_with: errorMessage_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              operations_every: _operations_every?.build(),
              operations_some: _operations_some?.build(),
              operations_none: _operations_none?.build(),
              publishedBy: _publishedBy?.build(),
              updatedBy: _updatedBy?.build(),
              createdBy: _createdBy?.build(),
              status: status,
              status_not: status_not,
              status_in: _status_in?.build(),
              status_not_in: _status_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'releaseAt';
        _releaseAt?.build();
        _$failedField = 'releaseAt_not';
        _releaseAt_not?.build();
        _$failedField = 'releaseAt_in';
        _releaseAt_in?.build();
        _$failedField = 'releaseAt_not_in';
        _releaseAt_not_in?.build();
        _$failedField = 'releaseAt_lt';
        _releaseAt_lt?.build();
        _$failedField = 'releaseAt_lte';
        _releaseAt_lte?.build();
        _$failedField = 'releaseAt_gt';
        _releaseAt_gt?.build();
        _$failedField = 'releaseAt_gte';
        _releaseAt_gte?.build();

        _$failedField = 'errorMessage_in';
        _errorMessage_in?.build();
        _$failedField = 'errorMessage_not_in';
        _errorMessage_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'operations_every';
        _operations_every?.build();
        _$failedField = 'operations_some';
        _operations_some?.build();
        _$failedField = 'operations_none';
        _operations_none?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'createdBy';
        _createdBy?.build();

        _$failedField = 'status_in';
        _status_in?.build();
        _$failedField = 'status_not_in';
        _status_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GScheduledReleaseWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GScheduledReleaseWhereUniqueInput
    extends GScheduledReleaseWhereUniqueInput {
  @override
  final String? id;

  factory _$GScheduledReleaseWhereUniqueInput(
          [void Function(GScheduledReleaseWhereUniqueInputBuilder)? updates]) =>
      (new GScheduledReleaseWhereUniqueInputBuilder()..update(updates))
          ._build();

  _$GScheduledReleaseWhereUniqueInput._({this.id}) : super._();

  @override
  GScheduledReleaseWhereUniqueInput rebuild(
          void Function(GScheduledReleaseWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GScheduledReleaseWhereUniqueInputBuilder toBuilder() =>
      new GScheduledReleaseWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GScheduledReleaseWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GScheduledReleaseWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GScheduledReleaseWhereUniqueInputBuilder
    implements
        Builder<GScheduledReleaseWhereUniqueInput,
            GScheduledReleaseWhereUniqueInputBuilder> {
  _$GScheduledReleaseWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GScheduledReleaseWhereUniqueInputBuilder();

  GScheduledReleaseWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GScheduledReleaseWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GScheduledReleaseWhereUniqueInput;
  }

  @override
  void update(
      void Function(GScheduledReleaseWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GScheduledReleaseWhereUniqueInput build() => _build();

  _$GScheduledReleaseWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GScheduledReleaseWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GUnpublishLocaleInput extends GUnpublishLocaleInput {
  @override
  final GLocale locale;
  @override
  final BuiltList<GStage> stages;

  factory _$GUnpublishLocaleInput(
          [void Function(GUnpublishLocaleInputBuilder)? updates]) =>
      (new GUnpublishLocaleInputBuilder()..update(updates))._build();

  _$GUnpublishLocaleInput._({required this.locale, required this.stages})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        locale, r'GUnpublishLocaleInput', 'locale');
    BuiltValueNullFieldError.checkNotNull(
        stages, r'GUnpublishLocaleInput', 'stages');
  }

  @override
  GUnpublishLocaleInput rebuild(
          void Function(GUnpublishLocaleInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUnpublishLocaleInputBuilder toBuilder() =>
      new GUnpublishLocaleInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUnpublishLocaleInput &&
        locale == other.locale &&
        stages == other.stages;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, locale.hashCode);
    _$hash = $jc(_$hash, stages.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUnpublishLocaleInput')
          ..add('locale', locale)
          ..add('stages', stages))
        .toString();
  }
}

class GUnpublishLocaleInputBuilder
    implements Builder<GUnpublishLocaleInput, GUnpublishLocaleInputBuilder> {
  _$GUnpublishLocaleInput? _$v;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  ListBuilder<GStage>? _stages;
  ListBuilder<GStage> get stages =>
      _$this._stages ??= new ListBuilder<GStage>();
  set stages(ListBuilder<GStage>? stages) => _$this._stages = stages;

  GUnpublishLocaleInputBuilder();

  GUnpublishLocaleInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _locale = $v.locale;
      _stages = $v.stages.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUnpublishLocaleInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUnpublishLocaleInput;
  }

  @override
  void update(void Function(GUnpublishLocaleInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUnpublishLocaleInput build() => _build();

  _$GUnpublishLocaleInput _build() {
    _$GUnpublishLocaleInput _$result;
    try {
      _$result = _$v ??
          new _$GUnpublishLocaleInput._(
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, r'GUnpublishLocaleInput', 'locale'),
              stages: stages.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'stages';
        stages.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUnpublishLocaleInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserConnectInput extends GUserConnectInput {
  @override
  final GUserWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GUserConnectInput(
          [void Function(GUserConnectInputBuilder)? updates]) =>
      (new GUserConnectInputBuilder()..update(updates))._build();

  _$GUserConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(where, r'GUserConnectInput', 'where');
  }

  @override
  GUserConnectInput rebuild(void Function(GUserConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserConnectInputBuilder toBuilder() =>
      new GUserConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, where.hashCode);
    _$hash = $jc(_$hash, position.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GUserConnectInputBuilder
    implements Builder<GUserConnectInput, GUserConnectInputBuilder> {
  _$GUserConnectInput? _$v;

  GUserWhereUniqueInputBuilder? _where;
  GUserWhereUniqueInputBuilder get where =>
      _$this._where ??= new GUserWhereUniqueInputBuilder();
  set where(GUserWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GUserConnectInputBuilder();

  GUserConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserConnectInput;
  }

  @override
  void update(void Function(GUserConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserConnectInput build() => _build();

  _$GUserConnectInput _build() {
    _$GUserConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GUserConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserCreateManyInlineInput extends GUserCreateManyInlineInput {
  @override
  final BuiltList<GUserWhereUniqueInput>? connect;

  factory _$GUserCreateManyInlineInput(
          [void Function(GUserCreateManyInlineInputBuilder)? updates]) =>
      (new GUserCreateManyInlineInputBuilder()..update(updates))._build();

  _$GUserCreateManyInlineInput._({this.connect}) : super._();

  @override
  GUserCreateManyInlineInput rebuild(
          void Function(GUserCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserCreateManyInlineInputBuilder toBuilder() =>
      new GUserCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserCreateManyInlineInput && connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserCreateManyInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GUserCreateManyInlineInputBuilder
    implements
        Builder<GUserCreateManyInlineInput, GUserCreateManyInlineInputBuilder> {
  _$GUserCreateManyInlineInput? _$v;

  ListBuilder<GUserWhereUniqueInput>? _connect;
  ListBuilder<GUserWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GUserWhereUniqueInput>();
  set connect(ListBuilder<GUserWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GUserCreateManyInlineInputBuilder();

  GUserCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserCreateManyInlineInput;
  }

  @override
  void update(void Function(GUserCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserCreateManyInlineInput build() => _build();

  _$GUserCreateManyInlineInput _build() {
    _$GUserCreateManyInlineInput _$result;
    try {
      _$result =
          _$v ?? new _$GUserCreateManyInlineInput._(connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserCreateOneInlineInput extends GUserCreateOneInlineInput {
  @override
  final GUserWhereUniqueInput? connect;

  factory _$GUserCreateOneInlineInput(
          [void Function(GUserCreateOneInlineInputBuilder)? updates]) =>
      (new GUserCreateOneInlineInputBuilder()..update(updates))._build();

  _$GUserCreateOneInlineInput._({this.connect}) : super._();

  @override
  GUserCreateOneInlineInput rebuild(
          void Function(GUserCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserCreateOneInlineInputBuilder toBuilder() =>
      new GUserCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserCreateOneInlineInput && connect == other.connect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserCreateOneInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GUserCreateOneInlineInputBuilder
    implements
        Builder<GUserCreateOneInlineInput, GUserCreateOneInlineInputBuilder> {
  _$GUserCreateOneInlineInput? _$v;

  GUserWhereUniqueInputBuilder? _connect;
  GUserWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GUserWhereUniqueInputBuilder();
  set connect(GUserWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GUserCreateOneInlineInputBuilder();

  GUserCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserCreateOneInlineInput;
  }

  @override
  void update(void Function(GUserCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserCreateOneInlineInput build() => _build();

  _$GUserCreateOneInlineInput _build() {
    _$GUserCreateOneInlineInput _$result;
    try {
      _$result =
          _$v ?? new _$GUserCreateOneInlineInput._(connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserManyWhereInput extends GUserManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GUserWhereInput>? AND;
  @override
  final BuiltList<GUserWhereInput>? OR;
  @override
  final BuiltList<GUserWhereInput>? NOT;
  @override
  final GUserWhereStageInput? documentInStages_every;
  @override
  final GUserWhereStageInput? documentInStages_some;
  @override
  final GUserWhereStageInput? documentInStages_none;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final String? picture;
  @override
  final String? picture_not;
  @override
  final BuiltList<String?>? picture_in;
  @override
  final BuiltList<String?>? picture_not_in;
  @override
  final String? picture_contains;
  @override
  final String? picture_not_contains;
  @override
  final String? picture_starts_with;
  @override
  final String? picture_not_starts_with;
  @override
  final String? picture_ends_with;
  @override
  final String? picture_not_ends_with;
  @override
  final String? name;
  @override
  final String? name_not;
  @override
  final BuiltList<String?>? name_in;
  @override
  final BuiltList<String?>? name_not_in;
  @override
  final String? name_contains;
  @override
  final String? name_not_contains;
  @override
  final String? name_starts_with;
  @override
  final String? name_not_starts_with;
  @override
  final String? name_ends_with;
  @override
  final String? name_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GUserKind? kind;
  @override
  final GUserKind? kind_not;
  @override
  final BuiltList<GUserKind?>? kind_in;
  @override
  final BuiltList<GUserKind?>? kind_not_in;

  factory _$GUserManyWhereInput(
          [void Function(GUserManyWhereInputBuilder)? updates]) =>
      (new GUserManyWhereInputBuilder()..update(updates))._build();

  _$GUserManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.isActive,
      this.isActive_not,
      this.picture,
      this.picture_not,
      this.picture_in,
      this.picture_not_in,
      this.picture_contains,
      this.picture_not_contains,
      this.picture_starts_with,
      this.picture_not_starts_with,
      this.picture_ends_with,
      this.picture_not_ends_with,
      this.name,
      this.name_not,
      this.name_in,
      this.name_not_in,
      this.name_contains,
      this.name_not_contains,
      this.name_starts_with,
      this.name_not_starts_with,
      this.name_ends_with,
      this.name_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.kind,
      this.kind_not,
      this.kind_in,
      this.kind_not_in})
      : super._();

  @override
  GUserManyWhereInput rebuild(
          void Function(GUserManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserManyWhereInputBuilder toBuilder() =>
      new GUserManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        picture == other.picture &&
        picture_not == other.picture_not &&
        picture_in == other.picture_in &&
        picture_not_in == other.picture_not_in &&
        picture_contains == other.picture_contains &&
        picture_not_contains == other.picture_not_contains &&
        picture_starts_with == other.picture_starts_with &&
        picture_not_starts_with == other.picture_not_starts_with &&
        picture_ends_with == other.picture_ends_with &&
        picture_not_ends_with == other.picture_not_ends_with &&
        name == other.name &&
        name_not == other.name_not &&
        name_in == other.name_in &&
        name_not_in == other.name_not_in &&
        name_contains == other.name_contains &&
        name_not_contains == other.name_not_contains &&
        name_starts_with == other.name_starts_with &&
        name_not_starts_with == other.name_not_starts_with &&
        name_ends_with == other.name_ends_with &&
        name_not_ends_with == other.name_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        kind == other.kind &&
        kind_not == other.kind_not &&
        kind_in == other.kind_in &&
        kind_not_in == other.kind_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, isActive_not.hashCode);
    _$hash = $jc(_$hash, picture.hashCode);
    _$hash = $jc(_$hash, picture_not.hashCode);
    _$hash = $jc(_$hash, picture_in.hashCode);
    _$hash = $jc(_$hash, picture_not_in.hashCode);
    _$hash = $jc(_$hash, picture_contains.hashCode);
    _$hash = $jc(_$hash, picture_not_contains.hashCode);
    _$hash = $jc(_$hash, picture_starts_with.hashCode);
    _$hash = $jc(_$hash, picture_not_starts_with.hashCode);
    _$hash = $jc(_$hash, picture_ends_with.hashCode);
    _$hash = $jc(_$hash, picture_not_ends_with.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, name_not.hashCode);
    _$hash = $jc(_$hash, name_in.hashCode);
    _$hash = $jc(_$hash, name_not_in.hashCode);
    _$hash = $jc(_$hash, name_contains.hashCode);
    _$hash = $jc(_$hash, name_not_contains.hashCode);
    _$hash = $jc(_$hash, name_starts_with.hashCode);
    _$hash = $jc(_$hash, name_not_starts_with.hashCode);
    _$hash = $jc(_$hash, name_ends_with.hashCode);
    _$hash = $jc(_$hash, name_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, kind.hashCode);
    _$hash = $jc(_$hash, kind_not.hashCode);
    _$hash = $jc(_$hash, kind_in.hashCode);
    _$hash = $jc(_$hash, kind_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('picture', picture)
          ..add('picture_not', picture_not)
          ..add('picture_in', picture_in)
          ..add('picture_not_in', picture_not_in)
          ..add('picture_contains', picture_contains)
          ..add('picture_not_contains', picture_not_contains)
          ..add('picture_starts_with', picture_starts_with)
          ..add('picture_not_starts_with', picture_not_starts_with)
          ..add('picture_ends_with', picture_ends_with)
          ..add('picture_not_ends_with', picture_not_ends_with)
          ..add('name', name)
          ..add('name_not', name_not)
          ..add('name_in', name_in)
          ..add('name_not_in', name_not_in)
          ..add('name_contains', name_contains)
          ..add('name_not_contains', name_not_contains)
          ..add('name_starts_with', name_starts_with)
          ..add('name_not_starts_with', name_not_starts_with)
          ..add('name_ends_with', name_ends_with)
          ..add('name_not_ends_with', name_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('kind', kind)
          ..add('kind_not', kind_not)
          ..add('kind_in', kind_in)
          ..add('kind_not_in', kind_not_in))
        .toString();
  }
}

class GUserManyWhereInputBuilder
    implements Builder<GUserManyWhereInput, GUserManyWhereInputBuilder> {
  _$GUserManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GUserWhereInput>? _AND;
  ListBuilder<GUserWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GUserWhereInput>();
  set AND(ListBuilder<GUserWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GUserWhereInput>? _OR;
  ListBuilder<GUserWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GUserWhereInput>();
  set OR(ListBuilder<GUserWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GUserWhereInput>? _NOT;
  ListBuilder<GUserWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GUserWhereInput>();
  set NOT(ListBuilder<GUserWhereInput>? NOT) => _$this._NOT = NOT;

  GUserWhereStageInputBuilder? _documentInStages_every;
  GUserWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GUserWhereStageInputBuilder();
  set documentInStages_every(
          GUserWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GUserWhereStageInputBuilder? _documentInStages_some;
  GUserWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GUserWhereStageInputBuilder();
  set documentInStages_some(
          GUserWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GUserWhereStageInputBuilder? _documentInStages_none;
  GUserWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GUserWhereStageInputBuilder();
  set documentInStages_none(
          GUserWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  String? _picture;
  String? get picture => _$this._picture;
  set picture(String? picture) => _$this._picture = picture;

  String? _picture_not;
  String? get picture_not => _$this._picture_not;
  set picture_not(String? picture_not) => _$this._picture_not = picture_not;

  ListBuilder<String?>? _picture_in;
  ListBuilder<String?> get picture_in =>
      _$this._picture_in ??= new ListBuilder<String?>();
  set picture_in(ListBuilder<String?>? picture_in) =>
      _$this._picture_in = picture_in;

  ListBuilder<String?>? _picture_not_in;
  ListBuilder<String?> get picture_not_in =>
      _$this._picture_not_in ??= new ListBuilder<String?>();
  set picture_not_in(ListBuilder<String?>? picture_not_in) =>
      _$this._picture_not_in = picture_not_in;

  String? _picture_contains;
  String? get picture_contains => _$this._picture_contains;
  set picture_contains(String? picture_contains) =>
      _$this._picture_contains = picture_contains;

  String? _picture_not_contains;
  String? get picture_not_contains => _$this._picture_not_contains;
  set picture_not_contains(String? picture_not_contains) =>
      _$this._picture_not_contains = picture_not_contains;

  String? _picture_starts_with;
  String? get picture_starts_with => _$this._picture_starts_with;
  set picture_starts_with(String? picture_starts_with) =>
      _$this._picture_starts_with = picture_starts_with;

  String? _picture_not_starts_with;
  String? get picture_not_starts_with => _$this._picture_not_starts_with;
  set picture_not_starts_with(String? picture_not_starts_with) =>
      _$this._picture_not_starts_with = picture_not_starts_with;

  String? _picture_ends_with;
  String? get picture_ends_with => _$this._picture_ends_with;
  set picture_ends_with(String? picture_ends_with) =>
      _$this._picture_ends_with = picture_ends_with;

  String? _picture_not_ends_with;
  String? get picture_not_ends_with => _$this._picture_not_ends_with;
  set picture_not_ends_with(String? picture_not_ends_with) =>
      _$this._picture_not_ends_with = picture_not_ends_with;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _name_not;
  String? get name_not => _$this._name_not;
  set name_not(String? name_not) => _$this._name_not = name_not;

  ListBuilder<String?>? _name_in;
  ListBuilder<String?> get name_in =>
      _$this._name_in ??= new ListBuilder<String?>();
  set name_in(ListBuilder<String?>? name_in) => _$this._name_in = name_in;

  ListBuilder<String?>? _name_not_in;
  ListBuilder<String?> get name_not_in =>
      _$this._name_not_in ??= new ListBuilder<String?>();
  set name_not_in(ListBuilder<String?>? name_not_in) =>
      _$this._name_not_in = name_not_in;

  String? _name_contains;
  String? get name_contains => _$this._name_contains;
  set name_contains(String? name_contains) =>
      _$this._name_contains = name_contains;

  String? _name_not_contains;
  String? get name_not_contains => _$this._name_not_contains;
  set name_not_contains(String? name_not_contains) =>
      _$this._name_not_contains = name_not_contains;

  String? _name_starts_with;
  String? get name_starts_with => _$this._name_starts_with;
  set name_starts_with(String? name_starts_with) =>
      _$this._name_starts_with = name_starts_with;

  String? _name_not_starts_with;
  String? get name_not_starts_with => _$this._name_not_starts_with;
  set name_not_starts_with(String? name_not_starts_with) =>
      _$this._name_not_starts_with = name_not_starts_with;

  String? _name_ends_with;
  String? get name_ends_with => _$this._name_ends_with;
  set name_ends_with(String? name_ends_with) =>
      _$this._name_ends_with = name_ends_with;

  String? _name_not_ends_with;
  String? get name_not_ends_with => _$this._name_not_ends_with;
  set name_not_ends_with(String? name_not_ends_with) =>
      _$this._name_not_ends_with = name_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GUserKind? _kind;
  GUserKind? get kind => _$this._kind;
  set kind(GUserKind? kind) => _$this._kind = kind;

  GUserKind? _kind_not;
  GUserKind? get kind_not => _$this._kind_not;
  set kind_not(GUserKind? kind_not) => _$this._kind_not = kind_not;

  ListBuilder<GUserKind?>? _kind_in;
  ListBuilder<GUserKind?> get kind_in =>
      _$this._kind_in ??= new ListBuilder<GUserKind?>();
  set kind_in(ListBuilder<GUserKind?>? kind_in) => _$this._kind_in = kind_in;

  ListBuilder<GUserKind?>? _kind_not_in;
  ListBuilder<GUserKind?> get kind_not_in =>
      _$this._kind_not_in ??= new ListBuilder<GUserKind?>();
  set kind_not_in(ListBuilder<GUserKind?>? kind_not_in) =>
      _$this._kind_not_in = kind_not_in;

  GUserManyWhereInputBuilder();

  GUserManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _picture = $v.picture;
      _picture_not = $v.picture_not;
      _picture_in = $v.picture_in?.toBuilder();
      _picture_not_in = $v.picture_not_in?.toBuilder();
      _picture_contains = $v.picture_contains;
      _picture_not_contains = $v.picture_not_contains;
      _picture_starts_with = $v.picture_starts_with;
      _picture_not_starts_with = $v.picture_not_starts_with;
      _picture_ends_with = $v.picture_ends_with;
      _picture_not_ends_with = $v.picture_not_ends_with;
      _name = $v.name;
      _name_not = $v.name_not;
      _name_in = $v.name_in?.toBuilder();
      _name_not_in = $v.name_not_in?.toBuilder();
      _name_contains = $v.name_contains;
      _name_not_contains = $v.name_not_contains;
      _name_starts_with = $v.name_starts_with;
      _name_not_starts_with = $v.name_not_starts_with;
      _name_ends_with = $v.name_ends_with;
      _name_not_ends_with = $v.name_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _kind = $v.kind;
      _kind_not = $v.kind_not;
      _kind_in = $v.kind_in?.toBuilder();
      _kind_not_in = $v.kind_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserManyWhereInput;
  }

  @override
  void update(void Function(GUserManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserManyWhereInput build() => _build();

  _$GUserManyWhereInput _build() {
    _$GUserManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GUserManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              isActive: isActive,
              isActive_not: isActive_not,
              picture: picture,
              picture_not: picture_not,
              picture_in: _picture_in?.build(),
              picture_not_in: _picture_not_in?.build(),
              picture_contains: picture_contains,
              picture_not_contains: picture_not_contains,
              picture_starts_with: picture_starts_with,
              picture_not_starts_with: picture_not_starts_with,
              picture_ends_with: picture_ends_with,
              picture_not_ends_with: picture_not_ends_with,
              name: name,
              name_not: name_not,
              name_in: _name_in?.build(),
              name_not_in: _name_not_in?.build(),
              name_contains: name_contains,
              name_not_contains: name_not_contains,
              name_starts_with: name_starts_with,
              name_not_starts_with: name_not_starts_with,
              name_ends_with: name_ends_with,
              name_not_ends_with: name_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              kind: kind,
              kind_not: kind_not,
              kind_in: _kind_in?.build(),
              kind_not_in: _kind_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();

        _$failedField = 'picture_in';
        _picture_in?.build();
        _$failedField = 'picture_not_in';
        _picture_not_in?.build();

        _$failedField = 'name_in';
        _name_in?.build();
        _$failedField = 'name_not_in';
        _name_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'kind_in';
        _kind_in?.build();
        _$failedField = 'kind_not_in';
        _kind_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserUpdateManyInlineInput extends GUserUpdateManyInlineInput {
  @override
  final BuiltList<GUserConnectInput>? connect;
  @override
  final BuiltList<GUserWhereUniqueInput>? set;
  @override
  final BuiltList<GUserWhereUniqueInput>? disconnect;

  factory _$GUserUpdateManyInlineInput(
          [void Function(GUserUpdateManyInlineInputBuilder)? updates]) =>
      (new GUserUpdateManyInlineInputBuilder()..update(updates))._build();

  _$GUserUpdateManyInlineInput._({this.connect, this.set, this.disconnect})
      : super._();

  @override
  GUserUpdateManyInlineInput rebuild(
          void Function(GUserUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserUpdateManyInlineInputBuilder toBuilder() =>
      new GUserUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserUpdateManyInlineInput &&
        connect == other.connect &&
        set == other.set &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, set.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserUpdateManyInlineInput')
          ..add('connect', connect)
          ..add('set', set)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GUserUpdateManyInlineInputBuilder
    implements
        Builder<GUserUpdateManyInlineInput, GUserUpdateManyInlineInputBuilder> {
  _$GUserUpdateManyInlineInput? _$v;

  ListBuilder<GUserConnectInput>? _connect;
  ListBuilder<GUserConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GUserConnectInput>();
  set connect(ListBuilder<GUserConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GUserWhereUniqueInput>? _set;
  ListBuilder<GUserWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GUserWhereUniqueInput>();
  set set(ListBuilder<GUserWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GUserWhereUniqueInput>? _disconnect;
  ListBuilder<GUserWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GUserWhereUniqueInput>();
  set disconnect(ListBuilder<GUserWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  GUserUpdateManyInlineInputBuilder();

  GUserUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserUpdateManyInlineInput;
  }

  @override
  void update(void Function(GUserUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserUpdateManyInlineInput build() => _build();

  _$GUserUpdateManyInlineInput _build() {
    _$GUserUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GUserUpdateManyInlineInput._(
              connect: _connect?.build(),
              set: _set?.build(),
              disconnect: _disconnect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserUpdateOneInlineInput extends GUserUpdateOneInlineInput {
  @override
  final GUserWhereUniqueInput? connect;
  @override
  final bool? disconnect;

  factory _$GUserUpdateOneInlineInput(
          [void Function(GUserUpdateOneInlineInputBuilder)? updates]) =>
      (new GUserUpdateOneInlineInputBuilder()..update(updates))._build();

  _$GUserUpdateOneInlineInput._({this.connect, this.disconnect}) : super._();

  @override
  GUserUpdateOneInlineInput rebuild(
          void Function(GUserUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserUpdateOneInlineInputBuilder toBuilder() =>
      new GUserUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserUpdateOneInlineInput &&
        connect == other.connect &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, connect.hashCode);
    _$hash = $jc(_$hash, disconnect.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserUpdateOneInlineInput')
          ..add('connect', connect)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GUserUpdateOneInlineInputBuilder
    implements
        Builder<GUserUpdateOneInlineInput, GUserUpdateOneInlineInputBuilder> {
  _$GUserUpdateOneInlineInput? _$v;

  GUserWhereUniqueInputBuilder? _connect;
  GUserWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GUserWhereUniqueInputBuilder();
  set connect(GUserWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  GUserUpdateOneInlineInputBuilder();

  GUserUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserUpdateOneInlineInput;
  }

  @override
  void update(void Function(GUserUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserUpdateOneInlineInput build() => _build();

  _$GUserUpdateOneInlineInput _build() {
    _$GUserUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GUserUpdateOneInlineInput._(
              connect: _connect?.build(), disconnect: disconnect);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereComparatorInput extends GUserWhereComparatorInput {
  @override
  final bool? outdated_to;

  factory _$GUserWhereComparatorInput(
          [void Function(GUserWhereComparatorInputBuilder)? updates]) =>
      (new GUserWhereComparatorInputBuilder()..update(updates))._build();

  _$GUserWhereComparatorInput._({this.outdated_to}) : super._();

  @override
  GUserWhereComparatorInput rebuild(
          void Function(GUserWhereComparatorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereComparatorInputBuilder toBuilder() =>
      new GUserWhereComparatorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereComparatorInput &&
        outdated_to == other.outdated_to;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, outdated_to.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserWhereComparatorInput')
          ..add('outdated_to', outdated_to))
        .toString();
  }
}

class GUserWhereComparatorInputBuilder
    implements
        Builder<GUserWhereComparatorInput, GUserWhereComparatorInputBuilder> {
  _$GUserWhereComparatorInput? _$v;

  bool? _outdated_to;
  bool? get outdated_to => _$this._outdated_to;
  set outdated_to(bool? outdated_to) => _$this._outdated_to = outdated_to;

  GUserWhereComparatorInputBuilder();

  GUserWhereComparatorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _outdated_to = $v.outdated_to;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereComparatorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereComparatorInput;
  }

  @override
  void update(void Function(GUserWhereComparatorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserWhereComparatorInput build() => _build();

  _$GUserWhereComparatorInput _build() {
    final _$result =
        _$v ?? new _$GUserWhereComparatorInput._(outdated_to: outdated_to);
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereInput extends GUserWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GUserWhereInput>? AND;
  @override
  final BuiltList<GUserWhereInput>? OR;
  @override
  final BuiltList<GUserWhereInput>? NOT;
  @override
  final GUserWhereStageInput? documentInStages_every;
  @override
  final GUserWhereStageInput? documentInStages_some;
  @override
  final GUserWhereStageInput? documentInStages_none;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final String? picture;
  @override
  final String? picture_not;
  @override
  final BuiltList<String?>? picture_in;
  @override
  final BuiltList<String?>? picture_not_in;
  @override
  final String? picture_contains;
  @override
  final String? picture_not_contains;
  @override
  final String? picture_starts_with;
  @override
  final String? picture_not_starts_with;
  @override
  final String? picture_ends_with;
  @override
  final String? picture_not_ends_with;
  @override
  final String? name;
  @override
  final String? name_not;
  @override
  final BuiltList<String?>? name_in;
  @override
  final BuiltList<String?>? name_not_in;
  @override
  final String? name_contains;
  @override
  final String? name_not_contains;
  @override
  final String? name_starts_with;
  @override
  final String? name_not_starts_with;
  @override
  final String? name_ends_with;
  @override
  final String? name_not_ends_with;
  @override
  final GDateTime? publishedAt;
  @override
  final GDateTime? publishedAt_not;
  @override
  final BuiltList<GDateTime?>? publishedAt_in;
  @override
  final BuiltList<GDateTime?>? publishedAt_not_in;
  @override
  final GDateTime? publishedAt_lt;
  @override
  final GDateTime? publishedAt_lte;
  @override
  final GDateTime? publishedAt_gt;
  @override
  final GDateTime? publishedAt_gte;
  @override
  final GDateTime? updatedAt;
  @override
  final GDateTime? updatedAt_not;
  @override
  final BuiltList<GDateTime?>? updatedAt_in;
  @override
  final BuiltList<GDateTime?>? updatedAt_not_in;
  @override
  final GDateTime? updatedAt_lt;
  @override
  final GDateTime? updatedAt_lte;
  @override
  final GDateTime? updatedAt_gt;
  @override
  final GDateTime? updatedAt_gte;
  @override
  final GDateTime? createdAt;
  @override
  final GDateTime? createdAt_not;
  @override
  final BuiltList<GDateTime?>? createdAt_in;
  @override
  final BuiltList<GDateTime?>? createdAt_not_in;
  @override
  final GDateTime? createdAt_lt;
  @override
  final GDateTime? createdAt_lte;
  @override
  final GDateTime? createdAt_gt;
  @override
  final GDateTime? createdAt_gte;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String?>? id_in;
  @override
  final BuiltList<String?>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final GUserKind? kind;
  @override
  final GUserKind? kind_not;
  @override
  final BuiltList<GUserKind?>? kind_in;
  @override
  final BuiltList<GUserKind?>? kind_not_in;

  factory _$GUserWhereInput([void Function(GUserWhereInputBuilder)? updates]) =>
      (new GUserWhereInputBuilder()..update(updates))._build();

  _$GUserWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.documentInStages_every,
      this.documentInStages_some,
      this.documentInStages_none,
      this.isActive,
      this.isActive_not,
      this.picture,
      this.picture_not,
      this.picture_in,
      this.picture_not_in,
      this.picture_contains,
      this.picture_not_contains,
      this.picture_starts_with,
      this.picture_not_starts_with,
      this.picture_ends_with,
      this.picture_not_ends_with,
      this.name,
      this.name_not,
      this.name_in,
      this.name_not_in,
      this.name_contains,
      this.name_not_contains,
      this.name_starts_with,
      this.name_not_starts_with,
      this.name_ends_with,
      this.name_not_ends_with,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.kind,
      this.kind_not,
      this.kind_in,
      this.kind_not_in})
      : super._();

  @override
  GUserWhereInput rebuild(void Function(GUserWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereInputBuilder toBuilder() =>
      new GUserWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        documentInStages_every == other.documentInStages_every &&
        documentInStages_some == other.documentInStages_some &&
        documentInStages_none == other.documentInStages_none &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        picture == other.picture &&
        picture_not == other.picture_not &&
        picture_in == other.picture_in &&
        picture_not_in == other.picture_not_in &&
        picture_contains == other.picture_contains &&
        picture_not_contains == other.picture_not_contains &&
        picture_starts_with == other.picture_starts_with &&
        picture_not_starts_with == other.picture_not_starts_with &&
        picture_ends_with == other.picture_ends_with &&
        picture_not_ends_with == other.picture_not_ends_with &&
        name == other.name &&
        name_not == other.name_not &&
        name_in == other.name_in &&
        name_not_in == other.name_not_in &&
        name_contains == other.name_contains &&
        name_not_contains == other.name_not_contains &&
        name_starts_with == other.name_starts_with &&
        name_not_starts_with == other.name_not_starts_with &&
        name_ends_with == other.name_ends_with &&
        name_not_ends_with == other.name_not_ends_with &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        kind == other.kind &&
        kind_not == other.kind_not &&
        kind_in == other.kind_in &&
        kind_not_in == other.kind_not_in;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, G_search.hashCode);
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, documentInStages_every.hashCode);
    _$hash = $jc(_$hash, documentInStages_some.hashCode);
    _$hash = $jc(_$hash, documentInStages_none.hashCode);
    _$hash = $jc(_$hash, isActive.hashCode);
    _$hash = $jc(_$hash, isActive_not.hashCode);
    _$hash = $jc(_$hash, picture.hashCode);
    _$hash = $jc(_$hash, picture_not.hashCode);
    _$hash = $jc(_$hash, picture_in.hashCode);
    _$hash = $jc(_$hash, picture_not_in.hashCode);
    _$hash = $jc(_$hash, picture_contains.hashCode);
    _$hash = $jc(_$hash, picture_not_contains.hashCode);
    _$hash = $jc(_$hash, picture_starts_with.hashCode);
    _$hash = $jc(_$hash, picture_not_starts_with.hashCode);
    _$hash = $jc(_$hash, picture_ends_with.hashCode);
    _$hash = $jc(_$hash, picture_not_ends_with.hashCode);
    _$hash = $jc(_$hash, name.hashCode);
    _$hash = $jc(_$hash, name_not.hashCode);
    _$hash = $jc(_$hash, name_in.hashCode);
    _$hash = $jc(_$hash, name_not_in.hashCode);
    _$hash = $jc(_$hash, name_contains.hashCode);
    _$hash = $jc(_$hash, name_not_contains.hashCode);
    _$hash = $jc(_$hash, name_starts_with.hashCode);
    _$hash = $jc(_$hash, name_not_starts_with.hashCode);
    _$hash = $jc(_$hash, name_ends_with.hashCode);
    _$hash = $jc(_$hash, name_not_ends_with.hashCode);
    _$hash = $jc(_$hash, publishedAt.hashCode);
    _$hash = $jc(_$hash, publishedAt_not.hashCode);
    _$hash = $jc(_$hash, publishedAt_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_not_in.hashCode);
    _$hash = $jc(_$hash, publishedAt_lt.hashCode);
    _$hash = $jc(_$hash, publishedAt_lte.hashCode);
    _$hash = $jc(_$hash, publishedAt_gt.hashCode);
    _$hash = $jc(_$hash, publishedAt_gte.hashCode);
    _$hash = $jc(_$hash, updatedAt.hashCode);
    _$hash = $jc(_$hash, updatedAt_not.hashCode);
    _$hash = $jc(_$hash, updatedAt_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_not_in.hashCode);
    _$hash = $jc(_$hash, updatedAt_lt.hashCode);
    _$hash = $jc(_$hash, updatedAt_lte.hashCode);
    _$hash = $jc(_$hash, updatedAt_gt.hashCode);
    _$hash = $jc(_$hash, updatedAt_gte.hashCode);
    _$hash = $jc(_$hash, createdAt.hashCode);
    _$hash = $jc(_$hash, createdAt_not.hashCode);
    _$hash = $jc(_$hash, createdAt_in.hashCode);
    _$hash = $jc(_$hash, createdAt_not_in.hashCode);
    _$hash = $jc(_$hash, createdAt_lt.hashCode);
    _$hash = $jc(_$hash, createdAt_lte.hashCode);
    _$hash = $jc(_$hash, createdAt_gt.hashCode);
    _$hash = $jc(_$hash, createdAt_gte.hashCode);
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, id_not.hashCode);
    _$hash = $jc(_$hash, id_in.hashCode);
    _$hash = $jc(_$hash, id_not_in.hashCode);
    _$hash = $jc(_$hash, id_contains.hashCode);
    _$hash = $jc(_$hash, id_not_contains.hashCode);
    _$hash = $jc(_$hash, id_starts_with.hashCode);
    _$hash = $jc(_$hash, id_not_starts_with.hashCode);
    _$hash = $jc(_$hash, id_ends_with.hashCode);
    _$hash = $jc(_$hash, id_not_ends_with.hashCode);
    _$hash = $jc(_$hash, kind.hashCode);
    _$hash = $jc(_$hash, kind_not.hashCode);
    _$hash = $jc(_$hash, kind_in.hashCode);
    _$hash = $jc(_$hash, kind_not_in.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('documentInStages_every', documentInStages_every)
          ..add('documentInStages_some', documentInStages_some)
          ..add('documentInStages_none', documentInStages_none)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('picture', picture)
          ..add('picture_not', picture_not)
          ..add('picture_in', picture_in)
          ..add('picture_not_in', picture_not_in)
          ..add('picture_contains', picture_contains)
          ..add('picture_not_contains', picture_not_contains)
          ..add('picture_starts_with', picture_starts_with)
          ..add('picture_not_starts_with', picture_not_starts_with)
          ..add('picture_ends_with', picture_ends_with)
          ..add('picture_not_ends_with', picture_not_ends_with)
          ..add('name', name)
          ..add('name_not', name_not)
          ..add('name_in', name_in)
          ..add('name_not_in', name_not_in)
          ..add('name_contains', name_contains)
          ..add('name_not_contains', name_not_contains)
          ..add('name_starts_with', name_starts_with)
          ..add('name_not_starts_with', name_not_starts_with)
          ..add('name_ends_with', name_ends_with)
          ..add('name_not_ends_with', name_not_ends_with)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('kind', kind)
          ..add('kind_not', kind_not)
          ..add('kind_in', kind_in)
          ..add('kind_not_in', kind_not_in))
        .toString();
  }
}

class GUserWhereInputBuilder
    implements Builder<GUserWhereInput, GUserWhereInputBuilder> {
  _$GUserWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GUserWhereInput>? _AND;
  ListBuilder<GUserWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GUserWhereInput>();
  set AND(ListBuilder<GUserWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GUserWhereInput>? _OR;
  ListBuilder<GUserWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GUserWhereInput>();
  set OR(ListBuilder<GUserWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GUserWhereInput>? _NOT;
  ListBuilder<GUserWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GUserWhereInput>();
  set NOT(ListBuilder<GUserWhereInput>? NOT) => _$this._NOT = NOT;

  GUserWhereStageInputBuilder? _documentInStages_every;
  GUserWhereStageInputBuilder get documentInStages_every =>
      _$this._documentInStages_every ??= new GUserWhereStageInputBuilder();
  set documentInStages_every(
          GUserWhereStageInputBuilder? documentInStages_every) =>
      _$this._documentInStages_every = documentInStages_every;

  GUserWhereStageInputBuilder? _documentInStages_some;
  GUserWhereStageInputBuilder get documentInStages_some =>
      _$this._documentInStages_some ??= new GUserWhereStageInputBuilder();
  set documentInStages_some(
          GUserWhereStageInputBuilder? documentInStages_some) =>
      _$this._documentInStages_some = documentInStages_some;

  GUserWhereStageInputBuilder? _documentInStages_none;
  GUserWhereStageInputBuilder get documentInStages_none =>
      _$this._documentInStages_none ??= new GUserWhereStageInputBuilder();
  set documentInStages_none(
          GUserWhereStageInputBuilder? documentInStages_none) =>
      _$this._documentInStages_none = documentInStages_none;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  String? _picture;
  String? get picture => _$this._picture;
  set picture(String? picture) => _$this._picture = picture;

  String? _picture_not;
  String? get picture_not => _$this._picture_not;
  set picture_not(String? picture_not) => _$this._picture_not = picture_not;

  ListBuilder<String?>? _picture_in;
  ListBuilder<String?> get picture_in =>
      _$this._picture_in ??= new ListBuilder<String?>();
  set picture_in(ListBuilder<String?>? picture_in) =>
      _$this._picture_in = picture_in;

  ListBuilder<String?>? _picture_not_in;
  ListBuilder<String?> get picture_not_in =>
      _$this._picture_not_in ??= new ListBuilder<String?>();
  set picture_not_in(ListBuilder<String?>? picture_not_in) =>
      _$this._picture_not_in = picture_not_in;

  String? _picture_contains;
  String? get picture_contains => _$this._picture_contains;
  set picture_contains(String? picture_contains) =>
      _$this._picture_contains = picture_contains;

  String? _picture_not_contains;
  String? get picture_not_contains => _$this._picture_not_contains;
  set picture_not_contains(String? picture_not_contains) =>
      _$this._picture_not_contains = picture_not_contains;

  String? _picture_starts_with;
  String? get picture_starts_with => _$this._picture_starts_with;
  set picture_starts_with(String? picture_starts_with) =>
      _$this._picture_starts_with = picture_starts_with;

  String? _picture_not_starts_with;
  String? get picture_not_starts_with => _$this._picture_not_starts_with;
  set picture_not_starts_with(String? picture_not_starts_with) =>
      _$this._picture_not_starts_with = picture_not_starts_with;

  String? _picture_ends_with;
  String? get picture_ends_with => _$this._picture_ends_with;
  set picture_ends_with(String? picture_ends_with) =>
      _$this._picture_ends_with = picture_ends_with;

  String? _picture_not_ends_with;
  String? get picture_not_ends_with => _$this._picture_not_ends_with;
  set picture_not_ends_with(String? picture_not_ends_with) =>
      _$this._picture_not_ends_with = picture_not_ends_with;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _name_not;
  String? get name_not => _$this._name_not;
  set name_not(String? name_not) => _$this._name_not = name_not;

  ListBuilder<String?>? _name_in;
  ListBuilder<String?> get name_in =>
      _$this._name_in ??= new ListBuilder<String?>();
  set name_in(ListBuilder<String?>? name_in) => _$this._name_in = name_in;

  ListBuilder<String?>? _name_not_in;
  ListBuilder<String?> get name_not_in =>
      _$this._name_not_in ??= new ListBuilder<String?>();
  set name_not_in(ListBuilder<String?>? name_not_in) =>
      _$this._name_not_in = name_not_in;

  String? _name_contains;
  String? get name_contains => _$this._name_contains;
  set name_contains(String? name_contains) =>
      _$this._name_contains = name_contains;

  String? _name_not_contains;
  String? get name_not_contains => _$this._name_not_contains;
  set name_not_contains(String? name_not_contains) =>
      _$this._name_not_contains = name_not_contains;

  String? _name_starts_with;
  String? get name_starts_with => _$this._name_starts_with;
  set name_starts_with(String? name_starts_with) =>
      _$this._name_starts_with = name_starts_with;

  String? _name_not_starts_with;
  String? get name_not_starts_with => _$this._name_not_starts_with;
  set name_not_starts_with(String? name_not_starts_with) =>
      _$this._name_not_starts_with = name_not_starts_with;

  String? _name_ends_with;
  String? get name_ends_with => _$this._name_ends_with;
  set name_ends_with(String? name_ends_with) =>
      _$this._name_ends_with = name_ends_with;

  String? _name_not_ends_with;
  String? get name_not_ends_with => _$this._name_not_ends_with;
  set name_not_ends_with(String? name_not_ends_with) =>
      _$this._name_not_ends_with = name_not_ends_with;

  GDateTimeBuilder? _publishedAt;
  GDateTimeBuilder get publishedAt =>
      _$this._publishedAt ??= new GDateTimeBuilder();
  set publishedAt(GDateTimeBuilder? publishedAt) =>
      _$this._publishedAt = publishedAt;

  GDateTimeBuilder? _publishedAt_not;
  GDateTimeBuilder get publishedAt_not =>
      _$this._publishedAt_not ??= new GDateTimeBuilder();
  set publishedAt_not(GDateTimeBuilder? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<GDateTime?>? _publishedAt_in;
  ListBuilder<GDateTime?> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_in(ListBuilder<GDateTime?>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<GDateTime?>? _publishedAt_not_in;
  ListBuilder<GDateTime?> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<GDateTime?>();
  set publishedAt_not_in(ListBuilder<GDateTime?>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  GDateTimeBuilder? _publishedAt_lt;
  GDateTimeBuilder get publishedAt_lt =>
      _$this._publishedAt_lt ??= new GDateTimeBuilder();
  set publishedAt_lt(GDateTimeBuilder? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  GDateTimeBuilder? _publishedAt_lte;
  GDateTimeBuilder get publishedAt_lte =>
      _$this._publishedAt_lte ??= new GDateTimeBuilder();
  set publishedAt_lte(GDateTimeBuilder? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  GDateTimeBuilder? _publishedAt_gt;
  GDateTimeBuilder get publishedAt_gt =>
      _$this._publishedAt_gt ??= new GDateTimeBuilder();
  set publishedAt_gt(GDateTimeBuilder? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  GDateTimeBuilder? _publishedAt_gte;
  GDateTimeBuilder get publishedAt_gte =>
      _$this._publishedAt_gte ??= new GDateTimeBuilder();
  set publishedAt_gte(GDateTimeBuilder? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GDateTimeBuilder? _updatedAt;
  GDateTimeBuilder get updatedAt =>
      _$this._updatedAt ??= new GDateTimeBuilder();
  set updatedAt(GDateTimeBuilder? updatedAt) => _$this._updatedAt = updatedAt;

  GDateTimeBuilder? _updatedAt_not;
  GDateTimeBuilder get updatedAt_not =>
      _$this._updatedAt_not ??= new GDateTimeBuilder();
  set updatedAt_not(GDateTimeBuilder? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<GDateTime?>? _updatedAt_in;
  ListBuilder<GDateTime?> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_in(ListBuilder<GDateTime?>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<GDateTime?>? _updatedAt_not_in;
  ListBuilder<GDateTime?> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<GDateTime?>();
  set updatedAt_not_in(ListBuilder<GDateTime?>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  GDateTimeBuilder? _updatedAt_lt;
  GDateTimeBuilder get updatedAt_lt =>
      _$this._updatedAt_lt ??= new GDateTimeBuilder();
  set updatedAt_lt(GDateTimeBuilder? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  GDateTimeBuilder? _updatedAt_lte;
  GDateTimeBuilder get updatedAt_lte =>
      _$this._updatedAt_lte ??= new GDateTimeBuilder();
  set updatedAt_lte(GDateTimeBuilder? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  GDateTimeBuilder? _updatedAt_gt;
  GDateTimeBuilder get updatedAt_gt =>
      _$this._updatedAt_gt ??= new GDateTimeBuilder();
  set updatedAt_gt(GDateTimeBuilder? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  GDateTimeBuilder? _updatedAt_gte;
  GDateTimeBuilder get updatedAt_gte =>
      _$this._updatedAt_gte ??= new GDateTimeBuilder();
  set updatedAt_gte(GDateTimeBuilder? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  GDateTimeBuilder? _createdAt;
  GDateTimeBuilder get createdAt =>
      _$this._createdAt ??= new GDateTimeBuilder();
  set createdAt(GDateTimeBuilder? createdAt) => _$this._createdAt = createdAt;

  GDateTimeBuilder? _createdAt_not;
  GDateTimeBuilder get createdAt_not =>
      _$this._createdAt_not ??= new GDateTimeBuilder();
  set createdAt_not(GDateTimeBuilder? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<GDateTime?>? _createdAt_in;
  ListBuilder<GDateTime?> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<GDateTime?>();
  set createdAt_in(ListBuilder<GDateTime?>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<GDateTime?>? _createdAt_not_in;
  ListBuilder<GDateTime?> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<GDateTime?>();
  set createdAt_not_in(ListBuilder<GDateTime?>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  GDateTimeBuilder? _createdAt_lt;
  GDateTimeBuilder get createdAt_lt =>
      _$this._createdAt_lt ??= new GDateTimeBuilder();
  set createdAt_lt(GDateTimeBuilder? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  GDateTimeBuilder? _createdAt_lte;
  GDateTimeBuilder get createdAt_lte =>
      _$this._createdAt_lte ??= new GDateTimeBuilder();
  set createdAt_lte(GDateTimeBuilder? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  GDateTimeBuilder? _createdAt_gt;
  GDateTimeBuilder get createdAt_gt =>
      _$this._createdAt_gt ??= new GDateTimeBuilder();
  set createdAt_gt(GDateTimeBuilder? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  GDateTimeBuilder? _createdAt_gte;
  GDateTimeBuilder get createdAt_gte =>
      _$this._createdAt_gte ??= new GDateTimeBuilder();
  set createdAt_gte(GDateTimeBuilder? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String?>? _id_in;
  ListBuilder<String?> get id_in =>
      _$this._id_in ??= new ListBuilder<String?>();
  set id_in(ListBuilder<String?>? id_in) => _$this._id_in = id_in;

  ListBuilder<String?>? _id_not_in;
  ListBuilder<String?> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String?>();
  set id_not_in(ListBuilder<String?>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  GUserKind? _kind;
  GUserKind? get kind => _$this._kind;
  set kind(GUserKind? kind) => _$this._kind = kind;

  GUserKind? _kind_not;
  GUserKind? get kind_not => _$this._kind_not;
  set kind_not(GUserKind? kind_not) => _$this._kind_not = kind_not;

  ListBuilder<GUserKind?>? _kind_in;
  ListBuilder<GUserKind?> get kind_in =>
      _$this._kind_in ??= new ListBuilder<GUserKind?>();
  set kind_in(ListBuilder<GUserKind?>? kind_in) => _$this._kind_in = kind_in;

  ListBuilder<GUserKind?>? _kind_not_in;
  ListBuilder<GUserKind?> get kind_not_in =>
      _$this._kind_not_in ??= new ListBuilder<GUserKind?>();
  set kind_not_in(ListBuilder<GUserKind?>? kind_not_in) =>
      _$this._kind_not_in = kind_not_in;

  GUserWhereInputBuilder();

  GUserWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _documentInStages_every = $v.documentInStages_every?.toBuilder();
      _documentInStages_some = $v.documentInStages_some?.toBuilder();
      _documentInStages_none = $v.documentInStages_none?.toBuilder();
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _picture = $v.picture;
      _picture_not = $v.picture_not;
      _picture_in = $v.picture_in?.toBuilder();
      _picture_not_in = $v.picture_not_in?.toBuilder();
      _picture_contains = $v.picture_contains;
      _picture_not_contains = $v.picture_not_contains;
      _picture_starts_with = $v.picture_starts_with;
      _picture_not_starts_with = $v.picture_not_starts_with;
      _picture_ends_with = $v.picture_ends_with;
      _picture_not_ends_with = $v.picture_not_ends_with;
      _name = $v.name;
      _name_not = $v.name_not;
      _name_in = $v.name_in?.toBuilder();
      _name_not_in = $v.name_not_in?.toBuilder();
      _name_contains = $v.name_contains;
      _name_not_contains = $v.name_not_contains;
      _name_starts_with = $v.name_starts_with;
      _name_not_starts_with = $v.name_not_starts_with;
      _name_ends_with = $v.name_ends_with;
      _name_not_ends_with = $v.name_not_ends_with;
      _publishedAt = $v.publishedAt?.toBuilder();
      _publishedAt_not = $v.publishedAt_not?.toBuilder();
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt?.toBuilder();
      _publishedAt_lte = $v.publishedAt_lte?.toBuilder();
      _publishedAt_gt = $v.publishedAt_gt?.toBuilder();
      _publishedAt_gte = $v.publishedAt_gte?.toBuilder();
      _updatedAt = $v.updatedAt?.toBuilder();
      _updatedAt_not = $v.updatedAt_not?.toBuilder();
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt?.toBuilder();
      _updatedAt_lte = $v.updatedAt_lte?.toBuilder();
      _updatedAt_gt = $v.updatedAt_gt?.toBuilder();
      _updatedAt_gte = $v.updatedAt_gte?.toBuilder();
      _createdAt = $v.createdAt?.toBuilder();
      _createdAt_not = $v.createdAt_not?.toBuilder();
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt?.toBuilder();
      _createdAt_lte = $v.createdAt_lte?.toBuilder();
      _createdAt_gt = $v.createdAt_gt?.toBuilder();
      _createdAt_gte = $v.createdAt_gte?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _kind = $v.kind;
      _kind_not = $v.kind_not;
      _kind_in = $v.kind_in?.toBuilder();
      _kind_not_in = $v.kind_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereInput;
  }

  @override
  void update(void Function(GUserWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserWhereInput build() => _build();

  _$GUserWhereInput _build() {
    _$GUserWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GUserWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              documentInStages_every: _documentInStages_every?.build(),
              documentInStages_some: _documentInStages_some?.build(),
              documentInStages_none: _documentInStages_none?.build(),
              isActive: isActive,
              isActive_not: isActive_not,
              picture: picture,
              picture_not: picture_not,
              picture_in: _picture_in?.build(),
              picture_not_in: _picture_not_in?.build(),
              picture_contains: picture_contains,
              picture_not_contains: picture_not_contains,
              picture_starts_with: picture_starts_with,
              picture_not_starts_with: picture_not_starts_with,
              picture_ends_with: picture_ends_with,
              picture_not_ends_with: picture_not_ends_with,
              name: name,
              name_not: name_not,
              name_in: _name_in?.build(),
              name_not_in: _name_not_in?.build(),
              name_contains: name_contains,
              name_not_contains: name_not_contains,
              name_starts_with: name_starts_with,
              name_not_starts_with: name_not_starts_with,
              name_ends_with: name_ends_with,
              name_not_ends_with: name_not_ends_with,
              publishedAt: _publishedAt?.build(),
              publishedAt_not: _publishedAt_not?.build(),
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: _publishedAt_lt?.build(),
              publishedAt_lte: _publishedAt_lte?.build(),
              publishedAt_gt: _publishedAt_gt?.build(),
              publishedAt_gte: _publishedAt_gte?.build(),
              updatedAt: _updatedAt?.build(),
              updatedAt_not: _updatedAt_not?.build(),
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: _updatedAt_lt?.build(),
              updatedAt_lte: _updatedAt_lte?.build(),
              updatedAt_gt: _updatedAt_gt?.build(),
              updatedAt_gte: _updatedAt_gte?.build(),
              createdAt: _createdAt?.build(),
              createdAt_not: _createdAt_not?.build(),
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: _createdAt_lt?.build(),
              createdAt_lte: _createdAt_lte?.build(),
              createdAt_gt: _createdAt_gt?.build(),
              createdAt_gte: _createdAt_gte?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              kind: kind,
              kind_not: kind_not,
              kind_in: _kind_in?.build(),
              kind_not_in: _kind_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();
        _$failedField = 'documentInStages_every';
        _documentInStages_every?.build();
        _$failedField = 'documentInStages_some';
        _documentInStages_some?.build();
        _$failedField = 'documentInStages_none';
        _documentInStages_none?.build();

        _$failedField = 'picture_in';
        _picture_in?.build();
        _$failedField = 'picture_not_in';
        _picture_not_in?.build();

        _$failedField = 'name_in';
        _name_in?.build();
        _$failedField = 'name_not_in';
        _name_not_in?.build();

        _$failedField = 'publishedAt';
        _publishedAt?.build();
        _$failedField = 'publishedAt_not';
        _publishedAt_not?.build();
        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();
        _$failedField = 'publishedAt_lt';
        _publishedAt_lt?.build();
        _$failedField = 'publishedAt_lte';
        _publishedAt_lte?.build();
        _$failedField = 'publishedAt_gt';
        _publishedAt_gt?.build();
        _$failedField = 'publishedAt_gte';
        _publishedAt_gte?.build();
        _$failedField = 'updatedAt';
        _updatedAt?.build();
        _$failedField = 'updatedAt_not';
        _updatedAt_not?.build();
        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();
        _$failedField = 'updatedAt_lt';
        _updatedAt_lt?.build();
        _$failedField = 'updatedAt_lte';
        _updatedAt_lte?.build();
        _$failedField = 'updatedAt_gt';
        _updatedAt_gt?.build();
        _$failedField = 'updatedAt_gte';
        _updatedAt_gte?.build();
        _$failedField = 'createdAt';
        _createdAt?.build();
        _$failedField = 'createdAt_not';
        _createdAt_not?.build();
        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();
        _$failedField = 'createdAt_lt';
        _createdAt_lt?.build();
        _$failedField = 'createdAt_lte';
        _createdAt_lte?.build();
        _$failedField = 'createdAt_gt';
        _createdAt_gt?.build();
        _$failedField = 'createdAt_gte';
        _createdAt_gte?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'kind_in';
        _kind_in?.build();
        _$failedField = 'kind_not_in';
        _kind_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereStageInput extends GUserWhereStageInput {
  @override
  final BuiltList<GUserWhereStageInput>? AND;
  @override
  final BuiltList<GUserWhereStageInput>? OR;
  @override
  final BuiltList<GUserWhereStageInput>? NOT;
  @override
  final GStage? stage;
  @override
  final GUserWhereComparatorInput? compareWithParent;

  factory _$GUserWhereStageInput(
          [void Function(GUserWhereStageInputBuilder)? updates]) =>
      (new GUserWhereStageInputBuilder()..update(updates))._build();

  _$GUserWhereStageInput._(
      {this.AND, this.OR, this.NOT, this.stage, this.compareWithParent})
      : super._();

  @override
  GUserWhereStageInput rebuild(
          void Function(GUserWhereStageInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereStageInputBuilder toBuilder() =>
      new GUserWhereStageInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereStageInput &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        stage == other.stage &&
        compareWithParent == other.compareWithParent;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, AND.hashCode);
    _$hash = $jc(_$hash, OR.hashCode);
    _$hash = $jc(_$hash, NOT.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, compareWithParent.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserWhereStageInput')
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('stage', stage)
          ..add('compareWithParent', compareWithParent))
        .toString();
  }
}

class GUserWhereStageInputBuilder
    implements Builder<GUserWhereStageInput, GUserWhereStageInputBuilder> {
  _$GUserWhereStageInput? _$v;

  ListBuilder<GUserWhereStageInput>? _AND;
  ListBuilder<GUserWhereStageInput> get AND =>
      _$this._AND ??= new ListBuilder<GUserWhereStageInput>();
  set AND(ListBuilder<GUserWhereStageInput>? AND) => _$this._AND = AND;

  ListBuilder<GUserWhereStageInput>? _OR;
  ListBuilder<GUserWhereStageInput> get OR =>
      _$this._OR ??= new ListBuilder<GUserWhereStageInput>();
  set OR(ListBuilder<GUserWhereStageInput>? OR) => _$this._OR = OR;

  ListBuilder<GUserWhereStageInput>? _NOT;
  ListBuilder<GUserWhereStageInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GUserWhereStageInput>();
  set NOT(ListBuilder<GUserWhereStageInput>? NOT) => _$this._NOT = NOT;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  GUserWhereComparatorInputBuilder? _compareWithParent;
  GUserWhereComparatorInputBuilder get compareWithParent =>
      _$this._compareWithParent ??= new GUserWhereComparatorInputBuilder();
  set compareWithParent(GUserWhereComparatorInputBuilder? compareWithParent) =>
      _$this._compareWithParent = compareWithParent;

  GUserWhereStageInputBuilder();

  GUserWhereStageInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _stage = $v.stage;
      _compareWithParent = $v.compareWithParent?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereStageInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereStageInput;
  }

  @override
  void update(void Function(GUserWhereStageInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserWhereStageInput build() => _build();

  _$GUserWhereStageInput _build() {
    _$GUserWhereStageInput _$result;
    try {
      _$result = _$v ??
          new _$GUserWhereStageInput._(
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              stage: stage,
              compareWithParent: _compareWithParent?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'compareWithParent';
        _compareWithParent?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GUserWhereStageInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereUniqueInput extends GUserWhereUniqueInput {
  @override
  final String? id;

  factory _$GUserWhereUniqueInput(
          [void Function(GUserWhereUniqueInputBuilder)? updates]) =>
      (new GUserWhereUniqueInputBuilder()..update(updates))._build();

  _$GUserWhereUniqueInput._({this.id}) : super._();

  @override
  GUserWhereUniqueInput rebuild(
          void Function(GUserWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereUniqueInputBuilder toBuilder() =>
      new GUserWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GUserWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GUserWhereUniqueInputBuilder
    implements Builder<GUserWhereUniqueInput, GUserWhereUniqueInputBuilder> {
  _$GUserWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GUserWhereUniqueInputBuilder();

  GUserWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereUniqueInput;
  }

  @override
  void update(void Function(GUserWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GUserWhereUniqueInput build() => _build();

  _$GUserWhereUniqueInput _build() {
    final _$result = _$v ?? new _$GUserWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GVersionWhereInput extends GVersionWhereInput {
  @override
  final String id;
  @override
  final GStage stage;
  @override
  final int revision;

  factory _$GVersionWhereInput(
          [void Function(GVersionWhereInputBuilder)? updates]) =>
      (new GVersionWhereInputBuilder()..update(updates))._build();

  _$GVersionWhereInput._(
      {required this.id, required this.stage, required this.revision})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'GVersionWhereInput', 'id');
    BuiltValueNullFieldError.checkNotNull(
        stage, r'GVersionWhereInput', 'stage');
    BuiltValueNullFieldError.checkNotNull(
        revision, r'GVersionWhereInput', 'revision');
  }

  @override
  GVersionWhereInput rebuild(
          void Function(GVersionWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GVersionWhereInputBuilder toBuilder() =>
      new GVersionWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GVersionWhereInput &&
        id == other.id &&
        stage == other.stage &&
        revision == other.revision;
  }

  @override
  int get hashCode {
    var _$hash = 0;
    _$hash = $jc(_$hash, id.hashCode);
    _$hash = $jc(_$hash, stage.hashCode);
    _$hash = $jc(_$hash, revision.hashCode);
    _$hash = $jf(_$hash);
    return _$hash;
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GVersionWhereInput')
          ..add('id', id)
          ..add('stage', stage)
          ..add('revision', revision))
        .toString();
  }
}

class GVersionWhereInputBuilder
    implements Builder<GVersionWhereInput, GVersionWhereInputBuilder> {
  _$GVersionWhereInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  int? _revision;
  int? get revision => _$this._revision;
  set revision(int? revision) => _$this._revision = revision;

  GVersionWhereInputBuilder();

  GVersionWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _stage = $v.stage;
      _revision = $v.revision;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GVersionWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GVersionWhereInput;
  }

  @override
  void update(void Function(GVersionWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GVersionWhereInput build() => _build();

  _$GVersionWhereInput _build() {
    final _$result = _$v ??
        new _$GVersionWhereInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'GVersionWhereInput', 'id'),
            stage: BuiltValueNullFieldError.checkNotNull(
                stage, r'GVersionWhereInput', 'stage'),
            revision: BuiltValueNullFieldError.checkNotNull(
                revision, r'GVersionWhereInput', 'revision'));
    replace(_$result);
    return _$result;
  }
}

// ignore_for_file: deprecated_member_use_from_same_package,type=lint
